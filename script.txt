repeat wait() until game:IsLoaded()
if not game:IsLoaded() then game.Loaded:Wait() end
repeat wait() until game.Players
repeat wait() until game.Players.LocalPlayer
repeat wait() until game.ReplicatedStorage
repeat wait() until game.ReplicatedStorage:FindFirstChild("Remotes");
repeat wait() until game.Players.LocalPlayer:FindFirstChild("PlayerGui");
repeat wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main");

if not getgenv().SettingSave then
    getgenv().SettingSave = {

        ["Main"] = {
            ["ModeFarm"] = "tp",
            ["AutoFarmLevel"] = false,
            ["DoubleQuest"] = true,
        },

        ["NextSea"] = {
            ["AutoSecondSea"] = false,
            ["AutoThirdSea"] = false,
        },

        
        ["Mastery"] = {
            ["FruitMastery"] = false,
            ["GunMastery"] = false,
            ["Healthpercen"] = 35,
            ["lockmastery"] = 600,
            ["Z"] = false,
            ["X"] = false,
            ["C"] = false,
            ["V"] = false,
        },

        ["Boss"] = {
            ["AutoKillAllBoss"] = false,
            ["AutoKillBoss"] = false,
            ["AutoBossQuest"] = false,
            ["SelectBoss"] = "",
            ["HopServer"] = false,
        },
        

        ["SettingsFarm"] = {
            ["AutoHaki"] = true,
            ["Weapon"] = "Melee",
            ["FastAttack"] = true,
            ["SetTeam"] = "Pirates",
            ["CameraShaker"] = true,
            ["AlwaysCritical"] = true,
            ["hitbox"] = 100,
            ["RedeemCode"] = 200,
        },

        ["Player"] = {
            ["SelectedKillType"] = "Melee",
            ["Z"] = false,
            ["X"] = false,
            ["C"] = false,
            ["V"] = false,
            ["aimbotskill"] = false,
            ["aimbotgun"] = false,
            ["Ignoreaimbot"] = {
                Allies = true,
                Friend = false,
                Team = false,
            },
            ["MinDistanceLock"] = 2500,
            ["SelectedAimbotType"] = "Aimbot + SelectPlayer",
        },

        ["Stats"] = {
            ["Points"] = 1,
            ["Melee"] = false,
            ["Defense"] = false,
            ["Sword"] = false,
            ["Gun"] = false,
            ["Devil Fruit"] = false,
        },

        ["Raid"] = {
            ["KillAura"] = false,
            ["AutoNextIsland"] = false,
            ['AutoAwake'] = false,
            ["AutoStartRaid"] = false,
            ["SelectedChips"] = "",
            ["AutobuyChips"] = false,
            ["UnLockGeppo"] = false,
            ["UnlockKen"] = false,
        },

        ["Fps"] = {
            ["SelectFps"] = 60,
            ["LockFps"] = true,
            ["WhiteScreen"] = false,
        },

        ["Fruit"] = {
            ["DevilFruitStore"] = false,
            ["DevilFruitRandom"] = false,
            ["SelectFruitSniper"] = "",
            ["AutoSniperFruit"] = false,
        },
    }
end
[[
if game:GetService("Players").LocalPlayer.PlayerGui.Main:FindFirstChild("ChooseTeam") then
    if getgenv().SettingSave["SettingsFarm"]["SetTeam"] == "Pirates" then
        for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    elseif getgenv().SettingSave["SettingsFarm"]["SetTeam"] == "Marines" then
        for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    else
        for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated)) do
            v.Function()
        end
    end
end

local filename = "KievHub/BloxFruit.json"

function Load()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("KievHub") then
            makefolder("KievHub")
        end
        if not isfile(filename) then
            writefile(filename, game:GetService("HttpService"):JSONEncode(SettingSave))
        else
            local Decode = game:GetService("HttpService"):JSONDecode(readfile(filename))
            for i,v in pairs(Decode) do
                SettingSave[i] = v
            end
        end
    else
        warn("Failed Load")
        return false
    end
end
function Save()
    if readfile and writefile and isfile then
        if not isfile(filename) then
            Load()
        else
            local Decode = game:GetService("HttpService"):JSONDecode(readfile(filename))
            local Array = {}
            for i,v in pairs(SettingSave) do
                Array[i] = v
            end
            writefile(filename, game:GetService("HttpService"):JSONEncode(Array))
        end
    else
        warn("Failed Save")
        return false
    end
end

Load()
Save()
]]

local LocalPlayer = game.Players.LocalPlayer
local Plr = game.Players.LocalPlayer
local Rigc = getupvalue(require(game:GetService("Players").LocalPlayer.PlayerScripts.CombatFramework),2)
local CombatFrameworkR = getupvalues(require(Plr.PlayerScripts.CombatFramework))[2]
local cooldownfastattack = tick()
--local CameraShaker = require(LocalPlayer.PlayerScripts.CombatFramework.CameraShaker.CameraShakeInstance)
local PC = require(LocalPlayer.PlayerScripts.CombatFramework.Particle)
local RL = require(game:GetService("ReplicatedStorage").CombatFramework.RigLib)
local DMG = require(LocalPlayer.PlayerScripts.CombatFramework.Particle.Damage)
local cd = 0
local Quest = require(game:GetService("ReplicatedStorage").Quests)
local GuideModule = require(game:GetService("ReplicatedStorage").GuideModule)
local Queue = require(game:GetService("ReplicatedStorage").Queue)
local Collection = game:GetService("CollectionService")
local NPCList = getupvalues(Queue.new)[1][1].NPCDialogueEnabler.bin
local QuestNpc = {}
getgenv().PastQuest = 1
local computed_quest = {}
local quest_fordropdown = {}
do -- Init
	task = task or getrenv().task;
	fastSpawn,fastWait,delay = task.spawn,task.wait,task.delay
end
local FirstSea
local SecondSea
local ThirdSea
if game.PlaceId == 2753915549 then
	FirstSea = true
elseif game.PlaceId == 4442272183 then
	SecondSea = true
elseif game.PlaceId == 7449423635 then
	ThirdSea = true
end
if not shared.orl then shared.orl = RL.wrapAttackAnimationAsync end
if not shared.cpc then shared.cpc = PC.play end
if not shared.dnew then shared.dnew = DMG.new end
for i,v in pairs(NPCList) do
	local Model = v.Model
	if Model:FindFirstChild("QuestFloor",true) then
		QuestNpc[Model.Name] = v
		QuestNpc[Model.Name].lowername = Model.Name:lower()
	end
end
for i,v in pairs(QuestNpc) do
	computed_quest[v.Model.Name] = v.Model.Head.CFrame
end
for i,v in pairs(computed_quest) do
	table.insert(quest_fordropdown,i)
end

local CFrameData = {
    ['Bandit Quest Giver'] = {
        MonsterPosition = CFrame.new(1087, 59, 1691),
    },
    ['Jungle'] = {
        MonsterPosition = CFrame.new(-1496, 39, 35),
    },
    ['Jungle'] = {
        MonsterPosition = CFrame.new(-1237, 6, -486)
    },
    ['Pirate Adventurer'] = {
        MonsterPosition = CFrame.new(-1115, 14, 3938),
    },
    ['Pirate Adventurer'] = {
        MonsterPosition = CFrame.new(-1145, 15, 4350),
    },
    ['Desert Adventurer'] = {
        MonsterPosition = CFrame.new(932, 7, 4484),
    },
    ['Desert Adventurer'] = {
        MonsterPosition = CFrame.new(1572, 10, 4373),
    },
    ['Villager'] = {
        MonsterPosition = CFrame.new(1220.4945068359375, 138.01187133789062, -1488.0950927734375),
    },
    ['Villager'] = {
        MonsterPosition = CFrame.new(1220.4945068359375, 138.01187133789062, -1488.0950927734375),
    },
    ['Marine'] = {
        MonsterPosition = CFrame.new(-4769, 5, 4296),
    },
    ['Sky Adventurer'] = {
        MonsterPosition = CFrame.new(-4981, 278, -2830),
    },
    ['Sky Adventurer'] = {
        MonsterPosition = CFrame.new(-5250, 389, -2272),
    },
    ['Jail Keeper'] = {
        MonsterPosition = CFrame.new(5411, 96, 690),
    },
    ['Jail Keeper'] = {
        MonsterPosition = CFrame.new(5411, 96, 690),
    },
    ['Colosseum Quest Giver'] = {
        MonsterPosition = CFrame.new(-1770, 8, -2777),
    },
    ['Colosseum Quest Giver'] = {
        MonsterPosition = CFrame.new(-1098.77197265625, 7.289023399353027, -3186.43017578125),
    },
    ['The Mayor'] = {
        MonsterPosition = CFrame.new(-5408, 11, 8447),
    },
    ['The Mayor'] = {
        MonsterPosition = CFrame.new(-5815, 84, 8820),
    },
    ['King Neptune'] = {
        MonsterPosition = CFrame.new(60859, 19, 1501),
    },
    ['King Neptune'] = {
        MonsterPosition = CFrame.new(61891, 19, 1470),
    },
    ['Mole'] = {
        MonsterPosition = CFrame.new(-4716.41650390625, 850.8406982421875, -1917.7427978515625),
    },
    ['Mole'] = {
        MonsterPosition = CFrame.new(-7685, 5567, -502),
    },
    ['Gan Fall Adventurer'] = {
        MonsterPosition = CFrame.new(-7670, 5607, -1460),
    },
    ['Gan Fall Adventurer'] = {
        MonsterPosition = CFrame.new(-7828, 5607, -1744),
    },
    ['Gan Fall Adventurer'] = {
        MonsterPosition = CFrame.new(-7828, 5607, -1744),
    },
    ['Freezeburg Quest Giver'] = {
        MonsterPosition = CFrame.new(5453.5986328125, 38.50115203857422, 3994.838623046875),
    },
    ["Freezeburg Quest Giver"] = {
        MonsterPosition = CFrame.new(5410.76708984375, 60.19193649291992, 4879.75830078125),
    },
    -- Second Sea
}

local AllQuest = {
    {
        1,
        "Bandit Quest Giver",
        "Default",
        MonsterPosition = CFrame.new(1087, 59, 1691),
    },
    
    
    {
        10,
        "Adventurer",
        "Jungle",
        
        MonsterPosition = CFrame.new(-1496, 39, 35),
        SecondPosition = CFrame.new(-1237, 6, -486),
        [15] = CFrame.new(-1237, 6, -486),
    },
    {
        30,
        "Pirate Adventurer",
        "Pirate",
        MonsterPosition = CFrame.new(-1115, 14, 3938),
        SecondPosition = CFrame.new(-1145, 15, 4350),
        [45] = CFrame.new(-1145, 15, 4350),
    }, -- 3
    {
        60,
        "Desert Adventurer",
        "Desert",
        MonsterPosition = CFrame.new(932, 7, 4484),
        SecondPosition = CFrame.new(1572, 10, 4373),
        [75] = CFrame.new(1572, 10, 4373),
    },
    {
        90,
        "Villager",
        "Ice",
        MonsterPosition = CFrame.new(1220.4945068359375, 138.01187133789062, -1488.0950927734375),
        SecondPosition = CFrame.new(1220.4945068359375, 138.01187133789062, -1488.0950927734375),
        [100] = CFrame.new(1220.4945068359375, 138.01187133789062, -1488.0950927734375),
    },
    {
        120,
        "Marine",
        "MarineBase",
        MonsterPosition = CFrame.new(-4769, 5, 4296),
    }, -- 6
    {
        150,
        "Sky Adventurer",
        "Sky",
        MonsterPosition = CFrame.new(-4981, 278, -2830),
        SecondPosition = CFrame.new(-5250, 389, -2272),
        [175] = CFrame.new(-5250, 389, -2272),
    },
	{
        190,
        "Jail Keeper",
        "Prison",
        MonsterPosition = CFrame.new(5411, 96, 690),
        [210] = CFrame.new(5411, 96, 690),
    },
    {
        250,
        "Colosseum Quest Giver",
        "Colosseum",
        MonsterPosition = CFrame.new(-1770, 8, -2777),
        SecondPosition = CFrame.new(-1098.77197265625, 7.289023399353027, -3186.43017578125),
        [275] = CFrame.new(-1098.77197265625, 7.289023399353027, -3186.43017578125),
    },
    {
        300,
        "The Mayor",
        "Magma",
        MonsterPosition = CFrame.new(-5408, 11, 8447),
        SecondPosition = CFrame.new(-5815, 84, 8820),
        [325] = CFrame.new(-5815, 84, 8820),
    }, -- 9
    {
        375,
        "King Neptune",
        "Fishman",
        MonsterPosition = CFrame.new(60859, 19, 1501),
        SecondPosition = CFrame.new(61891, 19, 1470),
        [425] = CFrame.new(61891, 19, 1470),
    },
    {
        450,
        "Mole",
        "Sky",
        MonsterPosition = CFrame.new(-4716.41650390625, 850.8406982421875, -1917.7427978515625),
        [475] = CFrame.new(-7685, 5567, -502),
    },
    {
        525,
        "Gan Fall Adventurer",
        "Sky2",
        MonsterPosition = CFrame.new(-7670, 5607, -1460),
        [550] = CFrame.new(-7828, 5607, -1744),
    }, -- 12
    {
        625,
        "Freezeburg Quest Giver",
        "Fountain",
        MonsterPosition = CFrame.new(5453.5986328125, 38.50115203857422, 3994.838623046875),
        [675] = CFrame.new(5410.76708984375, 60.19193649291992, 4879.75830078125),
    },
    
    -- V Second Sea V --
    
    {
        700,
        "Area 1 Quest Giver",
        "Default",
        MonsterPosition = CFrame.new(373.1361083984375, 39.16594314575195, 2333.78369140625),
        SecondPosition = CFrame.new(-699.1747436523438, 39.16557312011719, 2379.04931640625),
        [725] = CFrame.new(-699.1747436523438, 39.16557312011719, 2379.04931640625),
    },
    {
        775,
        "Area 2 Quest Giver",
        "Bar",
        MonsterPosition = CFrame.new(975, 121, 1290),
        SecondPosition = CFrame.new(635, 73, 919),
        [800] = CFrame.new(635, 73, 919),
    }, -- 15
    {
        875,
        "Marine Quest Giver",
        "Greenb",
        MonsterPosition = CFrame.new(-2442, 73, -3218),
        SecondPosition = CFrame.new(-1869, 73, -3320),
        [900] = CFrame.new(-1869, 73, -3320),
    },
    {
        950,
        "Graveyard Quest Giver",
        "Graveyard",
        MonsterPosition = CFrame.new(-5495, 48, -792),
        SecondPosition = CFrame.new(-6059, 222, -1269),
        [975] = CFrame.new(-6059, 222, -1269),
    },
    {
        1000,
        "Snow Quest Giver",
        "Snowy",
        MonsterPosition = CFrame.new(610, 406, -5373),
        SecondPosition = CFrame.new(1264, 458, -5194),
        [1050] = CFrame.new(1264, 458, -5194),
    }, -- 18
    {
        1100,
        "Ice Quest Giver",
        "CircleIslandIce",
        MonsterPosition = CFrame.new(-5780, 43, -4483),
        SecondPosition = CFrame.new(-6389, 28, -5870),
        [1125] = CFrame.new(-6389, 28, -5870),
    },
    {
        1175,
        "Fire Quest Giver",
        "CircleIslandFire",
        MonsterPosition = CFrame.new(-5430, 16, -5298),
        SecondPosition = CFrame.new(-5284, 35, -4705),
        [1200] = CFrame.new(-5284, 35, -4705),
    },
    
    {
        1250,
        "Rear Crew Quest Giver",
        "Ship",
        MonsterPosition = CFrame.new(918, 125, 32946),
        SecondPosition = CFrame.new(918, 125, 32946),
        [1275] = CFrame.new(918, 125, 32946),
    }, -- 21
    {
        1300,
        "Front Crew Quest Giver"
        ,"Ship",
        MonsterPosition = CFrame.new(915, 130, 33439),
        SecondPosition = CFrame.new(911, 181, 33365),
        [1325] = CFrame.new(911, 181, 33365),
    },
    {
        1350,
        "Frost Quest Giver",
        "IceCastle",
        MonsterPosition = CFrame.new(5992, 58, -6180),
        SecondPosition = CFrame.new(5518, 61, -6830),
        [1375] = SecondPosition = CFrame.new(5518, 61, -6830),
    },
    {
        1425,
        "Forgotten Quest Giver",
        "ForgottenIsland",
        MonsterPosition = CFrame.new(-3028, 100, -9798),
        SecondPosition = CFrame.new(-3436.17725, 269.001801, -10537.8584, 0.107801214, 0, 0.994172573, 0, 1, 0, -0.994172573, 0, 0.107801214),
        [1450] = CFrame.new(-3436.17725, 269.001801, -10537.8584, 0.107801214, 0, 0.994172573, 0, 1, 0, -0.994172573, 0, 0.107801214),
    }, -- 24
    
    -- V Third Sea V --

    {
        1500,
        "Pirate Port Quest Giver",
        "Default",
        MonsterPosition = CFrame.new(-294, 48, 5604),
        SecondPosition = CFrame.new(-387, 128, 5974),
    },
    {
        1575,
        "Amazon Quest Giver",
        "Hydra3",
        MonsterPosition = CFrame.new(6212, 52, -1283),
        SecondPosition = CFrame.new(6617, 383, 160),
    },
    {
        1625,
        "Amazon Area 2 Quest Giver",
        "Hydra1",
        MonsterPosition = CFrame.new(5704, 825, 1016),
        SecondPosition = CFrame.new(4944, 670, -22),
    }, -- 27
    {
        1700,
        "Marine Tree Quest Giver",
        "GreatTree",
        MonsterPosition = CFrame.new(2622, 134, -7563),
        SecondPosition = CFrame.new(3598, 161, -6984),
    },
    {
        1775,
        "Turtle Adventure Quest Giver",
        "PineappleTown",
        MonsterPosition = CFrame.new(-10440, 332, -8377),
        SecondPosition = CFrame.new(-11017, 332, -9077),
    },
    {
        1825,
        "Deep Forest Quest Giver",
        "BigMansion",
        MonsterPosition = CFrame.new(-13469, 412, -7816),
        SecondPosition = CFrame.new(-13502, 578, -6983),
    }, -- 30
    {
        1900,
        "Deep Forest Area 2 Quest Giver",
        "PineappleTown",
        MonsterPosition = CFrame.new(-11838, 411, -10487),
        SecondPosition = CFrame.new(-13452, 556, -10049),
    },
	{
        1975,
        "Haunted Castle Quest Giver 1",
        "HauntedCastle",
        MonsterPosition = CFrame.new(-8764, 180, 6167),
        SecondPosition = CFrame.new(-10040, 224, 5912),
    },
    {
        2025,
        "Haunted Castle Quest Giver 2",
        "HauntedCastle",
        MonsterPosition = CFrame.new(-9499, 272, 6250),
        SecondPosition = CFrame.new(-9651, 6, 6121),
    }, -- 33
	{
        2075,
        "Peanut Quest Giver",
        "Peanut",
        MonsterPosition = CFrame.new(-2095, 190, -1026),
        SecondPosition = CFrame.new(-2124, 123, -10435),
    },
	{
        2125,
        "Ice Cream Quest Giver",
        "IceCream",
        MonsterPosition = CFrame.new(-737, 212, -10976),
        SecondPosition = CFrame.new(-534, 174, -11225),
    },
	{
        2200,
        "Cake Quest Giver 1",
        "Loaf",
        MonsterPosition = CFrame.new(-2416, 80, -12050),
        SecondPosition = CFrame.new(-1563, 196, -12269),
    },
	{
        2250,
        "Cake Quest Giver 2",
        "Loaf",
        MonsterPosition = CFrame.new(-1681, 144, -12578),
        SecondPosition = CFrame.new(-2308, 106, -12926),
    }, -- 37
    {
        2300,
        "Chocolate Quest Giver 1",
        "Chocolate",
        MonsterPosition = CFrame.new(82, 73, -12318),
        SecondPosition = CFrame.new(618, 79, -12571),
    },
    {
        2350,
        "Chocolate Quest Giver 2",
        "Chocolate",
        MonsterPosition = CFrame.new(-18, 66, -12690),
        SecondPosition = CFrame.new(133, 77, -12876),
    },
    {
        2400,
        "Candy Cane Quest Giver",
        "CandyCane",
        MonsterPosition = CFrame.new(),
        SecondPosition = CFrame.new(),
    },
    

    -- V Fourth Sea V

}

local MobData = {
    ["Ice Admiral [Lv. 700] [Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(1326, 43, -1340),
        QuestName = "NoQuest",
        SpawnPoint = "Ice",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },

    ["Diamond [Lv. 750] [Boss]"] = {
        QuestPosition = Vector3.new(-426.19751, 72.97052, 1832.7229, 0.221195161, -7.87513166e-09, -0.975229561, 5.60455948e-09, 1, -6.80396717e-09, 0.975229561, -3.9607273e-09, 0.221195161),
        MonsterPosition = Vector3.new(-1601.06909, 198.592651, 84.6078873, 0.631007969, -5.52918173e-08, 0.775776327, 3.93015647e-08, 1, 3.93054194e-08, -0.775776327, 5.68719161e-09, 0.631007969),
        QuestName = "Area1Quest",
        SpawnPoint = "Default",
        QuestIndex = 3,
        Reward = "Reward:\n$25,000\n12,500,000 Exp.",
    },

    ["Smoke Admiral [Lv. 1150] [Boss]"] = {
        QuestPosition = Vector3.new(-6059.96191, 15.9868021, -4904.7373, -0.444992423, -3.0874483e-09, 0.895534337, -3.64098796e-08, 1, -1.4644522e-08, -0.895534337, -3.91229982e-08, -0.444992423),
        MonsterPosition = Vector3.new(-5115.72754, 23.7664986, -5338.2207, 0.251453817, 1.48345061e-08, -0.967869282, 4.02796978e-08, 1, 2.57916977e-08, 0.967869282, -4.54708946e-08, 0.251453817),
        QuestName = "IceSideQuest",
        SpawnPoint = "CircleIslandFire",
        QuestIndex = 3,
        Reward = "Reward:\n$20,000\n32,500,000 Exp.",
    },

    ["Awakened Ice Admiral [Lv. 1400] [Boss]"] = {
        QuestPosition = Vector3.new(5669.33203, 28.2118053, -6481.55908, 0.921275556, -1.25320829e-08, 0.388910472, 4.72230788e-08, 1, -7.96414241e-08, -0.388910472, 9.17372489e-08, 0.921275556),
        MonsterPosition = Vector3.new(6407.33936, 340.223785, -6892.521, 0.49051559, -5.25310213e-08, -0.871432424, -2.76146022e-08, 1, -7.58250565e-08, 0.871432424, 6.12576301e-08, 0.49051559),
        QuestName = "FrostQuest",
        SpawnPoint = "IceCastle",
        QuestIndex = 3,
        Reward = "Reward:\n$20,000\n45,000,000 Exp.",
    },

    ["Cursed Captain [Lv. 1325] [Raid Boss]"] = {
        MonsterPosition = Vector3.new(),
        SpawnPoint = "NoQuest",
        QuestPosition = "NoQuest",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    
    ["Order [Lv. 1250] [Raid Boss]"] = {
        SpawnPoint = "NoQuest",
        QuestPosition = "NoQuest",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        MonsterPosition = Vector3.new(),
        Reward = "NoQuest",
    },

    ["Tide Keeper [Lv. 1475] [Boss]"] = {
        QuestPosition = Vector3.new(-3053.89648, 236.881363, -10148.2324, -0.985987961, -3.58504737e-09, 0.16681771, -3.07832915e-09, 1, 3.29612559e-09, -0.16681771, 2.73641976e-09, -0.985987961),
        MonsterPosition = Vector3.new(-3570.18652, 123.328949, -11555.9072, 0.465199202, -1.3857326e-08, 0.885206044, 4.0332897e-09, 1, 1.35347511e-08, -0.885206044, -2.72606271e-09, 0.465199202),
        QuestName = "ForgottenQuest",
        SpawnPoint = "ForgottenIsland",
        QuestIndex = 3,
        Reward = "Reward:\n$12,500\n51,000,000 Exp.",
    },

    ["Jeremy [Lv. 850] [Boss]"] = {
        QuestPosition = Vector3.new(632.698608, 73.1055908, 918.666321, -0.0319722369, 8.96074881e-10, -0.999488771, 1.36326533e-10, 1, 8.92172336e-10, 0.999488771, -1.07732087e-10, -0.0319722369),
        MonsterPosition = Vector3.new(2103, 449, 922),
        QuestName = "Area2Quest",
        SpawnPoint = "DressTown",
        QuestIndex = 3,
        Reward = "Reward:\n$25,000\n16,000,000 Exp.",
    },
    ["Core"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(505, 143, -379),
        QuestName = "NoQuest",
        SpawnPoint = "DressTown",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Training Dummy [Lv. 1500]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(3804, 92, 270),
        QuestName = "NoQuest",
        SpawnPoint = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Soul Reaper [Lv. 2100] [Raid Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(-9520, 316, 6657),
        QuestName = "NoQuest",
        SpawnPoint = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["rip_indra True Form [Lv. 5000] [Raid Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(-5428, 314, -2668),
        QuestName = "NoQuest",
        SpawnPoint = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    }, 
    ["Warden [Lv. 220] [Boss]"] = {
        QuestPosition = Vector3.new(5189, 4, 688),
        MonsterPosition = Vector3.new(5271.8110351563, 161.83946228027, 843.14056396484),
        QuestName = "ImpelQuest",
        SpawnPoint = "Prison",
        QuestIndex = 1,
        Reward = "Reward:\n$6,000\n850,000 Exp."
    },
    ["Chief Warden [Lv. 230] [Boss]"] = {
        QuestPosition = Vector3.new(5189, 4, 688),
        MonsterPosition = Vector3.new(5271.8110351563, 161.83946228027, 843.14056396484),
        QuestName = "ImpelQuest",
        SpawnPoint = "Prison",
        QuestIndex = 2,
        Reward = "Reward:\n$10,000\n1,000,000 Exp."
    },
    ["Swan [Lv. 240] [Boss]"] = {
        QuestPosition = Vector3.new(5189, 4, 688),
        MonsterPosition = Vector3.new(5271.8110351563, 161.83946228027, 843.14056396484),
        QuestName = "ImpelQuest",
        SpawnPoint = "Prison",
        QuestIndex = 3,
        Reward = "Reward:\n$15,000\n1,600,000 Exp."
    },
    ["The Gorilla King [Lv. 25] [Boss]"] = {
        QuestPosition = Vector3.new(-1600.2290039063, 36.8779296875, 153.01272583008),
        MonsterPosition = Vector3.new(-1127.2087402344, 74.843826293945, -511.47674560547),
        QuestName = "JungleQuest",
        SpawnPoint = "Jungle",
        QuestIndex = 3,
        Reward = "Reward:\n$2,000\n9,500 Exp."
    },
    ["Vice Admiral [Lv. 130] [Boss]"] = {
        QuestPosition = Vector3.new(-5037.822265625, 28.677835464478, 4324.57421875),
        MonsterPosition = Vector3.new(-5113.41796875, 169.67807006836, 4365.59375),
        QuestName = "MarineQuest2",
        SpawnPoint = "MarineBase",
        QuestIndex = 2,
        Reward = "Reward:\n$15,000\n415,000 Exp."
    },
    ["Wysper [Lv. 500] [Boss]"] = {
        QuestPosition = Vector3.new(-7859, 5546, -379),
        MonsterPosition = Vector3.new(-8030, 5577, -609),
        QuestName = "SkyExp1Quest",
        SpawnPoint = "Sky2",
        QuestIndex = 3,
        Reward = "Reward:\n$15,000\n5,700,000 Exp."
    },
    ["Magma Admiral [Lv. 350] [Boss]"] = {
        QuestPosition = Vector3.new(-5314, 12, 8517),
        MonsterPosition = Vector3.new(-5495, 181, 8761),
        QuestName = "MagmaQuest",
        SpawnPoint = "Magma",
        QuestIndex = 3,
        Reward = "Reward:\n$15,000\n3,000,000 Exp."
    },
    ["Yeti [Lv. 110] [Boss]"] = {
        QuestPosition = Vector3.new(1386, 87, -1300),
        MonsterPosition = Vector3.new(1223, 138, -1487),
        QuestName = "SnowQuest",
        SpawnPoint = "Ice",
        QuestIndex = 3,
        Reward = "Reward:\n$10,000\n220,000 Exp."
    },
    ["Bobby [Lv. 55] [Boss]"] = {
        QuestPosition = Vector3.new(-1140.1296386719, 5.177855014801, 3830.4733886719),
        MonsterPosition = Vector3.new(-1152.2501220703, 57.187534332275, 4174.9418945313),
        QuestName = "BuggyQuest1",
        SpawnPoint = "Pirate",
        QuestIndex = 3,
        Reward = "Reward:\n$8,000\n45,000 Exp."
    },
    ["Fishman Lord [Lv. 425] [Boss]"] = {
        QuestPosition = Vector3.new(61121, 19, 1567),
        MonsterPosition = Vector3.new(61350, 31, 1128),
        QuestName = "FishmanQuest",
        SpawnPoint = "Fishman",
        QuestIndex = 3,
        Reward = "Reward:\n$15,000\n4,250,000 Exp."
    },
    ["Cyborg [Lv. 675] [Boss]"] = {
        QuestPosition = Vector3.new(5258.2646484375, 38.526931762695, 4049.0847167969),
        MonsterPosition = Vector3.new(6098.583984375, 59.527156829834, 4058.7717285156),
        QuestName = "FountainQuest",
        SpawnPoint = "Fountain",
        QuestIndex = 3,
        Reward = "Reward:\n$20,000\n10,000,000 Exp."
    },

    ["Don Swan [Lv. 1000] [Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(2288.802, 15.1870775, 863.034607, 0.99974072, -8.41247214e-08, -0.0227668174, 8.4774733e-08, 1, 2.75850098e-08, 0.0227668174, -2.95079072e-08, 0.99974072),
        QuestName = "NoQuest",
        SpawnPoint = "Bar",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },


    ["The Saw [Lv. 100] [Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(-807.36236572266, 73.867568969727, 1613.8154296875),
        QuestName = "NoQuest",
        SpawnPoint = "Town",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Mob Leader [Lv. 120] [Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(-2881.6022949219, 48.577754974365, 5411.3466796875),
        QuestName = "NoQuest",
        SpawnPoint = "Pirate",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Thunder God [Lv. 575] [Boss]"] = {
        QuestPosition = Vector3.new(-7905, 5636, -1412),
        MonsterPosition = Vector3.new(-7920, 5617, -2277),
        QuestName = "SkyExp2Quest",
        SpawnPoint = "Sky2",
        QuestIndex = 3, 
        Reward = "Reward:\n$20,000\n8,000,000 Exp."
    },
    ["Saber Expert [Lv. 200] [Boss]"] = {
        QuestPosition = "NoQuest",
        MonsterPosition = Vector3.new(-1454, 30, -46),
        QuestName = "NoQuest",
        SpawnPoint = "Jungle",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Fajita [Lv. 925] [Boss]"] = {
        QuestPosition = Vector3.new(-2442.65015, 73.0511475, -3219.11523, -0.873540044, 4.2329841e-08, -0.486752301, 5.64383384e-08, 1, -1.43220786e-08, 0.486752301, -3.99823996e-08, -0.873540044),
        MonsterPosition = Vector3.new(-2313, 84, -4225),
        QuestName = "MarineQuest3",
        SpawnPoint = "Greenb",
        QuestIndex = 3,
        Reward = "Reward:\n$25,000\n19,000,000 Exp.",
    },
    ["Cake Queen [Lv. 2175] [Boss]"] = {
        QuestPosition = Vector3.new(-823, 66, -10963),
        MonsterPosition = Vector3.new(-721, 382, -11005),
        QuestName = "IceCreamIslandQuest",
        SpawnPoint = "IceCream",
        QuestIndex = 3,
        Reward = "Reward:\n$30,000\n112,500,000 Exp."
    },
    ["Kilo Admiral [Lv. 1750] [Boss]"] = {
        QuestPosition = Vector3.new(2181, 29, -6743),
        MonsterPosition = Vector3.new(2855, 424, -7236),
        QuestName = "MarineTreeIsland",
        SpawnPoint = "GreatTree",
        QuestIndex = 3,
        Reward = "Reward:\n$35,000\n78,000,000 Exp."
    },
    ["Stone [Lv. 1550] [Boss]"] = {
        QuestPosition = Vector3.new(-289, 44, 5579),
        MonsterPosition = Vector3.new(-1144, 40, 6785),
        QuestName = "PiratePortQuest",
        SpawnPoint = "Default",
        QuestIndex = 3,
        Reward = "Reward:\n$25,000\n60,000,000 Exp."
    },
    ["Captain Elephant [Lv. 1875] [Boss]"] = {
        QuestPosition = Vector3.new(-13231, 332, -7626),
        MonsterPosition = Vector3.new(-13384, 367, -8539),
        QuestName = "DeepForestIsland",
        SpawnPoint = "BigMansion",
        QuestIndex = 3,
        Reward = "Reward:\n$40,000\n90,000,000 Exp."
    },
    ["Longma [Lv. 2000] [Boss]"] = {
        MonsterPosition = Vector3.new(-10183, 375, -9528),
        QuestPosition = "NoQuest",
        SpawnPoint = "PineappleTown",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Cursed Skeleton Boss [Lv. 2025] [Boss]"] = {
        MonsterPosition = Vector3.new(-12291, 599, -6551),
        QuestPosition = "NoQuest",
        SpawnPoint = "BigMansion",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Beautiful Pirate [Lv. 1950] [Boss]"] = {
        MonsterPosition = Vector3.new(5315, 23, -39),
        QuestPosition = "NoQuest",
        SpawnPoint = "BigMansion",
        QuestName = "DeepForestIsland2",
        QuestIndex = 3,
        Reward = "Reward:\n$50,000\n100,000,000 Exp.",
    },
    ["Island Empress [Lv. 1675] [Boss]"] = {
        QuestPosition = Vector3.new(5447, 602, 752),
        MonsterPosition = Vector3.new(5770, 661, 141),
        QuestName = "AmazonQuest2",
        SpawnPoint = "Hydra1",
        QuestIndex = 1,
        Reward = "Reward:\n$30,000\n112,500,000 Exp."
    },
    ["Ghost [Lv. 1500]"] = {
        MonsterPosition = Vector3.new(5229, 96, 1177),
        QuestPosition = "NoQuest",
        SpawnPoint = "Hydra1",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Greybeard [Lv. 750] [Raid Boss]"] = {
        MonsterPosition = Vector3.new(-4769, 5, 4296),
        QuestPosition = "NoQuest",
        SpawnPoint = "MarineBase",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
    ["Blackbeard [Lv. 1000] [Raid Boss]"] = {
        MonsterPosition = Vector3.new(3778, 15, -3499),
        QuestPosition = "NoQuest",
        SpawnPoint = "Bar",
        QuestName = "NoQuest",
        QuestIndex = "NoQuest",
        Reward = "NoQuest",
    },
}

function getindex(table,Value)
    for i,v in pairs(table) do
        if v == Value then
            return i 
        end
    end
    return i
end

function Attack()
	spawn(function()
		pcall(function()
			local Controller = Rigc.activeController
			if Controller and tick() >= cd then
				cd = tick() + 0.1
				Controller:attack()
			end
		end)
	end)
end
function Maxincrement()
	local maxincrement = #Rigc.activeController.anims.basic
	return maxincrement
end
function CurrentWeapon()
	local ac = CombatFrameworkR.activeController
	local ret = ac.blades[1]
	if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
	pcall(function()
		while ret.Parent~=game.Players.LocalPlayer.Character do ret=ret.Parent end
	end)
	if not ret then return game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name end
	return ret
end
function getAllBladeHits(Sizes)
	local Hits = {}
	local Client = game.Players.LocalPlayer
	local Enemies = game:GetService("Workspace").Enemies:GetChildren()
	for i=1,#Enemies do local v = Enemies[i]
		local Human = v:FindFirstChildOfClass("Humanoid")
		if Human and Human.RootPart and Human.Health > 0 and Client:DistanceFromCharacter(Human.RootPart.Position) < Sizes+5 then
			table.insert(Hits,Human.RootPart)
		end
	end
	return Hits
end
function SuperAttack()
	local ac = CombatFrameworkR.activeController
	if ac and ac.equipped then
		for indexincrement = 1, 1 do
			local bladehit = getAllBladeHits(100)
			if #bladehit > 0 then
				local AcAttack8 = debug.getupvalue(ac.attack, 5)
				local AcAttack9 = debug.getupvalue(ac.attack, 6)
				local AcAttack7 = debug.getupvalue(ac.attack, 4)
				local AcAttack10 = debug.getupvalue(ac.attack, 7)
				local NumberAc12 = (AcAttack8 * 798405 + AcAttack7 * 727595) % AcAttack9
				local NumberAc13 = AcAttack7 * 798405
				(function()
					NumberAc12 = (NumberAc12 * AcAttack9 + NumberAc13) % 1099511627776
					AcAttack8 = math.floor(NumberAc12 / AcAttack9)
					AcAttack7 = NumberAc12 - AcAttack8 * AcAttack9
				end)()
				AcAttack10 = AcAttack10 + 1
				debug.setupvalue(ac.attack, 5, AcAttack8)
				debug.setupvalue(ac.attack, 6, AcAttack9)
				debug.setupvalue(ac.attack, 4, AcAttack7)
				debug.setupvalue(ac.attack, 7, AcAttack10)
				for k, v in pairs(ac.animator.anims.basic) do
					v:Play(0.01,0.01,0.01)
				end                 
				if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and ac.blades and ac.blades[1] then 
					game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange",tostring(CurrentWeapon()))
					game.ReplicatedStorage.Remotes.Validator:FireServer(math.floor(NumberAc12 / 1099511627776 * 16777215), AcAttack10)
					game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", bladehit, 2, "") 
				end
			end
		end
	end
end


-- DMG.new = function(data)
-- 	data.Value = DamaageText[math.random(1,#DamaageText)]
-- 	return shared.dnew(data)
-- end

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
function TPReturner()
	local Site;
	if foundAnything == "" then
		Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
	else
		Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
	end
	local ID = ""
	if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
		foundAnything = Site.nextPageCursor
	end
	local num = 0;
	for i,v in pairs(Site.data) do
		local Possible = true
		ID = tostring(v.id)
		if tonumber(v.maxPlayers) > tonumber(v.playing) then
			for _,Existing in pairs(AllIDs) do
				if num ~= 0 then
					if ID == tostring(Existing) then
						Possible = false
					end
				else
					if tonumber(actualHour) ~= tonumber(Existing) then
						local delFile = pcall(function()
							-- delfile("NotSameServers.json")
							AllIDs = {}
							table.insert(AllIDs, actualHour)
						end)
					end
				end
				num = num + 1
			end
			if Possible == true then
				table.insert(AllIDs, ID)
				wait()
				pcall(function()
					-- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
					wait()
					game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
				end)
				wait(.1)
			end
		end
	end
end
function Hop() 
	while task.wait() do
		pcall(function()
			TPReturner()
			if foundAnything ~= "" then
				TPReturner()
			end
		end)
	end
end



function Checklevel(LEVEL)
	local Level = LEVEL or LocalPlayer.Data.Level.Value
	local CurrentPlaceId = game.PlaceId

    if CurrentPlaceId == 2753915549 and Level >=  700 then
		Level = 699
    elseif CurrentPlaceId == 4442272183 and Level >= 1500 then -- Sea 2
		Level = 1499
    elseif CurrentPlaceId == 7449423635 and Level >= 2450 then -- Sea 3
		Level = 2449
	end

	local FoundPassQuest = false
	local less = math.huge
	local less2 = math.huge
	for i,value in pairs(Quest) do
		for loop=1,#value do v = value[loop]
			if Level >= v.LevelReq and not v.MeetsRequirements then
				if v.Task[table.foreach(v.Task,tostring)] ~= 1 and Level - v.LevelReq < less then
					less = Level - v.LevelReq
					CurrentQuest = {
						Name = tostring(i),
						Value = tonumber(loop),
						Mob = (table.foreach(v.Task,tostring)),
					}
					if #value > 1 and loop ~= 1 then
						getgenv().PastQuest = value[loop-1].LevelReq + 1
						FoundPassQuest = true
					end
				end
			end
		end
	end

    for i=1,#AllQuest do v = AllQuest[i]
        if Level >= v[1] and Level - v[1] < less2 then
            less2 = Level - v[1]
            CurrentQuest.Npc = v[2]:lower()
            CurrentQuest.Index = i
            CurrentQuest.Spawn = v[3]
            CurrentQuest.MonFirstPos = v["MonsterPosition"]
            CurrentQuest.Lv = Level


            if v[Level] ~= nil then
                CurrentQuest.MonSecondPos = v[Level]["SecondPosition"]
            end
        end
    end

	if not LEVEL and not FoundPassQuest then
		if CurrentQuest.Index > 1 then
			local ID = game.PlaceId
			if (ID == 4442272183 and CurrentQuest.Index == 14) or (ID == 7449423635 and CurrentQuest.Index == 25) then
				return CurrentQuest
			end
			getgenv().PastQuest = AllQuest[CurrentQuest.Index][1]-1
		end
	end

	RecentMob = ""

	return CurrentQuest
end
function GetMobName()
	if LocalPlayer.PlayerGui.Main.Quest.Visible then
		local Text = LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text:split(" ")
		local RealText = ""
		local List = #Text
		local Is = true
		if Text[List]:find("/1)") then
			Is = false
		end
		table.remove(Text,1)
		table.remove(Text,1)
		table.remove(Text,#Text)
		for i=1,#Text do local v = Text[i]
			RealText = RealText..v
			if #Text ~= i then
				RealText = RealText.." "
			end
		end
		if Is then
			RealText = RealText:sub(1,#RealText-1)
		end
		return RealText
	end
end

function Distance(POS)
	return LocalPlayer:DistanceFromCharacter(POS)
end
function getdistance2(Pos,Pos2)
    return (Pos - Pos2).Magnitude 
end
function RunremoteQuest(name,index)
	local args = {
		[1] = "StartQuest",
		[2] = name,
		[3] = index
	}

	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end
function SetSpawn()
	local args = {
		[1] = "SetSpawnPoint"
	}

	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end
function Distance(POS)
	return game.Players.LocalPlayer:DistanceFromCharacter(POS)
end
function getnamefruit(Name)
    if string.find(Name,"Buddha") then
       return "Human-Human: Buddha" 
    end
    if string.find(Name,"Bird") and string.find(Name,"Phoenix") then
       return "Bird-Bird: Phoenix" 
    end
    if string.find(Name,"Bird") and string.find(Name,"Falcon") then
       return "Bird-Bird: Falcon" 
    end
    return Name:split(" ")[1].."-".. Name:split(" ")[1]
end
function totarget(CFgo)

    local Dis = Distance(CFgo.Position)
    if not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end

    if Dis < 1000 then
        Speed = 400
    elseif Dis >= 1000 then
        Speed = 350
    end

    if Dis > 430 then
        local tween_s = game:service"TweenService"
        local info = TweenInfo.new(Dis/Speed, Enum.EasingStyle.Linear)
        local tween, err = pcall(function()
            _G.Teleporting = true
            tween = tween_s:Create(LocalPlayer.Character.HumanoidRootPart, info, {CFrame = CFgo})
            tween:Play()
            repeat
                task.wait() 
            until Distance(CFgo.Position) <= 430 or not _G.Teleporting
            tween:Cancel()
            _G.Teleporting = false
            task.wait(0.8)
            if Distance(CFgo.Position) <= 430 then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFgo
            end
        end)
        if not tween then return err end
    else
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFgo
    end
    
end
function toTarget(targetPos, targetCFrame)
	local tweenfunc = {}

	Distance = (targetCFrame.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude
	if Distance < 1000 then
		Speed = 325
	elseif Distance >= 1000 then
		Speed = 315
	end

	local tween_s = game:service"TweenService"
	local info = TweenInfo.new((targetCFrame.Position - game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position).Magnitude/Speed, Enum.EasingStyle.Linear)
	local tween = tween_s:Create(game:GetService("Players").LocalPlayer.Character["HumanoidRootPart"], info, {CFrame = targetCFrame * CFrame.fromAxisAngle(Vector3.new(1,0,0), math.rad(0))})
	tween:Play()

	function tweenfunc:Stop()
		tween:Cancel()
	end 

	if StatsBypass == "Bypassed" and UseTP then
		tween:Cancel()
		game:GetService("Players").LocalPlayer.Character["HumanoidRootPart"].CFrame = targetCFrame
	end
	if not tween then return tween end
	return tweenfunc
end
function GetToolFromTip(Tip,GetName)
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.ClassName == "Tool" and v.ToolTip == Tip then
            if GetName then
                return v.Name
            else
                return v
            end
        end
    end
    if LocalPlayer.Character then
        local v = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") do
            if v.ClassName == "Tool" and v.ToolTip == Tip then
                if GetName then
                    return v.Name
                else
                    return v
                end
            end
        end
    end
end
function EquipWeapon(Tools)
    if LocalPlayer.Character then
        if game.Players.LocalPlayer.Backpack:FindFirstChild(Tools) then
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(Tools)
            wait()
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
        elseif GetToolFromTip(Tools) then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(GetToolFromTip(Tools))
        end
    end
end
function RunremoteStats(name,index)
	local args = {
		[1] = "AddPoint",
		[2] = name,
		[3] = index
	}

	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end
function BosuHaki()
	if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
		game.ReplicatedStorage.Remotes.CommF_:InvokeServer("Buso")
	end
end
function checkquestkillplr()
    if game.Players:FindFirstChild(game.Players.LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text:split(" ")[2]) then
        return game.Players.LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text:split(" ")[2]
    end
    return false
end
function checkcoldown(Weapon,Skill)
    if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Skills:FindFirstChild(Weapon) then
        return false 
    end
    for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Main.Skills:GetChildren()) do
        if v.Name == Weapon then
            if v:FindFirstChild(Skill) and v[Skill].Cooldown.AbsoluteSize.X == 0 and string.find(tostring(v[Skill].Title.TextColor3),"1, 1, 1") then
                return true
            else
                return false
            end
        end
    end
    return true
end
function useskill(Key,Time)
    game:service('VirtualInputManager'):SendKeyEvent(true, Key, false, game)
    if Time then
        wait(Time)
    end
    game:service('VirtualInputManager'):SendKeyEvent(false, Key, false, game) 
end
function cancelquest()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
end
function getnear(TheMagnitude)
    local PlayerList = {}
    for i,v in pairs(game.Players:GetChildren()) do
        if v.Name ~= game.Players.LocalPlayer.Name then
            table.insert(PlayerList,v)
            if getgenv().SettingSave["Player"]["Ignoreaimbot"].Friend then
                if not v:IsFriendsWith(game.Players.LocalPlayer.UserId) then
                    table.insert(PlayerList,v)
                end
            elseif getgenv().SettingSave["Player"]["Ignoreaimbot"].Team then
                if v.Team ~= game.Players.LocalPlayer.Team then
                    table.insert(PlayerList,v)
                end
            elseif getgenv().SettingSave["Player"]["Ignoreaimbot"].Allies then
                if not game:GetService("Players").LocalPlayer.PlayerGui.Main.Allies.Container.Allies.ScrollingFrame.Frame:FindFirstChild(v.Name) then
                    table.insert(PlayerList,v)
                end
            else
                table.insert(PlayerList,v)
            end
        end
    end
    local Nearcheck = {}
    for i,v in pairs(PlayerList) do
        if v.Character:FindFirstChild("HumanoidRootPart") and (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= TheMagnitude then
           table.insert(Nearcheck,v)
        end
    end
    for i,v in pairs(Nearcheck) do
        for ii,vv in pairs(Nearcheck) do
            if (v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > (vv.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
               table.remove(Nearcheck,i)
            end
        end
    end
    if #Nearcheck == 1 then
       return unpack(Nearcheck)
    elseif #Nearcheck == 2 then
        if (Nearcheck[1].Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > (Nearcheck[2].Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
            return Nearcheck[2]
        else
            return Nearcheck[1]
        end
    else
        for i,v in pairs(Nearcheck) do
            for ii,vv in pairs(Nearcheck) do
                if math.floor((v.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) > math.floor((vv.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude) then
                   table.remove(Nearcheck,i)
                end
            end
        end
        if #Nearcheck == 2 then
            if (Nearcheck[1].Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > (Nearcheck[2].Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                return Nearcheck[2]
            else
                return Nearcheck[1]
            end
        else
            return Nearcheck[1]
        end
    end
return "None"
end
-- function BringMob(mob)
-- 	local Mob = workspace.Enemies:GetChildren()
-- 	for i,v in pairs(Mob) do
-- 		if v.Name == mob.Name and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
--             local CFrameTo = mob.HumanoidRootPart.CFrame
--             v.HumanoidRootPart.CFrame = CFrameTo
--             v.HumanoidRootPart.Size = Vector3.new(70,70,70)
--             v.Humanoid.PlatformStand = true
--             v.Humanoid.Sit = true					
--             v.HumanoidRootPart.CanCollide = false
--             v.Humanoid.JumpPower = 0
--             v.Humanoid.WalkSpeed = 0
--             v.Humanoid:ChangeState(11)
--             v.Humanoid:ChangeState(14)
--             if sethiddenproperty then
-- 				sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
-- 			end
-- 		end
-- 	end
-- end

local FruitAll = {
    "Kilo-Kilo",
    "Spin-Spin",
    "Chop-Chop",
    "Spring-Spring",
    "Bomb-Bomb",
    "Smoke-Smoke",
    "Spike-Spike",
    "Flame-Flame",
    "Bird: Falcon",
    "Ice-Ice",
    "Sand-Sand",
    "Dark-Dark",
    "Revive-Revive",
    "Diamond-Diamond",
    "Light-Light",
    "Love-Love",
    "Rubber-Rubber",
    "Barrier-Barrier",
    "Magma-Magma",
    "Door-Door",
    "Quake-Quake",
    "Human-Human: Buddha",
    "String-String",
    "Bird-Bird: Phoenix",
    "Rumble-Rumble",
    "Paw-Paw",
    "Gravity-Gravity",
    "Dough-Dough",
    "Vemon-Vemon",
    "Control-Control",
    "Soul-Soul",
    "Dragon-Dragon",
    "Leopard-Leopard",
    "Spirit-Spirit",
    "Shadow-Shadow",
    "Blizzard-Blizzard",
    "Portal-Portal",
    "Spider-Spider",
}

function BringMob(mob)
	spawn(function()
		local Mob = workspace.Enemies:GetChildren()
		for i,v in pairs(Mob) do
            if v.Name == mob.Name and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                if syn then
                    if isnetworkowner(v.HumanoidRootPart) then
                        local CFrameTo = mob.HumanoidRootPart.CFrame
                        v.HumanoidRootPart.CFrame = CFrameTo
                        v.HumanoidRootPart.Size = Vector3.new(55,55,55)
                        -- v.Humanoid.PlatformStand = true
                        v.HumanoidRootPart.CanCollide = false
						v.Humanoid.WalkSpeed = 0
						v.Humanoid.Sit = true
                        v.Humanoid:ChangeState(11)
                    end
                else
                    local CFrameTo = mob.HumanoidRootPart.CFrame
                    v.HumanoidRootPart.CFrame = CFrameTo
                    v.HumanoidRootPart.Size = Vector3.new(55,55,55)
                    -- v.Humanoid.PlatformStand = true
                    v.HumanoidRootPart.CanCollide = false
					v.Humanoid.WalkSpeed = 0
					v.Humanoid.Sit = true
                    v.Humanoid:ChangeState(11)	
                    if sethiddenproperty then
                        sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
                    end
                end
            end
		end
	end)
end


function AbandonQuest()
	local args = {
		[1] = "AbandonQuest"
	}

	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end
function CheckCharacter(name)
	return LocalPlayer.Character:FindFirstChild(name)
end
function CheckInventory(name)
	return LocalPlayer.PlayerGui.Main.Inventory.Container.Stored.ScrollingFrame.Frame:FindFirstChild(name)
end
function Skill(use)
	game:GetService("VirtualInputManager"):SendKeyEvent(true,use,false,game)
	wait()
	game:GetService("VirtualInputManager"):SendKeyEvent(false,use,false,game)
end

function GetAllMob()
	return Collection:GetTagged("ActiveRig")
end


function Com(com,...)
	local Remote = game:GetService('ReplicatedStorage').Remotes:FindFirstChild("Comm"..com)
	if Remote:IsA("RemoteEvent") then
		Remote:FireServer(...)
	elseif Remote:IsA("RemoteFunction") then
		Remote:InvokeServer(...)
	end
end
function setspawnat(Name,checkone)
    local Level = LocalPlayer.Data.Level.Value
    local PlayerSpawns = game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[Name].Part
    local Data = game:GetService("Players").LocalPlayer.Data
    local World = {
        Second = 4442272183,
        First = 2753915549, -- first
        Third = 7449423635,
    }
    local Dis = {
        [1] = 3000,
        [2] = 1500,
        [3] = 4500,
    }

    getgenv().ret = false
    if Data.SpawnPoint.Value == Name then
        getgenv().ret = true 
    elseif Data.SpawnPoint.Value == Name and Data.LastSpawnPoint.Value == Name then
        getgenv().ret = true
    elseif game.placeId == World["Second"] and Distance(PlayerSpawns.Position) < Dis[1] then
        getgenv().ret = true
    elseif game.placeId == World["First"] and Distance(PlayerSpawns.Position) < Dis[2] then
        getgenv().ret = true
    elseif game.placeId == World["Third"] and Distance(PlayerSpawns.Position) < Dis[3] then
        getgenv().ret = true
    end


    for i,v in pairs(game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates:GetChildren()) do
        if Data.SpawnPoint.Value == v.Name then
            if Distance(v:GetModelCFrame().Position) > Dis[2] and game.PlaceId == World.First then
                getgenv().ret = false
            end
        end
    end

    if Level >= 375 and Level <= 450 then
        getgenv().ret = true
    elseif Level >= 475 and Level < 525 then
        getgenv().ret = true
    elseif Level >= 525 and Level < 625 then
        if Data.SpawnPoint.Value == "Sky2" then
            getgenv().ret = true
        end
    end

    if getgenv().ret == false then
        game.Players.LocalPlayer.Character.Humanoid.Health = 0
        repeat task.wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = PlayerSpawns.CFrame
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetLastSpawnPoint",Name)
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetSpawnPoint")
        until (Data.SpawnPoint.Value == Name and Data.LastSpawnPoint.Value == Name)
    end
    return getgenv().ret
end

local plr = game.Players.LocalPlayer

local CbFw = getupvalues(require(plr.PlayerScripts.CombatFramework))
local CbFw2 = CbFw[2]

function GetCurrentBlade() 
    local p13 = CbFw2.activeController
    local ret = p13.blades[1]
    if not ret then return end
    while ret.Parent~=game.Players.LocalPlayer.Character do ret=ret.Parent end
    return ret
end
function AttackNoCD() 
	local ac = CbFw2.activeController
	if ac and ac.equipped then
		for indexincrement = 1, 1 do
			local bladehit = getAllBladeHits(60)
			if #bladehit > 0 then
				local AcAttack8 = debug.getupvalue(ac.attack, 5)
				local AcAttack9 = debug.getupvalue(ac.attack, 6)
				local AcAttack7 = debug.getupvalue(ac.attack, 4)
				local AcAttack10 = debug.getupvalue(ac.attack, 7)
				local NumberAc12 = (AcAttack8 * 798405 + AcAttack7 * 727595) % AcAttack9
				local NumberAc13 = AcAttack7 * 798405
				(function()
					NumberAc12 = (NumberAc12 * AcAttack9 + NumberAc13) % 1099511627776
					AcAttack8 = math.floor(NumberAc12 / AcAttack9)
					AcAttack7 = NumberAc12 - AcAttack8 * AcAttack9
				end)()
				AcAttack10 = AcAttack10 + 1
				debug.setupvalue(ac.attack, 5, AcAttack8)
				debug.setupvalue(ac.attack, 6, AcAttack9)
				debug.setupvalue(ac.attack, 4, AcAttack7)
				debug.setupvalue(ac.attack, 7, AcAttack10)
				for k, v in pairs(ac.animator.anims.basic) do
					v:Play(0.01,0.01,0.01)
				end
				if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and ac.blades and ac.blades[1] then 
					game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("weaponChange",tostring(GetCurrentBlade()))
					game.ReplicatedStorage.Remotes.Validator:FireServer(math.floor(NumberAc12 / 1099511627776 * 16777215), AcAttack10)
					game:GetService("ReplicatedStorage").RigControllerEvent:FireServer("hit", bladehit, 2, "") 
				end
			end
		end
	end
end

function Modify(Type)
    local Data = {
        Dodge = function(func)
            for i,v in next, getupvalues(func) do
                if tostring(v) == "0.4" then
                    repeat wait(.1)
                        setupvalue(func,i,0)
                    until game.Players.LocalPlayer.Character.Humanoid.Health <= 0
                end
            end
        end,
        Soru = function(func)
            for i,v in next, getupvalues(func) do
                if typeof(v) == "table"  then
                    repeat wait(.1)
                        v.LastUse = 0
                    until game.Players.LocalPlayer.Character.Humanoid.Health <= 0
                end
            end
        end,
        Geppo = function(func)
            repeat wait(.5)
                setupvalue(func,9,0)
            until game.Players.LocalPlayer.Character.Humanoid.Health <= 0 
        end,
    }
    for i,v in pairs(Type) do
        if not game.Players.LocalPlayer.Character:FindFirstChild(v) then return end
    end
    for i,v in next, getgc() do
        if typeof(v) == "function" then
            for _,SCRIPT_NAME in pairs(Type) do
                local Script = game.Players.LocalPlayer.Character:FindFirstChild(SCRIPT_NAME)
                if getfenv(v).script == Script then
                    spawn(function()
                        rawget(Data,SCRIPT_NAME)(v)
                    end)
                end
            end
        end
    end
end

function checktonew()
    local args = {
        [1] = "DressrosaQuestProgress"
    }
    if not game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)).TalkedDetective then
        return "TalkedDetective" 
    end
    if not game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)).UsedKey then
        return "UsedKey" 
    end
    if not game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)).KilledIceBoss then
        return "KilledIceBoss" 
    end
    return "cango"
end

if game.CoreGui:FindFirstChild("KievHubCommunity") then
    game.CoreGui:FindFirstChild("KievHubCommunity"):Destroy()
end

local InputService = game:GetService('UserInputService');
local TextService = game:GetService('TextService');
local TweenService = game:GetService('TweenService');
local CoreGui = game:GetService('CoreGui');
local RunService = game:GetService('RunService')
local RenderStepped = RunService.RenderStepped;
local LocalPlayer = game:GetService('Players').LocalPlayer;
local Mouse = LocalPlayer:GetMouse();

local ProtectGui = protectgui or (syn and syn.protect_gui) or (function() end);

local ScreenGui = Instance.new('ScreenGui');
ProtectGui(ScreenGui);

ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
ScreenGui.Parent = CoreGui;
ScreenGui.Name = "KievHubCommunity"

local Toggles = {};
local Options = {};

getgenv().Toggles = Toggles;
getgenv().Options = Options;

local Library = {
    Registry = {};
    RegistryMap = {};

    HudRegistry = {};

    FontColor = Color3.fromRGB(255, 255, 255);
    MainColor = Color3.fromRGB(28, 28, 28);
    BackgroundColor = Color3.fromRGB(20, 20, 20);
    AccentColor = Color3.fromRGB(14, 222, 255);
    OutlineColor = Color3.fromRGB(50, 50, 50);


    Black = Color3.new(0, 0, 0);

    OpenedFrames = {};

    Signals = {};
    ScreenGui = ScreenGui;
};

local RainbowStep = 0
local Hue = 0

table.insert(Library.Signals, RenderStepped:Connect(function(Delta)
    RainbowStep = RainbowStep + Delta

    if RainbowStep >= (1 / 60) then
        RainbowStep = 0

        Hue = Hue + (1 / 400);

        if Hue > 1 then
            Hue = 0;
        end;

        Library.CurrentRainbowHue = Hue;
        Library.CurrentRainbowColor = Color3.fromHSV(Hue, 0.8, 1);
    end
end))

function Library:AttemptSave()
    if Library.SaveManager then
        Library.SaveManager:Save();
    end;
end;

function Library:Create(Class, Properties)
    local _Instance = Class;

    if type(Class) == 'string' then
        _Instance = Instance.new(Class);
    end;

    for Property, Value in next, Properties do
        _Instance[Property] = Value;
    end;

    return _Instance;
end;

function Library:CreateLabel(Properties, IsHud)
    local _Instance = Library:Create('TextLabel', {
        BackgroundTransparency = 1;
        Font = Enum.Font.Code;
        TextColor3 = Library.FontColor;
        TextSize = 16;
        TextStrokeTransparency = 0;
    });

    Library:AddToRegistry(_Instance, {
        TextColor3 = 'FontColor';
    }, IsHud);

    return Library:Create(_Instance, Properties);
end;

function Library:MakeDraggable(Instance, Cutoff)
    Instance.Active = true;

   Instance.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
            local ObjPos = Vector2.new(
                Mouse.X - Instance.AbsolutePosition.X,
                Mouse.Y - Instance.AbsolutePosition.Y
            );

            if ObjPos.Y > (Cutoff or 40) then
                return;
            end;

            while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                Instance.Position = UDim2.new(
                    0,
                    Mouse.X - ObjPos.X + (Instance.Size.X.Offset * Instance.AnchorPoint.X),
                    0,
                    Mouse.Y - ObjPos.Y + (Instance.Size.Y.Offset * Instance.AnchorPoint.Y)
                );

                RenderStepped:Wait();
            end;
        end;
    end)
end;

function Library:AddToolTip(InfoStr, HoverInstance)
    local X, Y = Library:GetTextBounds(InfoStr, Enum.Font.Code, 14);
    local Tooltip = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor,        
        BorderColor3 = Library.OutlineColor,

        Size = UDim2.fromOffset(X + 5, Y + 4),
        ZIndex = 11;
        Parent = Library.ScreenGui,

        Visible = false,
    })

    local Label = Library:CreateLabel({
        Position = UDim2.fromOffset(3, 1),
        Size = UDim2.fromOffset(X, Y);
        TextSize = 14;
        Text = InfoStr,
        TextColor3 = Library.FontColor,
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = 12;

        Parent = Tooltip;
    });

    Library:AddToRegistry(Tooltip, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    });

    Library:AddToRegistry(Label, {
        TextColor3 = 'FontColor',
    });

    local IsHovering = false
    HoverInstance.MouseEnter:Connect(function()
        IsHovering = true
        
        Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        Tooltip.Visible = true

        while IsHovering do
            RunService.Heartbeat:Wait()
            Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
        end
    end)

    HoverInstance.MouseLeave:Connect(function()
        IsHovering = false
        Tooltip.Visible = false
    end)
end

function Library:OnHighlight(HighlightInstance, Instance, Properties, PropertiesDefault)
    HighlightInstance.MouseEnter:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        for Property, ColorIdx in next, Properties do
            Instance[Property] = Library[ColorIdx] or ColorIdx;

            if Reg and Reg.Properties[Property] then
                Reg.Properties[Property] = ColorIdx;
            end;
        end;
    end)

    HighlightInstance.MouseLeave:Connect(function()
        local Reg = Library.RegistryMap[Instance];

        for Property, ColorIdx in next, PropertiesDefault do
            Instance[Property] = Library[ColorIdx] or ColorIdx;

            if Reg and Reg.Properties[Property] then
                Reg.Properties[Property] = ColorIdx;
            end;
        end;
    end)
end;

function Library:MouseIsOverOpenedFrame()
    for Frame, _ in next, Library.OpenedFrames do
        local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize;

        if Mouse.X >= AbsPos.X and Mouse.X <= AbsPos.X + AbsSize.X
            and Mouse.Y >= AbsPos.Y and Mouse.Y <= AbsPos.Y + AbsSize.Y then

            return true;
        end;
    end;
end;

function Library:MapValue(Value, MinA, MaxA, MinB, MaxB)
    return (1 - ((Value - MinA) / (MaxA - MinA))) * MinB + ((Value - MinA) / (MaxA - MinA)) * MaxB;
end;

function Library:GetTextBounds(Text, Font, Size, Resolution)
    local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
    return Bounds.X, Bounds.Y
end;

function Library:GetDarkerColor(Color)
    local H, S, V = Color3.toHSV(Color);
    return Color3.fromHSV(H, S, V / 1.5);
end; 
Library.AccentColorDark = Library:GetDarkerColor(Library.AccentColor);

function Library:AddToRegistry(Instance, Properties, IsHud)
    local Idx = #Library.Registry + 1;
    local Data = {
        Instance = Instance;
        Properties = Properties;
        Idx = Idx;
    };

    table.insert(Library.Registry, Data);
    Library.RegistryMap[Instance] = Data;

    if IsHud then
        table.insert(Library.HudRegistry, Data);
    end;
end;

function Library:RemoveFromRegistry(Instance)
    local Data = Library.RegistryMap[Instance];

    if Data then
        for Idx = #Library.Registry, 1, -1 do
            if Library.Registry[Idx] == Data then
                table.remove(Library.Registry, Idx);
            end;
        end;

        for Idx = #Library.HudRegistry, 1, -1 do
            if Library.HudRegistry[Idx] == Data then
                table.remove(Library.HudRegistry, Idx);
            end;
        end;

        Library.RegistryMap[Instance] = nil;
    end;
end;

function Library:UpdateColorsUsingRegistry()
    -- TODO: Could have an 'active' list of objects
    -- where the active list only contains Visible objects.

    -- IMPL: Could setup .Changed events on the AddToRegistry function
    -- that listens for the 'Visible' propert being changed.
    -- Visible: true => Add to active list, and call UpdateColors function
    -- Visible: false => Remove from active list.

    -- The above would be especially efficient for a rainbow menu color or live color-changing.

    for Idx, Object in next, Library.Registry do
        for Property, ColorIdx in next, Object.Properties do
            if type(ColorIdx) == 'string' then
                Object.Instance[Property] = Library[ColorIdx];
            elseif type(ColorIdx) == 'function' then
                Object.Instance[Property] = ColorIdx()
            end
        end;
    end;
end;

function Library:GiveSignal(Signal)
    -- Only used for signals not attached to library instances, as those should be cleaned up on object destruction by Roblox
    table.insert(Library.Signals, Signal)
end

function Library:Unload()
    -- Unload all of the signals
    for Idx = #Library.Signals, 1, -1 do
        local Connection = table.remove(Library.Signals, Idx)
        Connection:Disconnect()
    end

     -- Call our unload callback, maybe to undo some hooks etc
    if Library.OnUnload then
        Library.OnUnload()
    end

    ScreenGui:Destroy()
end

function Library:OnUnload(Callback)
    Library.OnUnload = Callback
end

Library:GiveSignal(ScreenGui.DescendantRemoving:Connect(function(Instance)
    if Library.RegistryMap[Instance] then
        Library:RemoveFromRegistry(Instance);
    end;
end))

local BaseAddons = {};

do
    local Funcs = {};

    function Funcs:AddColorPicker(Idx, Info)
        local ToggleLabel = self.TextLabel;
        local Container = self.Container;

        local ColorPicker = {
            Value = Info.Default;
            Type = 'ColorPicker';
            Title = type(Info.Title) == 'string' and Info.Title or 'Color picker',
        };

        function ColorPicker:SetHSVFromRGB(Color)
            local H, S, V = Color3.toHSV(Color);

            ColorPicker.Hue = H;
            ColorPicker.Sat = S;
            ColorPicker.Vib = V;
        end;

        ColorPicker:SetHSVFromRGB(ColorPicker.Value);

        local DisplayFrame = Library:Create('Frame', {
            BackgroundColor3 = ColorPicker.Value;
            BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(0, 28, 0, 14);
            ZIndex = 6;
            Parent = ToggleLabel;
        });

        local RelativeOffset = 0;

        for _, Element in next, Container:GetChildren() do
            if not Element:IsA('UIListLayout') then
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            end;
        end;

        local PickerFrameOuter = Library:Create('Frame', {
            Name = 'Color';
            BackgroundColor3 = Color3.new(1, 1, 1);
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1);
            Size = UDim2.new(1, -13, 0, 253);
            Visible = false;
            ZIndex = 15;
            Parent = Container.Parent;
        });

        local PickerFrameInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 16;
            Parent = PickerFrameOuter;
        });

        local Highlight = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderSizePixel = 0;
            Size = UDim2.new(1, 0, 0, 2);
            ZIndex = 17;
            Parent = PickerFrameInner;
        });

        local SatVibMapOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.new(0, 4, 0, 25);
            Size = UDim2.new(0, 200, 0, 200);
            ZIndex = 17;
            Parent = PickerFrameInner;
        });

        local SatVibMapInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 18;
            Parent = SatVibMapOuter;
        });

        local SatVibMap = Library:Create('ImageLabel', {
            BorderSizePixel = 0;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 18;
            Image = 'rbxassetid://4155801252';
            Parent = SatVibMapInner;
        });

        local HueSelectorOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.new(0, 208, 0, 25);
            Size = UDim2.new(0, 15, 0, 200);
            ZIndex = 17;
            Parent = PickerFrameInner;
        });

        local HueSelectorInner = Library:Create('Frame', {
            BackgroundColor3 = Color3.new(1, 1, 1);
            BorderSizePixel = 0;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 18;
            Parent = HueSelectorOuter;
        });

        local HueTextSize = Library:GetTextBounds('Hex color', Enum.Font.Code, 16) + 3
        local RgbTextSize = Library:GetTextBounds('255, 255, 255', Enum.Font.Code, 16) + 3

        local HueBoxOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.fromOffset(4, 228),
            Size = UDim2.new(0.5, -6, 0, 20),
            ZIndex = 18,
            Parent = PickerFrameInner;
        });

        local HueBoxInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 18,
            Parent = HueBoxOuter;
        });

        Library:Create('UIGradient', {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotation = 90;
            Parent = HueBoxInner;
        });

        local HueBox = Library:Create('TextBox', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0, 5, 0, 0);
            Size = UDim2.new(1, -5, 1, 0);
            Font = Enum.Font.Code;
            PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
            PlaceholderText = 'Hex color',
            Text = '#FFFFFF',
            TextColor3 = Library.FontColor;
            TextSize = 14;
            TextStrokeTransparency = 0;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZIndex = 20,
            Parent = HueBoxInner;
        });

        local RgbBoxBase = Library:Create(HueBoxOuter:Clone(), {
            Position = UDim2.new(0.5, 2, 0, 228),
            Size = UDim2.new(0.5, -6, 0, 20),
            Parent = PickerFrameInner
        })  

        local RgbBox = Library:Create(RgbBoxBase.Frame:FindFirstChild('TextBox'), {
            Text = '255, 255, 255',
            PlaceholderText = 'RGB color',
            TextColor3 = Library.FontColor,
        })

        local DisplayLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 0, 14);
            Position = UDim2.fromOffset(5, 5);
            TextXAlignment = Enum.TextXAlignment.Left;
            TextSize = 14;
            Text = ColorPicker.Title,--Info.Default;
            TextWrapped = false;
            ZIndex = 16;
            Parent = PickerFrameInner;
        });


        Library:AddToRegistry(PickerFrameInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(Highlight, { BackgroundColor3 = 'AccentColor'; });
        Library:AddToRegistry(SatVibMapInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });

        Library:AddToRegistry(HueBoxInner, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(RgbBoxBase.Frame, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
        Library:AddToRegistry(RgbBox, { TextColor3 = 'FontColor', });
        Library:AddToRegistry(HueBox, { TextColor3 = 'FontColor', });

        local SequenceTable = {};

        for Hue = 0, 1, 0.1 do
            table.insert(SequenceTable, ColorSequenceKeypoint.new(Hue, Color3.fromHSV(Hue, 1, 1)));
        end;

        local HueSelectorGradient = Library:Create('UIGradient', {
            Color = ColorSequence.new(SequenceTable);
            Rotation = 90;
            Parent = HueSelectorInner;
        });
        
        HueBox.FocusLost:Connect(function(enter)
            if enter then
                local success, result = pcall(Color3.fromHex, HueBox.Text)
                if success and typeof(result) == 'Color3' then
                    ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(result)
                end
            end

            ColorPicker:Display()
        end)

        RgbBox.FocusLost:Connect(function(enter)
            if enter then
                local r, g, b = RgbBox.Text:match('(%d+),%s*(%d+),%s*(%d+)')
                if r and g and b then
                    ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(Color3.fromRGB(r, g, b))
                end
            end

            ColorPicker:Display()
        end)

        function ColorPicker:Display()
            ColorPicker.Value = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib);
            SatVibMap.BackgroundColor3 = Color3.fromHSV(ColorPicker.Hue, 1, 1);

            Library:Create(DisplayFrame, {
                BackgroundColor3 = ColorPicker.Value;
                BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
            });

            HueBox.Text = '#' .. ColorPicker.Value:ToHex()
            RgbBox.Text = table.concat({ math.floor(ColorPicker.Value.R * 255), math.floor(ColorPicker.Value.G * 255), math.floor(ColorPicker.Value.B * 255) }, ', ')

            if ColorPicker.Changed then
                ColorPicker.Changed();
            end;
        end;

        function ColorPicker:OnChanged(Func)
            ColorPicker.Changed = Func;
            Func();
        end;

        function ColorPicker:Show()
            for Frame, Val in next, Library.OpenedFrames do
                if Frame.Name == 'Color' then
                    Frame.Visible = false;
                    Library.OpenedFrames[Frame] = nil;
                end;
            end;

            PickerFrameOuter.Visible = true;
            Library.OpenedFrames[PickerFrameOuter] = true;
        end;

        function ColorPicker:Hide()
            PickerFrameOuter.Visible = false;
            Library.OpenedFrames[PickerFrameOuter] = nil;
        end;

        function ColorPicker:SetValue(HSV)
            local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3]);

            ColorPicker:SetHSVFromRGB(Color);
            ColorPicker:Display();
        end;

        function ColorPicker:SetValueRGB(Color)
            ColorPicker:SetHSVFromRGB(Color);
            ColorPicker:Display();
        end;

        SatVibMap.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                    local MinX = SatVibMap.AbsolutePosition.X;
                    local MaxX = MinX + SatVibMap.AbsoluteSize.X;
                    local MouseX = math.clamp(Mouse.X, MinX, MaxX);

                    local MinY = SatVibMap.AbsolutePosition.Y;
                    local MaxY = MinY + SatVibMap.AbsoluteSize.Y;
                    local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

                    ColorPicker.Sat = (MouseX - MinX) / (MaxX - MinX);
                    ColorPicker.Vib = 1 - ((MouseY - MinY) / (MaxY - MinY));
                    ColorPicker:Display();

                    RenderStepped:Wait();
                end;

                Library:AttemptSave();
            end;
        end);

        HueSelectorInner.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                    local MinY = HueSelectorInner.AbsolutePosition.Y;
                    local MaxY = MinY + HueSelectorInner.AbsoluteSize.Y;
                    local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

                    ColorPicker.Hue = ((MouseY - MinY) / (MaxY - MinY));
                    ColorPicker:Display();

                    RenderStepped:Wait();
                end;

                Library:AttemptSave();
            end;
        end);

        DisplayFrame.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                if PickerFrameOuter.Visible then
                    ColorPicker:Hide();
                else
                    ColorPicker:Show();
                end;
            end;
        end);

        Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = PickerFrameOuter.AbsolutePosition, PickerFrameOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
                    or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

                    ColorPicker:Hide();
                end;
            end;
        end))

        ColorPicker:Display();

        Options[Idx] = ColorPicker;

        return self;
    end;

    function Funcs:AddKeyPicker(Idx, Info)
        local ParentObj = self;
        local ToggleLabel = self.TextLabel;
        local Container = self.Container;

        local KeyPicker = {
            Value = Info.Default;
            Toggled = false;
            Mode = Info.Mode or 'Toggle'; -- Always, Toggle, Hold
            Type = 'KeyPicker';

            SyncToggleState = Info.SyncToggleState or false;
        };

        if KeyPicker.SyncToggleState then
            Info.Modes = { 'Toggle' }
            Info.Mode = 'Toggle'
        end

        local RelativeOffset = 0;

        for _, Element in next, Container:GetChildren() do
            if not Element:IsA('UIListLayout') then
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            end;
        end;

        local PickOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(0, 28, 0, 15);
            ZIndex = 6;
            Parent = ToggleLabel;
        });

        local PickInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 7;
            Parent = PickOuter;
        });

        Library:AddToRegistry(PickInner, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        local DisplayLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 1, 0);
            TextSize = 13;
            Text = Info.Default;
            TextWrapped = true;
            ZIndex = 8;
            Parent = PickInner;
        });

        local ModeSelectOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.new(1, 0, 0, RelativeOffset + 1);
            Size = UDim2.new(0, 60, 0, 45 + 2);
            Visible = false;
            ZIndex = 14;
            Parent = Container.Parent;
        });

        local ModeSelectInner = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 15;
            Parent = ModeSelectOuter;
        });

        Library:AddToRegistry(ModeSelectInner, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIListLayout', {
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = ModeSelectInner;
        });

        local ContainerLabel = Library:CreateLabel({
            TextXAlignment = Enum.TextXAlignment.Left;
            Size = UDim2.new(1, 0, 0, 18);
            TextSize = 13;
            Visible = false;
            ZIndex = 110;
            Parent = Library.KeybindContainer;
        },  true);

        local Modes = Info.Modes or { 'Always', 'Toggle', 'Hold' };
        local ModeButtons = {};

        for Idx, Mode in next, Modes do
            local ModeButton = {};

            local Label = Library:CreateLabel({
                Size = UDim2.new(1, 0, 0, 15);
                TextSize = 13;
                Text = Mode;
                ZIndex = 16;
                Parent = ModeSelectInner;
            });

            function ModeButton:Select()
                for _, Button in next, ModeButtons do
                    Button:Deselect();
                end;

                KeyPicker.Mode = Mode;

                Label.TextColor3 = Library.AccentColor;
                Library.RegistryMap[Label].Properties.TextColor3 = 'AccentColor';

                ModeSelectOuter.Visible = false;
            end;

            function ModeButton:Deselect()
                KeyPicker.Mode = nil;

                Label.TextColor3 = Library.FontColor;
                Library.RegistryMap[Label].Properties.TextColor3 = 'FontColor';
            end;

            Label.InputBegan:Connect(function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                    ModeButton:Select();
                    Library:AttemptSave();
                end;
            end);

            if Mode == KeyPicker.Mode then
                ModeButton:Select();
            end;

            ModeButtons[Mode] = ModeButton;
        end;

        function KeyPicker:Update()
            if Info.NoUI then
                return;
            end;

            local State = KeyPicker:GetState();

            ContainerLabel.Text = string.format('[%s] %s (%s)', KeyPicker.Value, Info.Text, KeyPicker.Mode);

            ContainerLabel.Visible = true;
            ContainerLabel.TextColor3 = State and Library.AccentColor or Library.FontColor;

            Library.RegistryMap[ContainerLabel].Properties.TextColor3 = State and 'AccentColor' or 'FontColor';

            local YSize = 0
            local XSize = 0
            
            for _, Label in next, Library.KeybindContainer:GetChildren() do
                if Label:IsA('TextLabel') and Label.Visible then
                    YSize = YSize + 18;
                    if (Label.TextBounds.X > XSize) then
                        XSize = Label.TextBounds.X 
                    end 
                end;
            end;

            Library.KeybindFrame.Size = UDim2.new(0, math.max(XSize + 10, 210), 0, YSize + 23)
        end;

        function KeyPicker:GetState()
            if KeyPicker.Mode == 'Always' then
                return true;
            elseif KeyPicker.Mode == 'Hold' then
                local Key = KeyPicker.Value;

                if Key == 'MB1' or Key == 'MB2' then
                    return Key == 'MB1' and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
                        or Key == 'MB2' and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2);
                else
                    return InputService:IsKeyDown(Enum.KeyCode[KeyPicker.Value]);
                end;
            else
                return KeyPicker.Toggled;
            end;
        end;

        function KeyPicker:SetValue(Data)
            local Key, Mode = Data[1], Data[2];
            DisplayLabel.Text = Key;
            KeyPicker.Value = Key;
            ModeButtons[Mode]:Select();
            KeyPicker:Update();
        end;

        function KeyPicker:OnClick(Callback)
            KeyPicker.Clicked = Callback
        end


        if ParentObj.Addons then
            table.insert(ParentObj.Addons, KeyPicker)
        end

        function KeyPicker:DoClick()
            if ParentObj.Type == 'Toggle' and KeyPicker.SyncToggleState then
                ParentObj:SetValue(not ParentObj.Value)
            end

            if KeyPicker.Clicked then
                KeyPicker.Clicked()
            end
        end

        local Picking = false;

        PickOuter.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                Picking = true;

                DisplayLabel.Text = '';

                local Break;
                local Text = '';

                task.spawn(function()
                    while (not Break) do
                        if Text == '...' then
                            Text = '';
                        end;

                        Text = Text .. '.';
                        DisplayLabel.Text = Text;

                        wait(0.4);
                    end;
                end);

                wait(0.2);

                local Event;
                Event = InputService.InputBegan:Connect(function(Input)
                    local Key;

                    if Input.UserInputType == Enum.UserInputType.Keyboard then
                        Key = Input.KeyCode.Name;
                    elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Key = 'MB1';
                    elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
                        Key = 'MB2';
                    end;

                    Break = true;
                    Picking = false;

                    DisplayLabel.Text = Key;
                    KeyPicker.Value = Key;

                    Library:AttemptSave();

                    Event:Disconnect();
                end);
            elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and not Library:MouseIsOverOpenedFrame() then
                ModeSelectOuter.Visible = true;
            end;
        end);

        Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
            if (not Picking) then
                if KeyPicker.Mode == 'Toggle' then
                    local Key = KeyPicker.Value;

                    if Key == 'MB1' or Key == 'MB2' then
                        if Key == 'MB1' and Input.UserInputType == Enum.UserInputType.MouseButton1
                        or Key == 'MB2' and Input.UserInputType == Enum.UserInputType.MouseButton2 then
                            KeyPicker.Toggled = not KeyPicker.Toggled
                            KeyPicker:DoClick()
                        end;
                    elseif Input.UserInputType == Enum.UserInputType.Keyboard then
                        if Input.KeyCode.Name == Key then
                            KeyPicker.Toggled = not KeyPicker.Toggled;
                            KeyPicker:DoClick()
                        end;
                    end;
                end;

                KeyPicker:Update();
            end;

            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = ModeSelectOuter.AbsolutePosition, ModeSelectOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
                    or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

                    ModeSelectOuter.Visible = false;
                end;
            end;
        end))

        Library:GiveSignal(InputService.InputEnded:Connect(function(Input)
            if (not Picking) then
                KeyPicker:Update();
            end;
        end))

        KeyPicker:Update();

        Options[Idx] = KeyPicker;

        return self;
    end;

    BaseAddons.__index = Funcs;
    BaseAddons.__namecall = function(Table, Key, ...)
        return Funcs[Key](...);
    end;
end;

local BaseGroupbox = {};

do
    local Funcs = {};

    function Funcs:AddBlank(Size)
        local Groupbox = self;
        local Container = Groupbox.Container;

        Library:Create('Frame', {
            BackgroundTransparency = 1;
            Size = UDim2.new(1, 0, 0, Size);
            ZIndex = 1;
            Parent = Container;
        });
    end;

    function Funcs:AddLabel(Text, DoesWrap,Pos)
        local Label = {};

        local Groupbox = self;
        local Container = Groupbox.Container;
        local TextLabel = Library:CreateLabel({
            Size = UDim2.new(1, -4, 0, 15);
            TextSize = 14;
            Text = Text;
            TextWrapped = DoesWrap or false,
            RichText = true,
            ZIndex = 5;
            Parent = Container;
        });
        if Pos == "Center" then
            TextLabel.TextXAlignment = Enum.TextXAlignment.Center
        elseif Pos == "Right" then
            TextLabel.TextXAlignment = Enum.TextXAlignment.Right
        else
            TextLabel.TextXAlignment = Enum.TextXAlignment.Left
        end

        if DoesWrap then
            local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
            TextLabel.Size = UDim2.new(1, -4, 0, Y)
        else
            Library:Create('UIListLayout', {
                Padding = UDim.new(0, 4);
                FillDirection = Enum.FillDirection.Horizontal;
                HorizontalAlignment = Enum.HorizontalAlignment.Right;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Parent = TextLabel;
            });
        end

        Label.TextLabel = TextLabel;
        Label.Container = Container;

        function Label:SetText(Text)
            TextLabel.Text = Text

            if DoesWrap then
                local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
                TextLabel.Size = UDim2.new(1, -4, 0, Y)
            end

            Groupbox:Resize();
        end

        if (not DoesWrap) then
            setmetatable(Label, BaseAddons);
        end

        Groupbox:AddBlank(5);
        Groupbox:Resize();

        return Label;
    end;

    function Funcs:AddButton(Text, Func)
        local Button = {};

        local Groupbox = self;
        local Container = Groupbox.Container;

        local ButtonOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(1, -4, 0, 20);
            ZIndex = 5;
            Parent = Container;
        });

        Library:AddToRegistry(ButtonOuter, {
            BorderColor3 = 'Black';
        });

        local ButtonInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = ButtonOuter;
        });

        Library:AddToRegistry(ButtonInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIGradient', {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotation = 90;
            Parent = ButtonInner;
        });

        local ButtonLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 1, 0);
            TextSize = 14;
            Text = Text;
            ZIndex = 6;
            Parent = ButtonInner;
        });

        Library:OnHighlight(ButtonOuter, ButtonOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Black' }
        );

        ButtonOuter.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                Func();
            end;
        end);

        function Button:AddTooltip(tip)
            if type(tip) == 'string' then
                Library:AddToolTip(tip, ButtonOuter)
            end
            return Button
        end

        function Button:AddButton(Text, Func)
            local SubButton = {}

            ButtonOuter.Size = UDim2.new(0.5, -2, 0, 20)
            
            local Outer = ButtonOuter:Clone()
            local Inner = Outer.Frame;
            local Label = Inner:FindFirstChildWhichIsA('TextLabel')

            Outer.Position = UDim2.new(1, 2, 0, 0)
            Outer.Size = UDim2.fromOffset(ButtonOuter.AbsoluteSize.X - 2, ButtonOuter.AbsoluteSize.Y)
            Outer.Parent = ButtonOuter

            Label.Text = Text;

            Library:AddToRegistry(Inner, {
                BackgroundColor3 = 'MainColor';
                BorderColor3 = 'OutlineColor';
            });
    
            Library:OnHighlight(Outer, Outer,
                { BorderColor3 = 'AccentColor' },
                { BorderColor3 = 'Black' }
            )

            Library:Create('UIGradient', {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
                });

                Rotation = 90;
                Parent = Inner;
            });

            Outer.InputBegan:Connect(function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                    Func();
                end;
            end);

            function SubButton:AddTooltip(tip)
                if type(tip) == 'string' then
                    Library:AddToolTip(tip, Outer)
                end
                return SubButton
            end

            return SubButton
        end 

        Groupbox:AddBlank(5);
        Groupbox:Resize();

        return Button;
    end;

    function Funcs:AddDivider()
        local Groupbox = self;
        local Container = self.Container

        local Divider = {
            Type = 'Divider',
        }

        Groupbox:AddBlank(2);
        local DividerOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(1, -4, 0, 5);
            ZIndex = 5;
            Parent = Container;
        });

        local DividerInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = DividerOuter;
        });

        Library:AddToRegistry(DividerOuter, {
            BorderColor3 = 'Black';
        });

        Library:AddToRegistry(DividerInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Groupbox:AddBlank(9);
        Groupbox:Resize();
    end

    function Funcs:AddInput(Idx, Info)
        local Textbox = {
            Value = Info.Default or '';
            Numeric = Info.Numeric or false;
            Finished = Info.Finished or false;
            Type = 'Input';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local InputLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 0, 15);
            TextSize = 14;
            Text = Info.Text;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZIndex = 5;
            Parent = Container;
        });

        Groupbox:AddBlank(1);

        local TextBoxOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(1, -4, 0, 20);
            ZIndex = 5;
            Parent = Container;
        });

        local TextBoxInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = TextBoxOuter;
        });

        Library:AddToRegistry(TextBoxInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:OnHighlight(TextBoxOuter, TextBoxOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Black' }
        );

        if type(Info.Tooltip) == 'string' then 
            Library:AddToolTip(Info.Tooltip, TextBoxOuter)
        end

        Library:Create('UIGradient', {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotation = 90;
            Parent = TextBoxInner;
        });

        local Container = Library:Create('Frame', {
            BackgroundTransparency = 1;
            ClipsDescendants = true;

            Position = UDim2.new(0, 5, 0, 0);
            Size = UDim2.new(1, -5, 1, 0);

            ZIndex = 7;
            Parent = TextBoxInner;
        })

        local Box = Library:Create('TextBox', {
            BackgroundTransparency = 1;

            Position = UDim2.fromOffset(0, 0),
            Size = UDim2.fromScale(5, 1),
            
            Font = Enum.Font.Code;
            PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
            PlaceholderText = Info.Placeholder or '';

            Text = Info.Default or '';
            TextColor3 = Library.FontColor;
            TextSize = 14;
            TextStrokeTransparency = 0;
            TextXAlignment = Enum.TextXAlignment.Left;

            ZIndex = 7;
            Parent = Container;
        });
        
        function Textbox:SetValue(Text)
            if Info.MaxLength and #Text > Info.MaxLength then
                Text = Text:sub(1, Info.MaxLength);
            end;

            if Textbox.Numeric then
                if (not tonumber(Text)) and Text:len() > 0 then
                    Text = Textbox.Value 
                end
            end

            Textbox.Value = Text;
            Box.Text = Text;
                
            if Textbox.Changed then
                Textbox.Changed();
            end;
        end;

        if Textbox.Finished then
            Box.FocusLost:Connect(function(enter)
                if not enter then return end
                
                Textbox:SetValue(Box.Text);
                Library:AttemptSave();
            end)
        else 
            Box:GetPropertyChangedSignal('Text'):Connect(function()
                Textbox:SetValue(Box.Text);
                Library:AttemptSave();
            end);
        end

        -- https://devforum.roblox.com/t/how-to-make-textboxes-follow-current-cursor-position/1368429/6
        -- thank you nicemike40 :)

        local function Update()
            local PADDING = 5
            local reveal = Container.AbsoluteSize.X

            if not Box:IsFocused() or Box.TextBounds.X <= reveal - 2 * PADDING then
                -- we aren't focused, or we fit so be normal
                Box.Position = UDim2.new(0, PADDING, 0, 0)
            else
                -- we are focused and don't fit, so adjust position
                local cursor = Box.CursorPosition
                if cursor ~= -1 then
                    -- calculate pixel width of text from start to cursor
                    local subtext = string.sub(Box.Text, 1, cursor-1)
                    local width = TextService:GetTextSize(subtext, Box.TextSize, Box.Font, Vector2.new(math.huge, math.huge)).X
                    
                    -- check if we're inside the box with the cursor
                    local currentCursorPos = Box.Position.X.Offset + width

                    -- adjust if necessary
                    if currentCursorPos < PADDING then
                        Box.Position = UDim2.fromOffset(PADDING-width, 0)
                    elseif currentCursorPos > reveal - PADDING - 1 then
                        Box.Position = UDim2.fromOffset(reveal-width-PADDING-1, 0)
                    end
                end
            end
        end 

        task.spawn(Update)

        Box:GetPropertyChangedSignal('Text'):Connect(Update)
        Box:GetPropertyChangedSignal('CursorPosition'):Connect(Update)
        Box.FocusLost:Connect(Update)
        Box.Focused:Connect(Update)

        Library:AddToRegistry(Box, {
            TextColor3 = 'FontColor';
        });

        function Textbox:OnChanged(Func)
            Textbox.Changed = Func;
            Func();
        end;

        Groupbox:AddBlank(5);
        Groupbox:Resize();

        Options[Idx] = Textbox;

        return Textbox;
    end;

    function Funcs:AddToggle(Idx, Info)
        local Toggle = {
            Value = Info.Default or false;
            Type = 'Toggle';

            Addons = {},
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local ToggleOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(0, 13, 0, 13);
            ZIndex = 5;
            Parent = Container;
        });

        Library:AddToRegistry(ToggleOuter, {
            BorderColor3 = 'Black';
        });

        local ToggleInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = ToggleOuter;
        });

        Library:AddToRegistry(ToggleInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local ToggleLabel = Library:CreateLabel({
            Size = UDim2.new(0, 216, 1, 0);
            Position = UDim2.new(1, 6, 0, 0);
            TextSize = 14;
            Text = Info.Text;
            TextXAlignment = Enum.TextXAlignment.Left;
            ZIndex = 6;
            Parent = ToggleInner;
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 4);
            FillDirection = Enum.FillDirection.Horizontal;
            HorizontalAlignment = Enum.HorizontalAlignment.Right;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = ToggleLabel;
        });

        local ToggleRegion = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Size = UDim2.new(0, 170, 1, 0);
            ZIndex = 8;
            Parent = ToggleOuter;
        });

        Library:OnHighlight(ToggleRegion, ToggleOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Black' }
        );

        function Toggle:UpdateColors()
            Toggle:Display();
        end;

        if type(Info.Tooltip) == 'string' then
            Library:AddToolTip(Info.Tooltip, ToggleRegion)
        end

        function Toggle:Display()
            ToggleInner.BackgroundColor3 = Toggle.Value and Library.AccentColor or Library.MainColor;
            ToggleInner.BorderColor3 = Toggle.Value and Library.AccentColorDark or Library.OutlineColor;

            Library.RegistryMap[ToggleInner].Properties.BackgroundColor3 = Toggle.Value and 'AccentColor' or 'MainColor';
            Library.RegistryMap[ToggleInner].Properties.BorderColor3 = Toggle.Value and 'AccentColorDark' or 'OutlineColor';
        end;

        function Toggle:OnChanged(Func)
            Toggle.Changed = Func;
            Func();
        end;

        function Toggle:SetValue(Bool)
            Bool = (not not Bool);

            Toggle.Value = Bool;
            Toggle:Display();

            for _, Addon in next, Toggle.Addons do
                if Addon.Type == 'KeyPicker' and Addon.SyncToggleState then
                    Addon.Toggled = Bool
                    Addon:Update()
                end
            end

            if Toggle.Changed then
                Toggle.Changed();
            end;
        end;

        ToggleRegion.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                Toggle:SetValue(not Toggle.Value) -- Why was it not like this from the start?
                Library:AttemptSave();
            end;
        end);

        Toggle:Display();
        Groupbox:AddBlank(Info.BlankSize or 5 + 2);
        Groupbox:Resize();

        Toggle.TextLabel = ToggleLabel;
        Toggle.Container = Container;
        setmetatable(Toggle, BaseAddons);

        Toggles[Idx] = Toggle;

        return Toggle;
    end;

    function Funcs:AddSlider(Idx, Info)
        assert(Info.Default and Info.Text and Info.Min and Info.Max and Info.Rounding, 'Bad Slider Data');

        local Slider = {
            Value = Info.Default;
            Min = Info.Min;
            Max = Info.Max;
            Rounding = Info.Rounding;
            MaxSize = 232;
            Type = 'Slider';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        if not Info.Compact then
            Library:CreateLabel({
                Size = UDim2.new(1, 0, 0, 10);
                TextSize = 14;
                Text = Info.Text;
                TextXAlignment = Enum.TextXAlignment.Left;
                TextYAlignment = Enum.TextYAlignment.Bottom;
                ZIndex = 5;
                Parent = Container;
            });

            Groupbox:AddBlank(3);
        end

        local SliderOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(1, -4, 0, 13);
            ZIndex = 5;
            Parent = Container;
        });

        Library:AddToRegistry(SliderOuter, {
            BorderColor3 = 'Black';
        });

        local SliderInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = SliderOuter;
        });

        Library:AddToRegistry(SliderInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local Fill = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderColor3 = Library.AccentColorDark;
            Size = UDim2.new(0, 0, 1, 0);
            ZIndex = 7;
            Parent = SliderInner;
        });

        Library:AddToRegistry(Fill, {
            BackgroundColor3 = 'AccentColor';
            BorderColor3 = 'AccentColorDark';
        });

        local HideBorderRight = Library:Create('Frame', {
            BackgroundColor3 = Library.AccentColor;
            BorderSizePixel = 0;
            Position = UDim2.new(1, 0, 0, 0);
            Size = UDim2.new(0, 1, 1, 0);
            ZIndex = 8;
            Parent = Fill;
        });

        Library:AddToRegistry(HideBorderRight, {
            BackgroundColor3 = 'AccentColor';
        });

        local DisplayLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 1, 0);
            TextSize = 14;
            Text = 'Infinite';
            ZIndex = 9;
            Parent = SliderInner;
        });

        Library:OnHighlight(SliderOuter, SliderOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Black' }
        );

        if type(Info.Tooltip) == 'string' then
            Library:AddToolTip(Info.Tooltip, SliderOuter)
        end

        function Slider:UpdateColors()
            Fill.BackgroundColor3 = Library.AccentColor;
            Fill.BorderColor3 = Library.AccentColorDark;
        end;

        function Slider:Display()
            local Suffix = Info.Suffix or '';
            DisplayLabel.Text = string.format('%s/%s', Slider.Value .. Suffix, Slider.Max .. Suffix);

            local X = math.ceil(Library:MapValue(Slider.Value, Slider.Min, Slider.Max, 0, Slider.MaxSize));
            Fill.Size = UDim2.new(0, X, 1, 0);

            HideBorderRight.Visible = not (X == Slider.MaxSize or X == 0);
        end;

        function Slider:OnChanged(Func)
            Slider.Changed = Func;
            Func();
        end;

        local function Round(Value)
            if Slider.Rounding == 0 then
                return math.floor(Value);
            end;

            local Str = Value .. '';
            local Dot = Str:find('%.');

            return Dot and tonumber(Str:sub(1, Dot + Slider.Rounding)) or Value;
        end;

        function Slider:GetValueFromXOffset(X)
            return Round(Library:MapValue(X, 0, Slider.MaxSize, Slider.Min, Slider.Max));
        end;

        function Slider:SetValue(Str)
            local Num = tonumber(Str);

            if (not Num) then
                return;
            end;

            Num = math.clamp(Num, Slider.Min, Slider.Max);

            Slider.Value = Num;
            Slider:Display();

            if Slider.Changed then
                Slider.Changed();
            end;
        end;

        SliderInner.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                local mPos = Mouse.X;
                local gPos = Fill.Size.X.Offset;
                local Diff = mPos - (Fill.AbsolutePosition.X + gPos);

                while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
                    local nMPos = Mouse.X;
                    local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, Slider.MaxSize);

                    local nValue = Slider:GetValueFromXOffset(nX);
                    local OldValue = Slider.Value;
                    Slider.Value = nValue;

                    Slider:Display();

                    if nValue ~= OldValue and Slider.Changed then
                        Slider.Changed();
                    end;

                    RenderStepped:Wait();
                end;

                Library:AttemptSave();
            end;
        end);

        Slider:Display();
        Groupbox:AddBlank(Info.BlankSize or 6);
        Groupbox:Resize();

        Options[Idx] = Slider;

        return Slider;
    end;

    function Funcs:AddDropdown(Idx, Info)
        assert(Info.Text and Info.Values, 'Bad Dropdown Data');

        local Dropdown = {
            Values = Info.Values;
            Value = Info.Multi and {};
            Multi = Info.Multi;
            Type = 'Dropdown';
        };

        local Groupbox = self;
        local Container = Groupbox.Container;

        local RelativeOffset = 0;

        local DropdownLabel = Library:CreateLabel({
            Size = UDim2.new(1, 0, 0, 10);
            TextSize = 14;
            Text = Info.Text;
            TextXAlignment = Enum.TextXAlignment.Left;
            TextYAlignment = Enum.TextYAlignment.Bottom;
            ZIndex = 5;
            Parent = Container;
        });

        Groupbox:AddBlank(3);

        for _, Element in next, Container:GetChildren() do
            if not Element:IsA('UIListLayout') then
                RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
            end;
        end;

        local DropdownOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Size = UDim2.new(1, -4, 0, 20);
            ZIndex = 5;
            Parent = Container;
        });

        Library:AddToRegistry(DropdownOuter, {
            BorderColor3 = 'Black';
        });

        local DropdownInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 6;
            Parent = DropdownOuter;
        });

        Library:AddToRegistry(DropdownInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        Library:Create('UIGradient', {
            Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
            });
            Rotation = 90;
            Parent = DropdownInner;
        });

        local DropdownArrow = Library:Create('ImageLabel', {
            AnchorPoint = Vector2.new(0, 0.5);
            BackgroundTransparency = 1;
            Position = UDim2.new(1, -16, 0.5, 0);
            Size = UDim2.new(0, 12, 0, 12);
            Image = 'http://www.roblox.com/asset/?id=6282522798';
            ZIndex = 7;
            Parent = DropdownInner;
        });

        local ItemList = Library:CreateLabel({
            Position = UDim2.new(0, 5, 0, 0);
            Size = UDim2.new(1, -5, 1, 0);
            TextSize = 14;
            Text = '--';
            TextXAlignment = Enum.TextXAlignment.Left;
            TextWrapped = true;
            ZIndex = 7;
            Parent = DropdownInner;
        });

        Library:OnHighlight(DropdownOuter, DropdownOuter,
            { BorderColor3 = 'AccentColor' },
            { BorderColor3 = 'Black' }
        );

        if type(Info.Tooltip) == 'string' then
            Library:AddToolTip(Info.Tooltip, DropdownOuter)
        end

        local MAX_DROPDOWN_ITEMS = 8;

        local ListOuter = Library:Create('Frame', {
            BorderColor3 = Color3.new(0, 0, 0);
            Position = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1 + 20);
            Size = UDim2.new(1, -8, 0, MAX_DROPDOWN_ITEMS * 20 + 2);
            ZIndex = 20;
            Visible = false;
            Parent = Container.Parent;
        });

        local ListInner = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderColor3 = Library.OutlineColor;
            BorderMode = Enum.BorderMode.Inset;
            BorderSizePixel = 0;
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 21;
            Parent = ListOuter;
        });

        Library:AddToRegistry(ListInner, {
            BackgroundColor3 = 'MainColor';
            BorderColor3 = 'OutlineColor';
        });

        local Scrolling = Library:Create('ScrollingFrame', {
            BackgroundTransparency = 1;
            CanvasSize = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(1, 0, 1, 0);
            ZIndex = 21;
            Parent = ListInner;

            TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
            BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',

            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Library.AccentColor, 
        });

        Library:AddToRegistry(Scrolling, {
            ScrollBarImageColor3 = 'AccentColor'
        })

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 0);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = Scrolling;
        });

        function Dropdown:Display()
            local Values = Dropdown.Values;
            local Str = '';

            if Info.Multi then
                for Idx, Value in next, Values do
                    if Dropdown.Value[Value] then
                        Str = Str .. Value .. ', ';
                    end;
                end;

                Str = Str:sub(1, #Str - 2);
            else
                Str = Dropdown.Value or '';
            end;

            ItemList.Text = (Str == '' and '--' or Str);
        end;

        function Dropdown:GetActiveValues()
            if Info.Multi then
                local T = {};

                for Value, Bool in next, Dropdown.Value do
                    table.insert(T, Value);
                end;

                return T;
            else
                return Dropdown.Value and 1 or 0;
            end;
        end;

        function Dropdown:SetValues()
            local Values = Dropdown.Values;
            local Buttons = {};

            for _, Element in next, Scrolling:GetChildren() do
                if not Element:IsA('UIListLayout') then
                    -- Library:RemoveFromRegistry(Element);
                    Element:Destroy();
                end;
            end;

            local Count = 0;

            for Idx, Value in next, Values do
                local Table = {};

                Count = Count + 1;

                local Button = Library:Create('Frame', {
                    BackgroundColor3 = Library.MainColor;
                    BorderColor3 = Library.OutlineColor;
                    BorderMode = Enum.BorderMode.Middle;
                    Size = UDim2.new(1, -1, 0, 20);
                    ZIndex = 23;
                    Active = true,
                    Parent = Scrolling;
                });

                Library:AddToRegistry(Button, {
                    BackgroundColor3 = 'MainColor';
                    BorderColor3 = 'OutlineColor';
                });

                local ButtonLabel = Library:CreateLabel({
                    Size = UDim2.new(1, -6, 1, 0);
                    Position = UDim2.new(0, 6, 0, 0);
                    TextSize = 14;
                    Text = Value;
                    TextXAlignment = Enum.TextXAlignment.Left;
                    ZIndex = 25;
                    Parent = Button;
                });

                Library:OnHighlight(Button, Button,
                    { BorderColor3 = 'AccentColor', ZIndex = 24 },
                    { BorderColor3 = 'OutlineColor', ZIndex = 23 }
                );

                local Selected;

                if Info.Multi then
                    Selected = Dropdown.Value[Value];
                else
                    Selected = Dropdown.Value == Value;
                end;

                function Table:UpdateButton()
                    if Info.Multi then
                        Selected = Dropdown.Value[Value];
                    else
                        Selected = Dropdown.Value == Value;
                    end;

                    ButtonLabel.TextColor3 = Selected and Library.AccentColor or Library.FontColor;
                    Library.RegistryMap[ButtonLabel].Properties.TextColor3 = Selected and 'AccentColor' or 'FontColor';
                end;

                ButtonLabel.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local Try = not Selected;

                        if Dropdown:GetActiveValues() == 1 and (not Try) and (not Info.AllowNull) then
                        else
                            if Info.Multi then
                                Selected = Try;

                                if Selected then
                                    Dropdown.Value[Value] = true;
                                else
                                    Dropdown.Value[Value] = nil;
                                end;
                            else
                                Selected = Try;

                                if Selected then
                                    Dropdown.Value = Value;
                                else
                                    Dropdown.Value = nil;
                                end;

                                for _, OtherButton in next, Buttons do
                                    OtherButton:UpdateButton();
                                end;
                            end;

                            Table:UpdateButton();
                            Dropdown:Display();

                            if Dropdown.Changed then
                                Dropdown.Changed();
                            end;

                            Library:AttemptSave();
                        end;
                    end;
                end);

                Table:UpdateButton();
                Dropdown:Display();

                Buttons[Button] = Table;
            end;

            local Y = math.clamp(Count * 20, 0, MAX_DROPDOWN_ITEMS * 20) + 1;
            ListOuter.Size = UDim2.new(1, -8, 0, Y);
            Scrolling.CanvasSize = UDim2.new(0, 0, 0, (Count * 20) + 1);

            -- ListOuter.Size = UDim2.new(1, -8, 0, (#Values * 20) + 2);
        end;

        function Dropdown:OpenDropdown()
            ListOuter.Visible = true;
            Library.OpenedFrames[ListOuter] = true;
            DropdownArrow.Rotation = 180;
        end;

        function Dropdown:CloseDropdown()
            ListOuter.Visible = false;
            Library.OpenedFrames[ListOuter] = nil;
            DropdownArrow.Rotation = 0;
        end;

        function Dropdown:OnChanged(Func)
            Dropdown.Changed = Func;
            Func();
        end;

        function Dropdown:SetValue(Val)
            if Dropdown.Multi then
                local nTable = {};

                for Value, Bool in next, Val do
                    if table.find(Dropdown.Values, Value) then
                        nTable[Value] = true
                    end;
                end;

                Dropdown.Value = nTable;
            else
                if (not Val) then
                    Dropdown.Value = nil;
                elseif table.find(Dropdown.Values, Val) then
                    Dropdown.Value = Val;
                end;
            end;

            Dropdown:SetValues();
            Dropdown:Display();
            
            if Dropdown.Changed then Dropdown.Changed() end
        end;

        DropdownOuter.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                if ListOuter.Visible then
                    Dropdown:CloseDropdown();
                else
                    Dropdown:OpenDropdown();
                end;
            end;
        end);

        InputService.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                local AbsPos, AbsSize = ListOuter.AbsolutePosition, ListOuter.AbsoluteSize;

                if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
                    or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

                    Dropdown:CloseDropdown();
                end;
            end;
        end);

        Dropdown:SetValues();
        Dropdown:Display();

        if type(Info.Default) == 'string' then
            Info.Default = table.find(Dropdown.Values, Info.Default)
        end

        if Info.Default then
            if Info.Multi then
                Dropdown.Value[Dropdown.Values[Info.Default]] = true;
            else
                Dropdown.Value = Dropdown.Values[Info.Default];
            end;

            Dropdown:SetValues();
            Dropdown:Display();
        end;

        Groupbox:AddBlank(Info.BlankSize or 5);
        Groupbox:Resize();

        Options[Idx] = Dropdown;

        return Dropdown;
    end;

    BaseGroupbox.__index = Funcs;
    BaseGroupbox.__namecall = function(Table, Key, ...)
        return Funcs[Key](...);
    end;
end;

-- < Create other UI elements >
do
    Library.NotificationArea = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Position = UDim2.new(0, 0, 0, 40);
        Size = UDim2.new(0, 300, 0, 200);
        ZIndex = 100;
        Parent = ScreenGui;
    });

    Library:Create('UIListLayout', {
        Padding = UDim.new(0, 4);
        FillDirection = Enum.FillDirection.Vertical;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = Library.NotificationArea;
    });

    local WatermarkOuter = Library:Create('Frame', {
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 255, 0, -28);
        Size = UDim2.new(0, 213, 0, 20);
        ZIndex = 200;
        Visible = false;
        Parent = ScreenGui;
    });

    local WatermarkInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.AccentColor;
        BorderMode = Enum.BorderMode.Inset;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 201;
        Parent = WatermarkOuter;
    });

    Library:AddToRegistry(WatermarkInner, {
        BorderColor3 = 'AccentColor';
    });

    local InnerFrame = Library:Create('Frame', {
        BackgroundColor3 = Color3.new(1, 1, 1);
        BorderSizePixel = 0;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 202;
        Parent = WatermarkInner;
    });

    local Gradient = Library:Create('UIGradient', {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
            ColorSequenceKeypoint.new(1, Library.MainColor),
        });
        Rotation = -90;
        Parent = InnerFrame;
    });

    Library:AddToRegistry(Gradient, {
        Color = function()
            return ColorSequence.new({
                ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
                ColorSequenceKeypoint.new(1, Library.MainColor),
            });
        end
    });

    local WatermarkLabel = Library:CreateLabel({
        Position = UDim2.new(0, 5, 0, 0);
        Size = UDim2.new(1, -4, 1, 0);
        TextSize = 14;
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = 203;
        Parent = InnerFrame;
    });

    Library.Watermark = WatermarkOuter;
    Library.WatermarkText = WatermarkLabel;
    Library:MakeDraggable(Library.Watermark);



    local KeybindOuter = Library:Create('Frame', {
        AnchorPoint = Vector2.new(0, 0.5);
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 10, 0.5, 0);
        Size = UDim2.new(0, 210, 0, 20);
        Visible = false;
        ZIndex = 100;
        Parent = ScreenGui;
    });

    local KeybindInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        BorderMode = Enum.BorderMode.Inset;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 101;
        Parent = KeybindOuter;
    });

    Library:AddToRegistry(KeybindInner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    }, true);

    local ColorFrame = Library:Create('Frame', {
        BackgroundColor3 = Library.AccentColor;
        BorderSizePixel = 0;
        Size = UDim2.new(1, 0, 0, 2);
        ZIndex = 102;
        Parent = KeybindInner;
    });

    Library:AddToRegistry(ColorFrame, {
        BackgroundColor3 = 'AccentColor';
    }, true);

    local KeybindLabel = Library:CreateLabel({
        Size = UDim2.new(1, 0, 0, 20);
        Position = UDim2.fromOffset(5, 2),
        TextXAlignment = Enum.TextXAlignment.Left,
        
        Text = 'Keybinds';
        ZIndex = 104;
        Parent = KeybindInner;
    });

    local KeybindContainer = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Size = UDim2.new(1, 0, 1, -20);
        Position = UDim2.new(0, 0, 0, 20);
        ZIndex = 1;
        Parent = KeybindInner;
    });

    Library:Create('UIListLayout', {
        FillDirection = Enum.FillDirection.Vertical;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = KeybindContainer;
    });

    Library:Create('UIPadding', {
        PaddingLeft = UDim.new(0, 5),
        Parent = KeybindContainer,
    })

    Library.KeybindFrame = KeybindOuter;
    Library.KeybindContainer = KeybindContainer;
    Library:MakeDraggable(KeybindOuter);
end;

function Library:SetWatermarkVisibility(Bool)
    Library.Watermark.Visible = Bool;
end;

function Library:SetWatermark(Text)
    local X, Y = Library:GetTextBounds(Text, Enum.Font.Code, 14);
    Library.Watermark.Size = UDim2.new(0, X + 15, 0, (Y * 1.5) + 3);
    Library:SetWatermarkVisibility(true)

    Library.WatermarkText.Text = Text;
end;

function Library:Notify(Text, Time)
    local XSize, YSize = Library:GetTextBounds(Text, Enum.Font.Code, 14);

    YSize = YSize + 7

    local NotifyOuter = Library:Create('Frame', {
        BorderColor3 = Color3.new(0, 0, 0);
        Position = UDim2.new(0, 100, 0, 10);
        Size = UDim2.new(0, 0, 0, YSize);
        ClipsDescendants = true;
        ZIndex = 100;
        Parent = Library.NotificationArea;
    });

    local NotifyInner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        BorderMode = Enum.BorderMode.Inset;
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 101;
        Parent = NotifyOuter;
    });

    Library:AddToRegistry(NotifyInner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    }, true);

    local InnerFrame = Library:Create('Frame', {
        BackgroundColor3 = Color3.new(1, 1, 1);
        BorderSizePixel = 0;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 102;
        Parent = NotifyInner;
    });

    local Gradient = Library:Create('UIGradient', {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
            ColorSequenceKeypoint.new(1, Library.MainColor),
        });
        Rotation = -90;
        Parent = InnerFrame;
    });

    Library:AddToRegistry(Gradient, {
        Color = function()
            return ColorSequence.new({
                ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
                ColorSequenceKeypoint.new(1, Library.MainColor),
            });
        end
    });

    local NotifyLabel = Library:CreateLabel({
        Position = UDim2.new(0, 4, 0, 0);
        Size = UDim2.new(1, -4, 1, 0);
        Text = Text;
        TextXAlignment = Enum.TextXAlignment.Left;
        TextSize = 14;
        ZIndex = 103;
        Parent = InnerFrame;
    });

    local LeftColor = Library:Create('Frame', {
        BackgroundColor3 = Library.AccentColor;
        BorderSizePixel = 0;
        Position = UDim2.new(0, -1, 0, -1);
        Size = UDim2.new(0, 3, 1, 2);
        ZIndex = 104;
        Parent = NotifyOuter;
    });

    Library:AddToRegistry(LeftColor, {
        BackgroundColor3 = 'AccentColor';
    }, true);

    pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, XSize + 8 + 4, 0, YSize), 'Out', 'Quad', 0.4, true);

    task.spawn(function()
        wait(Time or 5);

        pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, 0, 0, YSize), 'Out', 'Quad', 0.4, true);

        wait(0.4);

        NotifyOuter:Destroy();
    end);
end;

function Library:CreateWindow(...)
    local Arguments = { ... }
    local Config = { AnchorPoint = Vector2.zero }

    if type(...) == 'table' then
        Config = ...;
    else
        Config.Title = Arguments[1]
        Config.AutoShow = Arguments[2] or false;
    end
    
    if type(Config.Title) ~= 'string' then Config.Title = 'No title' end
    
    if typeof(Config.Position) ~= 'UDim2' then Config.Position = UDim2.fromOffset(175, 50) end
    if typeof(Config.Size) ~= 'UDim2' then Config.Size = UDim2.fromOffset(550, 600) end

    if Config.Center then
        Config.AnchorPoint = Vector2.new(0.5, 0.5)
        Config.Position = UDim2.fromScale(0.5, 0.5)
    end

    local Window = {
        Tabs = {};
    };

    local Outer = Library:Create('Frame', {
        AnchorPoint = Config.AnchorPoint,
        BackgroundColor3 = Color3.new(0, 0, 0);
        BorderSizePixel = 0;
        Position = Config.Position,
        Size = Config.Size,
        Visible = false;
        ZIndex = 1;
        Parent = ScreenGui;
    });

    Library:MakeDraggable(Outer, 25);

    local Inner = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.AccentColor;
        BorderMode = Enum.BorderMode.Inset;
        Position = UDim2.new(0, 1, 0, 1);
        Size = UDim2.new(1, -2, 1, -2);
        ZIndex = 1;
        Parent = Outer;
    });

    Library:AddToRegistry(Inner, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'AccentColor';
    });

    local WindowLabel = Library:CreateLabel({
        Position = UDim2.new(0, 7, 0, 0);
        Size = UDim2.new(0, 0, 0, 25);
        Text = Config.Title or '';
        TextXAlignment = Enum.TextXAlignment.Left;
        ZIndex = 1;
        Parent = Inner;
    });

    local MainSectionOuter = Library:Create('Frame', {
        BackgroundColor3 = Library.BackgroundColor;
        BorderColor3 = Library.OutlineColor;
        Position = UDim2.new(0, 8, 0, 25);
        Size = UDim2.new(1, -16, 1, -33);
        ZIndex = 1;
        Parent = Inner;
    });

    Library:AddToRegistry(MainSectionOuter, {
        BackgroundColor3 = 'BackgroundColor';
        BorderColor3 = 'OutlineColor';
    });

    local MainSectionInner = Library:Create('Frame', {
        BackgroundColor3 = Library.BackgroundColor;
        BorderColor3 = Color3.new(0, 0, 0);
        BorderMode = Enum.BorderMode.Inset;
        Position = UDim2.new(0, 0, 0, 0);
        Size = UDim2.new(1, 0, 1, 0);
        ZIndex = 1;
        Parent = MainSectionOuter;
    });

    Library:AddToRegistry(MainSectionInner, {
        BackgroundColor3 = 'BackgroundColor';
    });

    local TabArea = Library:Create('Frame', {
        BackgroundTransparency = 1;
        Position = UDim2.new(0, 8, 0, 8);
        Size = UDim2.new(1, -16, 0, 21);
        ZIndex = 1;
        Parent = MainSectionInner;
    });

    Library:Create('UIListLayout', {
        Padding = UDim.new(0, 0);
        FillDirection = Enum.FillDirection.Horizontal;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Parent = TabArea;
    });

    local TabContainer = Library:Create('Frame', {
        BackgroundColor3 = Library.MainColor;
        BorderColor3 = Library.OutlineColor;
        Position = UDim2.new(0, 8, 0, 30);
        Size = UDim2.new(1, -16, 1, -38);
        ZIndex = 2;
        Parent = MainSectionInner;
    });

    Library:AddToRegistry(TabContainer, {
        BackgroundColor3 = 'MainColor';
        BorderColor3 = 'OutlineColor';
    });

    function Window:SetWindowTitle(Title)
        WindowLabel.Text = Title;
    end;

    function Window:AddTab(Name)
        local Tab = {
            Groupboxes = {};
            Tabboxes = {};
        };

        local TabButtonWidth = Library:GetTextBounds(Name, Enum.Font.Code, 16);

        local TabButton = Library:Create('Frame', {
            BackgroundColor3 = Library.BackgroundColor;
            BorderColor3 = Library.OutlineColor;
            Size = UDim2.new(0, TabButtonWidth + 8 + 4, 1, 0);
            ZIndex = 1;
            Parent = TabArea;
        });

        Library:AddToRegistry(TabButton, {
            BackgroundColor3 = 'BackgroundColor';
            BorderColor3 = 'OutlineColor';
        });

        local TabButtonLabel = Library:CreateLabel({
            Position = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(1, 0, 1, -1);
            Text = Name;
            ZIndex = 1;
            Parent = TabButton;
        });

        local Blocker = Library:Create('Frame', {
            BackgroundColor3 = Library.MainColor;
            BorderSizePixel = 0;
            Position = UDim2.new(0, 0, 1, 0);
            Size = UDim2.new(1, 0, 0, 1);
            BackgroundTransparency = 1;
            ZIndex = 3;
            Parent = TabButton;
        });

        Library:AddToRegistry(Blocker, {
            BackgroundColor3 = 'MainColor';
        });

        local TabFrame = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(1, 0, 1, 0);
            Visible = false;
            ZIndex = 2;
            Parent = TabContainer;
        });

        local LeftSide = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0, 8, 0, 8);
            Size = UDim2.new(0.5, -12, 0, 507);
            ZIndex = 2;
            Parent = TabFrame;
        });

        local RightSide = Library:Create('Frame', {
            BackgroundTransparency = 1;
            Position = UDim2.new(0.5, 4, 0, 8);
            Size = UDim2.new(0.5, -12, 0, 507);
            ZIndex = 2;
            Parent = TabFrame;
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 8);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = LeftSide;
        });

        Library:Create('UIListLayout', {
            Padding = UDim.new(0, 8);
            FillDirection = Enum.FillDirection.Vertical;
            SortOrder = Enum.SortOrder.LayoutOrder;
            Parent = RightSide;
        });

        function Tab:ShowTab()
            for _, Tab in next, Window.Tabs do
                Tab:HideTab();
            end;

            Blocker.BackgroundTransparency = 0;
            TabButton.BackgroundColor3 = Library.MainColor;
            Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'MainColor';
            TabFrame.Visible = true;
        end;

        function Tab:HideTab()
            Blocker.BackgroundTransparency = 1;
            TabButton.BackgroundColor3 = Library.BackgroundColor;
            Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'BackgroundColor';
            TabFrame.Visible = false;
        end;

        function Tab:AddGroupbox(Info)
            local Groupbox = {};

            local BoxOuter = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Library.OutlineColor;
                Size = UDim2.new(1, 0, 0, 507);
                ZIndex = 2;
                Parent = Info.Side == 1 and LeftSide or RightSide;
            });

            Library:AddToRegistry(BoxOuter, {
                BackgroundColor3 = 'BackgroundColor';
                BorderColor3 = 'OutlineColor';
            });

            local BoxInner = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Color3.new(0, 0, 0);
                BorderMode = Enum.BorderMode.Inset;
                Size = UDim2.new(1, 0, 1, 0);
                ZIndex = 4;
                Parent = BoxOuter;
            });

            Library:AddToRegistry(BoxInner, {
                BackgroundColor3 = 'BackgroundColor';
            });

            local Highlight = Library:Create('Frame', {
                BackgroundColor3 = Library.AccentColor;
                BorderSizePixel = 0;
                Size = UDim2.new(1, 0, 0, 2);
                ZIndex = 5;
                Parent = BoxInner;
            });

            Library:AddToRegistry(Highlight, {
                BackgroundColor3 = 'AccentColor';
            });

            local GroupboxLabel = Library:CreateLabel({
                Size = UDim2.new(1, 0, 0, 18);
                Position = UDim2.new(0, 4, 0, 2);
                TextSize = 14;
                Text = Info.Name;
                TextXAlignment = Enum.TextXAlignment.Center;
                ZIndex = 5;
                Parent = BoxInner;
            });

            local Container = Library:Create('Frame', {
                BackgroundTransparency = 1;
                Position = UDim2.new(0, 4, 0, 20);
                Size = UDim2.new(1, -4, 1, -20);
                ZIndex = 1;
                Parent = BoxInner;
            });

            Library:Create('UIListLayout', {
                FillDirection = Enum.FillDirection.Vertical;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Parent = Container;
            });

            function Groupbox:Resize()
                local Size = 0;

                for _, Element in next, Groupbox.Container:GetChildren() do
                    if not Element:IsA('UIListLayout') then
                        Size = Size + Element.Size.Y.Offset;
                    end;
                end;

                BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
            end;

            Groupbox.Container = Container;
            setmetatable(Groupbox, BaseGroupbox);

            Groupbox:AddBlank(3);
            Groupbox:Resize();

            Tab.Groupboxes[Info.Name] = Groupbox;

            return Groupbox;
        end;

        function Tab:AddLeftGroupbox(Name)
            return Tab:AddGroupbox({ Side = 1; Name = Name; });
        end;

        function Tab:AddRightGroupbox(Name)
            return Tab:AddGroupbox({ Side = 2; Name = Name; });
        end;

        function Tab:AddTabbox(Info)
            local Tabbox = {
                Tabs = {};
            };

            local BoxOuter = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Library.OutlineColor;
                Size = UDim2.new(1, 0, 0, 0);
                ZIndex = 2;
                Parent = Info.Side == 1 and LeftSide or RightSide;
            });

            Library:AddToRegistry(BoxOuter, {
                BackgroundColor3 = 'BackgroundColor';
                BorderColor3 = 'OutlineColor';
            });

            local BoxInner = Library:Create('Frame', {
                BackgroundColor3 = Library.BackgroundColor;
                BorderColor3 = Color3.new(0, 0, 0);
                BorderMode = Enum.BorderMode.Inset;
                Size = UDim2.new(1, 0, 1, 0);
                ZIndex = 4;
                Parent = BoxOuter;
            });

            Library:AddToRegistry(BoxInner, {
                BackgroundColor3 = 'BackgroundColor';
            });

            local Highlight = Library:Create('Frame', {
                BackgroundColor3 = Library.AccentColor;
                BorderSizePixel = 0;
                Size = UDim2.new(1, 0, 0, 2);
                ZIndex = 10;
                Parent = BoxInner;
            });

            Library:AddToRegistry(Highlight, {
                BackgroundColor3 = 'AccentColor';
            });

            local TabboxButtons = Library:Create('Frame', {
                BackgroundTransparency = 1;
                Position = UDim2.new(0, 0, 0, 1);
                Size = UDim2.new(1, 0, 0, 18);
                ZIndex = 5;
                Parent = BoxInner;
            });

            Library:Create('UIListLayout', {
                FillDirection = Enum.FillDirection.Horizontal;
                HorizontalAlignment = Enum.HorizontalAlignment.Left;
                SortOrder = Enum.SortOrder.LayoutOrder;
                Parent = TabboxButtons;
            });

            function Tabbox:AddTab(Name)
                local Tab = {};

                local Button = Library:Create('Frame', {
                    BackgroundColor3 = Library.MainColor;
                    BorderColor3 = Color3.new(0, 0, 0);
                    Size = UDim2.new(0.5, 0, 1, 0);
                    ZIndex = 6;
                    Parent = TabboxButtons;
                });

                Library:AddToRegistry(Button, {
                    BackgroundColor3 = 'MainColor';
                });

                local ButtonLabel = Library:CreateLabel({
                    Size = UDim2.new(1, 0, 1, 0);
                    TextSize = 14;
                    Text = Name;
                    TextXAlignment = Enum.TextXAlignment.Center;
                    ZIndex = 7;
                    Parent = Button;
                });

                local Block = Library:Create('Frame', {
                    BackgroundColor3 = Library.BackgroundColor;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 1, 0);
                    Size = UDim2.new(1, 0, 0, 1);
                    Visible = false;
                    ZIndex = 9;
                    Parent = Button;
                });

                Library:AddToRegistry(Block, {
                    BackgroundColor3 = 'BackgroundColor';
                });

                local Container = Library:Create('Frame', {
                    Position = UDim2.new(0, 4, 0, 20);
                    Size = UDim2.new(1, -4, 1, -20);
                    ZIndex = 1;
                    Visible = false;
                    Parent = BoxInner;
                });

                Library:Create('UIListLayout', {
                    FillDirection = Enum.FillDirection.Vertical;
                    SortOrder = Enum.SortOrder.LayoutOrder;
                    Parent = Container;
                });

                function Tab:Show()
                    for _, Tab in next, Tabbox.Tabs do
                        Tab:Hide();
                    end;

                    Container.Visible = true;
                    Block.Visible = true;

                    Button.BackgroundColor3 = Library.BackgroundColor;
                    Library.RegistryMap[Button].Properties.BackgroundColor3 = 'BackgroundColor';
                end;

                function Tab:Hide()
                    Container.Visible = false;
                    Block.Visible = false;

                    Button.BackgroundColor3 = Library.MainColor;
                    Library.RegistryMap[Button].Properties.BackgroundColor3 = 'MainColor';
                end;

                function Tab:Resize()
                    local TabCount = 0;

                    for _, Tab in next, Tabbox.Tabs do
                        TabCount = TabCount +  1;
                    end;

                    for _, Button in next, TabboxButtons:GetChildren() do
                        if not Button:IsA('UIListLayout') then
                            Button.Size = UDim2.new(1 / TabCount, 0, 1, 0);
                        end;
                    end;

                    local Size = 0;

                    for _, Element in next, Tab.Container:GetChildren() do
                        if not Element:IsA('UIListLayout') then
                            Size = Size + Element.Size.Y.Offset;
                        end;
                    end;

                    if BoxOuter.Size.Y.Offset < 20 + Size + 2 then
                        BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
                    end;
                end;

                Button.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
                        Tab:Show();
                    end;
                end);

                Tab.Container = Container;
                Tabbox.Tabs[Name] = Tab;

                setmetatable(Tab, BaseGroupbox);

                Tab:AddBlank(3);
                Tab:Resize();

                if #TabboxButtons:GetChildren() == 2 then
                    Tab:Show();
                end;

                return Tab;
            end;

            Tab.Tabboxes[Info.Name or ''] = Tabbox;

            return Tabbox;
        end;

        function Tab:AddLeftTabbox(Name)
            return Tab:AddTabbox({ Name = Name, Side = 1; });
        end;

        function Tab:AddRightTabbox(Name)
            return Tab:AddTabbox({ Name = Name, Side = 2; });
        end;

        TabButton.InputBegan:Connect(function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                Tab:ShowTab();
            end;
        end);

        -- This was the first tab added, so we show it by default.
        if #TabContainer:GetChildren() == 1 then
            Tab:ShowTab();
        end;

        Window.Tabs[Name] = Tab;
        return Tab;
    end;

    local ModalElement = Library:Create('TextButton', {
        BackgroundTransparency = 1;
        Size = UDim2.new(0, 0, 0, 0);
        Visible = true;
        Text = '';
        Modal = false;
        Parent = ScreenGui;
    });

    function Library.Toggle()
        Outer.Visible = not Outer.Visible;
        ModalElement.Modal = Outer.Visible;

        local oIcon = Mouse.Icon;
        local State = InputService.MouseIconEnabled;

        local Cursor = Drawing.new('Triangle');
        Cursor.Thickness = 1;
        Cursor.Filled = true;

        while Outer.Visible do
            local mPos = workspace.CurrentCamera:WorldToViewportPoint(Mouse.Hit.p);

            Cursor.Color = Library.AccentColor;
            Cursor.PointA = Vector2.new(mPos.X, mPos.Y);
            Cursor.PointB = Vector2.new(mPos.X, mPos.Y) + Vector2.new(6, 14);
            Cursor.PointC = Vector2.new(mPos.X, mPos.Y) + Vector2.new(-6, 14);

            Cursor.Visible = not InputService.MouseIconEnabled;

            RenderStepped:Wait();
        end;

        Cursor:Remove();
    end

    Library:GiveSignal(InputService.InputBegan:Connect(function(Input, Processed)
        if type(Library.ToggleKeybind) == 'table' and Library.ToggleKeybind.Type == 'KeyPicker' then
            if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode.Name == Library.ToggleKeybind.Value then
                task.spawn(Library.Toggle)
            end
        elseif Input.KeyCode == Enum.KeyCode.RightControl or (Input.KeyCode == Enum.KeyCode.RightShift and (not Processed)) then
            task.spawn(Library.Toggle)
        end
        if type(Library.ComboBind) == 'table' and Library.ComboBind.Type == 'KeyPicker' then
            if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode.Name == Library.ComboBind.Value then
                if getgenv().SettingSave["autocombotoggle"] then
                    if isfile("Deity Hub Next Generation/ComboFile/" .. getgenv().SettingSave["Locationfilecombo"]) then
                        local filecombo = readfile("Deity Hub Next Generation/ComboFile/" .. getgenv().SettingSave["Locationfilecombo"])
                        if string.find(filecombo,"Type Your Combo Here <- Delete Me") then
                            
                        else
                            local comboset = filecombo:split("\n")
                            for i=1,#comboset do
                                pcall(function()
                                    if comboset[i]:split(" : ")[1] == "Wait" or comboset[i]:split(" : ")[1] == "wait" then
                                        wait(comboset[i]:split(" : ")[2])
                                    elseif comboset[i]:split(" : ")[1] == "Soru" then
                                        local args = {
                                            [1] = "Soru",
                                            [2] = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(-0, 0, -0),
                                            [3] = game.Players[PlayerSelected].Character.HumanoidRootPart.CFrame * CFrame.Angles(-0, 0, -0)
                                        }
                                        game:GetService("ReplicatedStorage").Remotes.CommE:FireServer(unpack(args))
                                        wait()
                                    elseif comboset[i]:split(" : ")[1] == "Click" or comboset[i]:split(" : ")[1] == "click" then
                                        game:GetService'VirtualUser':CaptureController()
                                        game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                        wait()
                                    elseif #comboset[i]:split(" : ")[1] > 0 then
                                        if game.Players.LocalPlayer.Character:FindFirstChild(comboset[i]:split(" ")[1]) then
                                            Keyboard(comboset[i]:split(" : ")[2],comboset[i]:split(" : ")[3])
                                        else
                                            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild(comboset[i]:split(" : ")[1]))
                                            repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild(comboset[i]:split(" : ")[1])
                                            Keyboard(comboset[i]:split(" : ")[2],comboset[i]:split(" : ")[3])
                                        end
                                    end
                                end)
                            end
                        end
                    else
                        if not isfolder("Deity Hub Next Generation") then
                            makefolder("Deity Hub Next Generation")
                        end
                        if not isfolder("Deity Hub Next Generation/ComboFile") then
                            makefolder("Deity Hub Next Generation/ComboFile")
                        end
                        writefile("Deity Hub Next Generation/ComboFile/" .. getgenv().SettingSave["Locationfilecombo"], "Type Your Combo Here <- Delete Me")
                    end
                end
            end
        elseif Input.KeyCode == Enum.KeyCode.RightControl or (Input.KeyCode == Enum.KeyCode.RightShift and (not Processed)) then
            -- print("aaaaaaaaa")
        end
    end))

    if Config.AutoShow then task.spawn(Library.Toggle) end

    Window.Holder = Outer;

    return Window;
end;

local httpService = game:GetService('HttpService')
local ThemeManager = {} do
	ThemeManager.Folder = 'LinoriaLibSettings'
	-- if not isfolder(ThemeManager.Folder) then makefolder(ThemeManager.Folder) end

	ThemeManager.Library = nil
	ThemeManager.BuiltInThemes = {                                      --05d1e5
		['Default'] 		= { 1, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1c1c1c","AccentColor":"FF66FF","BackgroundColor":"141414","OutlineColor":"323232"}') },
		['Dracula'] 		= { 2, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"232533","AccentColor":"6271a5","BackgroundColor":"1b1c27","OutlineColor":"7c82a7"}') },
		['Bitch Bot'] 		= { 3, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1e1e","AccentColor":"7e48a3","BackgroundColor":"232323","OutlineColor":"141414"}') },
		['Kiriot Hub'] 		= { 4, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"30333b","AccentColor":"ffaa00","BackgroundColor":"1a1c20","OutlineColor":"141414"}') },
		['Fatality'] 		= { 5, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1842","AccentColor":"c50754","BackgroundColor":"191335","OutlineColor":"3c355d"}') },
		['Green'] 			= { 6, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"141414","AccentColor":"00ff8b","BackgroundColor":"1c1c1c","OutlineColor":"3c3c3c"}') },
		['Jester'] 			= { 7, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"db4467","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
		['Mint'] 			= { 8, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"3db488","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
		['Tokyo Night'] 	= { 9, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"191925","AccentColor":"6759b3","BackgroundColor":"16161f","OutlineColor":"323232"}') },
		['Ubuntu'] 			= { 10, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"3e3e3e","AccentColor":"e2581e","BackgroundColor":"323232","OutlineColor":"191919"}') },
	}

	function ThemeManager:ApplyTheme(theme)
		local customThemeData = self:GetCustomTheme(theme)
		local data = customThemeData or self.BuiltInThemes[theme]

		if not data then return end

		-- custom themes are just regular dictionaries instead of an array with { index, dictionary }

		local scheme = data[2]
		for idx, col in next, customThemeData or scheme do
			self.Library[idx] = Color3.fromHex(col)
			
			if Options[idx] then
				Options[idx]:SetValueRGB(Color3.fromHex(col))
			end
		end

		self:ThemeUpdate()
	end

	function ThemeManager:ThemeUpdate()
		self.Library.FontColor = Options.FontColor.Value
		self.Library.MainColor = Options.MainColor.Value
		self.Library.AccentColor = Options.AccentColor.Value
		self.Library.BackgroundColor = Options.BackgroundColor.Value
		self.Library.OutlineColor = Options.OutlineColor.Value

		self.Library.AccentColorDark = self.Library:GetDarkerColor(self.Library.AccentColor);
		self.Library:UpdateColorsUsingRegistry()
	end

	function ThemeManager:LoadDefault()		
		local theme = 'Default'
		local content = isfile(self.Folder .. '/themes/default.txt') and readfile(self.Folder .. '/themes/default.txt')

		local isDefault = true
		if content then
			if self.BuiltInThemes[content] then
				theme = content
			elseif self:GetCustomTheme(content) then
				theme = content
				isDefault = false;
			end
		elseif self.BuiltInThemes[self.DefaultTheme] then
		 	theme = self.DefaultTheme
		end

		if isDefault then
			Options.ThemeManager_ThemeList:SetValue(theme)
		else
			self:ApplyTheme(theme)
		end
	end

	function ThemeManager:SaveDefault(theme)
		writefile(self.Folder .. '/themes/default.txt', theme)
	end

	function ThemeManager:CreateThemeManager(groupbox)
		groupbox:AddLabel('Background color'):AddColorPicker('BackgroundColor', { Default = self.Library.BackgroundColor });
		groupbox:AddLabel('Main color')	:AddColorPicker('MainColor', { Default = self.Library.MainColor });
		groupbox:AddLabel('Accent color'):AddColorPicker('AccentColor', { Default = self.Library.AccentColor });
		groupbox:AddLabel('Outline color'):AddColorPicker('OutlineColor', { Default = self.Library.OutlineColor });
		groupbox:AddLabel('Font color')	:AddColorPicker('FontColor', { Default = self.Library.FontColor });

		local ThemesArray = {}
		for Name, Theme in next, self.BuiltInThemes do
			table.insert(ThemesArray, Name)
		end

		table.sort(ThemesArray, function(a, b) return self.BuiltInThemes[a][1] < self.BuiltInThemes[b][1] end)

		groupbox:AddDivider()
		groupbox:AddDropdown('ThemeManager_ThemeList', { Text = 'Theme list', Values = ThemesArray, Default = 1 })

		groupbox:AddButton('Set as default', function()
			self:SaveDefault(Options.ThemeManager_ThemeList.Value)
			self.Library:Notify(string.format('Set default theme to %q', Options.ThemeManager_ThemeList.Value))
		end)

		Options.ThemeManager_ThemeList:OnChanged(function()
			self:ApplyTheme(Options.ThemeManager_ThemeList.Value)
		end)

		groupbox:AddDivider()
		groupbox:AddDropdown('ThemeManager_CustomThemeList', { Text = 'Custom themes', Values = self:ReloadCustomThemes(), AllowNull = true, Default = 1 })
		groupbox:AddInput('ThemeManager_CustomThemeName', { Text = 'Custom theme name' })

		groupbox:AddButton('Load custom theme', function() 
			self:ApplyTheme(Options.ThemeManager_CustomThemeList.Value) 
		end)

		groupbox:AddButton('Save custom theme', function() 
			self:SaveCustomTheme(Options.ThemeManager_CustomThemeName.Value)

			Options.ThemeManager_CustomThemeList.Values = self:ReloadCustomThemes()
			Options.ThemeManager_CustomThemeList:SetValues()
			Options.ThemeManager_CustomThemeList:SetValue(nil)
		end)

		groupbox:AddButton('Refresh list', function()
			Options.ThemeManager_CustomThemeList.Values = self:ReloadCustomThemes()
			Options.ThemeManager_CustomThemeList:SetValues()
			Options.ThemeManager_CustomThemeList:SetValue(nil)
		end)

		groupbox:AddButton('Set as default', function()
			if Options.ThemeManager_CustomThemeList.Value ~= nil and Options.ThemeManager_CustomThemeList.Value ~= '' then
				self:SaveDefault(Options.ThemeManager_CustomThemeList.Value)
				self.Library:Notify(string.format('Set default theme to %q', Options.ThemeManager_CustomThemeList.Value))
			end
		end)

		ThemeManager:LoadDefault()

		local function UpdateTheme()
			self:ThemeUpdate()
		end

		Options.BackgroundColor:OnChanged(UpdateTheme)
		Options.MainColor:OnChanged(UpdateTheme)
		Options.AccentColor:OnChanged(UpdateTheme)
		Options.OutlineColor:OnChanged(UpdateTheme)
		Options.FontColor:OnChanged(UpdateTheme)
	end

	function ThemeManager:GetCustomTheme(file)
		local path = self.Folder .. '/themes/' .. file
		if not isfile(path) then
			return nil
		end

		local data = readfile(path)
		local success, decoded = pcall(httpService.JSONDecode, httpService, data)
		
		if not success then
			return nil
		end

		return decoded
	end

	function ThemeManager:SaveCustomTheme(file)
		if file:gsub(' ', '') == '' then
			return self.Library:Notify('Invalid file name for theme (empty)', 3)
		end

		local theme = {}
		local fields = { "FontColor", "MainColor", "AccentColor", "BackgroundColor", "OutlineColor" }

		for _, field in next, fields do
			theme[field] = Options[field].Value:ToHex()
		end

		writefile(self.Folder .. '/themes/' .. file .. '.json', httpService:JSONEncode(theme))
	end

	function ThemeManager:ReloadCustomThemes()
		local list = listfiles(self.Folder .. '/themes')

		local out = {}
		for i = 1, #list do
			local file = list[i]
			if file:sub(-5) == '.json' then
				-- i hate this but it has to be done ...

				local pos = file:find('.json', 1, true)
				local char = file:sub(pos, pos)

				while char ~= '/' and char ~= '\\' and char ~= '' do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == '/' or char == '\\' then
					table.insert(out, file:sub(pos + 1))
				end
			end
		end

		return out
	end

	function ThemeManager:SetLibrary(lib)
		self.Library = lib
	end

	function ThemeManager:BuildFolderTree()
		local paths = {}

		-- build the entire tree if a path is like some-hub/phantom-forces
		-- makefolder builds the entire tree on Synapse X but not other exploits

		local parts = self.Folder:split('/')
		for idx = 1, #parts do
			paths[#paths + 1] = table.concat(parts, '/', 1, idx)
		end

		table.insert(paths, self.Folder .. '/themes')
		table.insert(paths, self.Folder .. '/settings')

		for i = 1, #paths do
			local str = paths[i]
			if not isfolder(str) then
				makefolder(str)
			end
		end
	end

	function ThemeManager:SetFolder(folder)
		self.Folder = folder
		self:BuildFolderTree()
	end

	function ThemeManager:CreateGroupBox(tab)
		assert(self.Library, 'Must set ThemeManager.Library first!')
		return tab:AddLeftGroupbox('Themes')
	end

	function ThemeManager:ApplyToTab(tab)
		assert(self.Library, 'Must set ThemeManager.Library first!')
		local groupbox = self:CreateGroupBox(tab)
		self:CreateThemeManager(groupbox)
	end

	function ThemeManager:ApplyToGroupbox(groupbox)
		assert(self.Library, 'Must set ThemeManager.Library first!')
		self:CreateThemeManager(groupbox)
	end

	ThemeManager:BuildFolderTree()
end
function toggleuilib()
    game:GetService("VirtualInputManager"):SendKeyEvent(true,"RightControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
	wait(sec)
	game:GetService("VirtualInputManager"):SendKeyEvent(false,"RightControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
end
local SaveManager = loadstring(game:HttpGet("https://pastebin.com/raw/QccQyYQA"))()



local Weapons = {"Melee","Sword","Gun","Blox Fruit"}
function Refresh(Method)
    local Result = {}
    if Method == "Boss" then
        for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
            if string.find(v.Name, "Boss") then
                table.insert(Result, v.Name)
            end
        end
        for i, v in pairs(game.workspace.Enemies:GetChildren()) do
            if string.find(v.Name, "Boss") then
                table.insert(Result, v.Name)
            end
        end
        if #Result > 1 then
            return Result
        else
            return {"--","---"}
        end
    elseif Method == "AllBoss" then
        for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
            if string.find(v.Name, "Boss") and v.Name ~= "rip_indra [Lv. 1500] [Boss]" then
                table.insert(Result, v.Name)
            end
        end
        for i, v in pairs(game.workspace.Enemies:GetChildren()) do
            if string.find(v.Name, "Boss") and v.Name ~= "rip_indra [Lv. 1500] [Boss]" then
                table.insert(Result, v.Name)
            end
        end
        return Result
        
        
    elseif Method == "Players" then
        for i, v in pairs(game.Players:GetChildren()) do
            if v.Name ~= game.Players.LocalPlayer.Name then
                table.insert(Result, v.Name)
            end
        end
        if #Result > 1 then
            return Result
        else
            table.insert(Result, game.Players.LocalPlayer.Name)
            table.insert(Result, "--")
            return Result
        end
    elseif Method == "Boat" then
        for i,v in pairs(game:GetService("Workspace").Boats:GetChildren()) do
            table.insert(Result,v.Name)
        end
        if #Result > 1 then
            return Result
        else
            return {"--","---"}
        end
    end
end
function sp(inputstr, sep)
    if sep == nil then
            sep = "%s"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            table.insert(t, str)
    end
    return t
end


local Window = Library:CreateWindow({
    Title = 'KievHub Blox Fruit | Version 1.00',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
    Players = Window:AddTab("Players"),
    Teleport = Window:AddTab("Teleport"),
    Raid = Window:AddTab("Raid"),
    Misc = Window:AddTab("Misc"),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}


local Tab = Tabs.Main:AddLeftGroupbox('AutoFarmLevel')
local NextTab = Tabs.Main:AddLeftGroupbox('AutoNextSea')
local MasteryTab = Tabs.Main:AddLeftGroupbox('Mastery')
local BossTab = Tabs.Main:AddLeftGroupbox('Auto Boss')

local Tab1 = Tabs.Main:AddRightGroupbox('Settings Farm')
local Tab2 = Tabs.Main:AddRightGroupbox('Auto Stats')
local Tab3 = Tabs.Main:AddRightGroupbox('Auto Skill Mastery')

local PlayersSection = Tabs.Players:AddLeftGroupbox('Player')
local aimbotSection = Tabs.Players:AddRightGroupbox('Aim Bot')
local Ability = Tabs.Players:AddLeftTabbox()
local UnLockAbi = Ability:AddTab('UnLock')
local NocdAbi = Ability:AddTab('NoCooldown')
local teamsec = Tabs.Players:AddRightGroupbox('Team')
local RaceSex = Tabs.Players:AddRightGroupbox('Race')
local KenTab = Tabs.Players:AddRightGroupbox('Ifn')
local FakeTab = Tabs.Players:AddLeftGroupbox('LocalPlayer')


local WorldTab = Tabs.Teleport:AddRightGroupbox('TelePort World')
local Tele = Tabs.Teleport:AddTabbox({Side = 1 , Name = "Teleport"})
local IslandTab = Tele:AddTab("TelePort island")
local NpcTab = Tele:AddTab("TeLeport Npc")
local Server = Tabs.Teleport:AddRightGroupbox('TelePort Server')
local ClickTab = Tabs.Teleport:AddLeftGroupbox('Click TelePort')

local Hehe = Tabs.Raid:AddTabbox({Side = 1 , Name = "AutoRaid"})
local RaidTab = Hehe:AddTab("AutoRaid")
local RaidHopTab = Hehe:AddTab("Auto Raid Hop")
local Chips = Tabs.Raid:AddRightGroupbox('Buy Chip')
local SetRaid = Tabs.Raid:AddRightGroupbox('SetRaid')

local Fpstab = Tabs.Misc:AddRightGroupbox('FpsLock / WhiteScreen')
local StealBoatSection = Tabs.Misc:AddRightGroupbox('StealBoat')
local FFFF = Tabs.Misc:AddRightTabbox()
local Opentab = FFFF:AddTab('User interface')
local FruitTab = FFFF:AddTab('Devil Fruit')
local Shop = Tabs.Misc:AddLeftTabbox()
local CombatSection = Shop:AddTab('Combat')
local GunSection = Shop:AddTab('Gun')
local SwordSection = Shop:AddTab('Sword')
local Shop2 = Tabs.Misc:AddLeftTabbox()
local AbilitySex = Shop2:AddTab('Ability')
local AccessorySex = Shop2:AddTab('Accessory')
local FragmentSection = Tabs.Misc:AddLeftGroupbox('Fragment')
local Servertime = Tabs.Misc:AddRightGroupbox('Servertime')

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind 

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings() 

SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 


SaveManager:BuildConfigSection(Tabs['UI Settings']) 


ThemeManager:ApplyToTab(Tabs['UI Settings'])


Tab1:AddDropdown('Weapon', {
    Values = Weapons,
    Default = getgenv().SettingSave["SettingsFarm"]["Weapon"], 
    Multi = false,
    Text = 'Selected Weapon',
    Tooltip = 'This is a tooltip', 
})
Options.Weapon:OnChanged(function()
    getgenv().SettingSave["SettingsFarm"]["Weapon"] = Options.Weapon.Value
    Save()
end)
Tab1:AddToggle('FastAttack', {
    Text = 'FastAttack',
    Default = getgenv().SettingSave["SettingsFarm"]["FastAttack"], 
    Save()
})
Toggles.FastAttack:OnChanged(function()
    if Toggles.FastAttack.Value == true then
        getgenv().SettingSave["SettingsFarm"]["FastAttack"] = true
        Save()
    elseif Toggles.FastAttack.Value == false then
        getgenv().SettingSave["SettingsFarm"]["FastAttack"] = false
        Save()
    end
end)
--
Tab1:AddToggle('CameraShaker', {
    Text = 'CameraShaker',
    Default = getgenv().SettingSave["SettingsFarm"]["CameraShaker"], 
    Save()
})
Toggles.CameraShaker:OnChanged(function()
    if Toggles.CameraShaker.Value == true then
        getgenv().SettingSave["SettingsFarm"]["CameraShaker"] = true
        Save()
        require(game.ReplicatedStorage.Util.CameraShaker):Stop()
    elseif Toggles.CameraShaker.Value == false then
        getgenv().SettingSave["SettingsFarm"]["CameraShaker"] = false
        Save()
        require(game.ReplicatedStorage.Util.CameraShaker):Start()
    end
end)
--
Tab1:AddToggle('AutoHaki', {
    Text = 'AutoHaki',
    Default = getgenv().SettingSave["SettingsFarm"]["AutoHaki"], 
    Save()
})
Toggles.AutoHaki:OnChanged(function()
    if Toggles.AutoHaki.Value == true then
        getgenv().SettingSave["SettingsFarm"]["AutoHaki"] = true
        Save()
    elseif Toggles.AutoHaki.Value == false then
        getgenv().SettingSave["SettingsFarm"]["AutoHaki"] = false
        Save()
    end
end)
Tab1:AddToggle('AlwaysCritical', {
    Text = 'AlwaysCritical',
    Default = getgenv().SettingSave["SettingsFarm"]["AlwaysCritical"], 
    Save()
})
Toggles.AlwaysCritical:OnChanged(function()
    if Toggles.AlwaysCritical.Value == true then
        getgenv().SettingSave["SettingsFarm"]["AlwaysCritical"] = true
        Save()
    elseif Toggles.AlwaysCritical.Value == false then
        getgenv().SettingSave["SettingsFarm"]["AlwaysCritical"] = false
        Save()
    end
end)
Tab1:AddSlider('hitbox', {
    Text = 'HitBox %',

    Default = getgenv().SettingSave["SettingsFarm"]["hitbox"],
    Min = 1,
    Max = 100,
    Rounding = 0,

    Compact = false,
})

Options.hitbox:OnChanged(function()
    getgenv().SettingSave["SettingsFarm"]["hitbox"] = Options.hitbox.Value
    Save()
end)
Tab1:AddInput('RedeemCode', {
    Default = getgenv().SettingSave["SettingsFarm"]["RedeemCode"],
    Numeric = false,
    Finished = false, -- true / false, only calls callback when you press enter
    Text = 'RedeemCode with Level ' .. tostring(getgenv().SettingSave["SettingsFarm"]["RedeemCode"]),
    Tooltip = ""
})
Options.RedeemCode:OnChanged(function()
    getgenv().SettingSave["SettingsFarm"]["RedeemCode"] = Options.RedeemCode.Value
    Save()
end)
--
Tab:AddDropdown('ModeFarm', {
    Values = {"tp","Tween"},
    Default = getgenv().SettingSave["Main"]["ModeFarm"], 
    Multi = false,
    Text = 'Selected Mode Farm',
    Tooltip = 'This is a Mode Farm', 
})
Options.ModeFarm:OnChanged(function()
    getgenv().SettingSave["Main"]["ModeFarm"] = Options.ModeFarm.Value
    Save()
end)
--
Tab:AddToggle('Farm1', {
    Text = 'Auto Farm Level',
    Default = getgenv().SettingSave["Main"]["AutoFarmLevel"], 
    Save()
})
Toggles.Farm1:OnChanged(function()
    if Toggles.Farm1.Value == true then
        getgenv().SettingSave["Main"]["AutoFarmLevel"] = Toggles.Farm1.Value
        Save()
    elseif Toggles.Farm1.Value == false then
        getgenv().SettingSave["Main"]["AutoFarmLevel"] = Toggles.Farm1.Value
        Save()
    end
end)
--
getgenv().Q = {}
Tab:AddToggle('DoubleQuest', {
    Text = 'DoubleQuest',
    Default = getgenv().SettingSave["Main"]["DoubleQuest"], 
    Save()
})
Toggles.DoubleQuest:OnChanged(function()
    if Toggles.DoubleQuest.Value == true then
        getgenv().SettingSave["Main"]["DoubleQuest"] = true
        Save()
    elseif Toggles.DoubleQuest.Value == false then
        getgenv().SettingSave["Main"]["DoubleQuest"] = false
        Save()
    end
end)
--
NextTab:AddToggle('AutoSecondSea', {
    Text = 'AutoSecondSea',
    Default = getgenv().SettingSave["NextSea"]["AutoSecondSea"], 
    Save()
})
Toggles.AutoSecondSea:OnChanged(function()
    if Toggles.AutoSecondSea.Value == true then
        getgenv().SettingSave["NextSea"]["AutoSecondSea"] = true
        Save()
    elseif Toggles.AutoSecondSea.Value == false then
        getgenv().SettingSave["NextSea"]["AutoSecondSea"] = false
        Save()
    end
end)
NextTab:AddToggle('AutoThirdSea', {
    Text = 'AutoThirdSea',
    Default = getgenv().SettingSave["NextSea"]["AutoThirdSea"], 
    Save()
})
Toggles.AutoThirdSea:OnChanged(function()
    if Toggles.AutoThirdSea.Value == true then
        getgenv().SettingSave["NextSea"]["AutoThirdSea"] = true
        Save()
    elseif Toggles.AutoThirdSea.Value == false then
        getgenv().SettingSave["NextSea"]["AutoThirdSea"] = false
        Save()
    end
end)


local monsterhealthmastery = MasteryTab:AddLabel("        Monster Health : 0%")
MasteryTab:AddToggle('automasterybloxfruit', {
    Text = 'AutoFarm Mastery Fruit',
    Default = getgenv().SettingSave["Mastery"]["FruitMastery"], 
    Save()
})
Toggles.automasterybloxfruit:OnChanged(function()
    if Toggles.automasterybloxfruit.Value == true then
        getgenv().SettingSave["Mastery"]["FruitMastery"] = true
        Save()
    elseif Toggles.automasterybloxfruit.Value == false then
        getgenv().SettingSave["Mastery"]["FruitMastery"] = false
        Save()
        wait()
        for i=1,5 do
            wait()
            totarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
        end
    end
end)
MasteryTab:AddToggle('automasterygun', {
    Text = 'Auto Farm Gun',
    Default = getgenv().SettingSave["Mastery"]["GunMastery"],
    Save()
})
Toggles.automasterygun:OnChanged(function()
    if Toggles.automasterygun.Value == true then
        getgenv().SettingSave["Mastery"]["GunMastery"] = true
        Save()
    elseif Toggles.automasterygun.Value == false then
        getgenv().SettingSave["Mastery"]["GunMastery"] = false
        Save()
        wait()
        for i=1,5 do
            wait()
            totarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
        end
    end
end)

MasteryTab:AddSlider('Healthpercen', {
    Text = 'Health %',

    Default = getgenv().SettingSave["Mastery"]["Healthpercen"],
    Min = 1,
    Max = 100,
    Rounding = 0,

    Compact = false,
})
Options.Healthpercen:OnChanged(function()
    getgenv().SettingSave["Mastery"]["Healthpercen"] = Options.Healthpercen.Value
    Save()
    monsterhealthmastery:SetText("        Monster Health : ".. Options.Healthpercen.Value .."%")
end)
MasteryTab:AddSlider('lockmastery', {
    Text = 'Lock Mastery',

    Default = getgenv().SettingSave["Mastery"]["lockmastery"],
    Min = 1,
    Max = 600,
    Rounding = 0,

    Compact = false,
})
Options.lockmastery:OnChanged(function()
    getgenv().SettingSave["Mastery"]["lockmastery"] = Options.lockmastery.Value
    Save()
end)

BossTab:AddToggle('AutoBossQuest', {
    Text = 'Auto Quest',
    Default = getgenv().SettingSave["Boss"]["AutoBossQuest"], 
})
Toggles.AutoBossQuest:OnChanged(function()
    if Toggles.AutoBossQuest.Value == true then
        getgenv().SettingSave["Boss"]["AutoBossQuest"] = true
        Save()
    elseif Toggles.AutoBossQuest.Value == false then
        getgenv().SettingSave["Boss"]["AutoBossQuest"] = false
        Save()
    end
end)
BossTab:AddDropdown('SelectedBoss', {
    Values = Refresh("Boss"),
    Default = 1,
    Multi = false,

    Text = 'Select Boss',
})
Options.SelectedBoss:OnChanged(function()
    local bosslist = Refresh("Boss")
    Options.SelectedBoss.Values = bosslist
    Options.SelectedBoss:SetValues()
	getgenv().SettingSave["Boss"]["SelectBoss"] = Options.SelectedBoss.Value
    Save()
end)
BossTab:AddToggle('AutoBoss', {
    Text = 'Auto Kill Boss',
    Default = getgenv().SettingSave["Boss"]["AutoKillBoss"], 
})
Toggles.AutoBoss:OnChanged(function()
    if Toggles.AutoBoss.Value == true then
        getgenv().SettingSave["Boss"]["AutoKillBoss"] = Toggles.AutoBoss.Value
        Save()
    elseif Toggles.AutoBoss.Value == false then
        getgenv().SettingSave["Boss"]["AutoKillBoss"] = Toggles.AutoBoss.Value
        Save()
    end
end)
BossTab:AddToggle('AutoAllBoss', {
    Text = 'Auto Kill All Boss',
    Default = getgenv().SettingSave["Boss"]["AutoKillAllBoss"], 
})
Toggles.AutoAllBoss:OnChanged(function()
    if Toggles.AutoAllBoss.Value == true then
        getgenv().SettingSave["Boss"]["AutoKillAllBoss"] = Toggles.AutoAllBoss.Value
        Save()
    elseif Toggles.AutoAllBoss.Value == false then
        getgenv().SettingSave["Boss"]["AutoKillAllBoss"] = Toggles.AutoAllBoss.Value
        Save()
    end
end)

BossTab:AddToggle('HopServer', {
    Text = 'HopServer',
    Default = getgenv().SettingSave["Boss"]["HopServer"], 
})
Toggles.HopServer:OnChanged(function()
    if Toggles.HopServer.Value == true then
        getgenv().SettingSave["Boss"]["HopServer"] = true
        Save()
    elseif Toggles.HopServer.Value == false then
        getgenv().SettingSave["Boss"]["HopServer"] = false
        Save()
    end
end)


Tab2:AddToggle('AutoMelee', {
    Text = 'Melee',
    Default = getgenv().SettingSave["Stats"]["Melee"], 
})
Toggles.AutoMelee:OnChanged(function()
    if Toggles.AutoMelee.Value == true then
        getgenv().SettingSave["Stats"]["Melee"] = true
        Save()
    elseif Toggles.AutoMelee.Value == false then
        getgenv().SettingSave["Stats"]["Melee"] = false
        Save()
    end
end)
Tab2:AddToggle('AutoDefense', {
    Text = 'Defense',
    Default = getgenv().SettingSave["Stats"]["Defense"],
    Save() 
})
Toggles.AutoDefense:OnChanged(function()
    if Toggles.AutoDefense.Value == true then
        getgenv().SettingSave["Stats"]["Defense"] = true
        Save()
    elseif Toggles.AutoDefense.Value == false then
        getgenv().SettingSave["Stats"]["Defense"] = false
        Save()
    end
end)
Tab2:AddToggle('AutoSword', {
    Text = 'Sword',
    Default = getgenv().SettingSave["Stats"]["Sword"], 
})
Toggles.AutoSword:OnChanged(function()
    if Toggles.AutoSword.Value == true then
        getgenv().SettingSave["Stats"]["Sword"] = true
        Save()
    elseif Toggles.AutoSword.Value == false then
        getgenv().SettingSave["Stats"]["Sword"] = false
        Save()
    end
end)
Tab2:AddToggle('AutoGun', {
    Text = 'Gun',
    Default = getgenv().SettingSave["Stats"]["Gun"], 
})
Toggles.AutoGun:OnChanged(function()
    if Toggles.AutoGun.Value == true then
        getgenv().SettingSave["Stats"]["Gun"] = true
        Save()
    elseif Toggles.AutoGun.Value == false then
        getgenv().SettingSave["Stats"]["Gun"] = false
        Save()
    end
end)
Tab2:AddToggle('AutoBloxFruit', {
    Text = 'Blox Fruit',
    Default = getgenv().SettingSave["Stats"]["Devil Fruit"], 
})
Toggles.AutoBloxFruit:OnChanged(function()
    if Toggles.AutoBloxFruit.Value == true then
        getgenv().SettingSave["Stats"]["Devil Fruit"] = true
        Save()
    elseif Toggles.AutoBloxFruit.Value == false then
        getgenv().SettingSave["Stats"]["Devil Fruit"] = false
        Save()
    end
end)
Tab2:AddSlider('PointsSlider', {
    Text = 'Points',

    Default = getgenv().SettingSave["Stats"]["Points"],
    Min = 1,
    Max = 100,
    Rounding = 0,

    Compact = false,
})
Options.PointsSlider:OnChanged(function()
    getgenv().SettingSave["Stats"]["Points"] = Options.PointsSlider.Value
    Save()
end)
Tab3:AddToggle('SkillZ', {
    Text = 'Z',
    Default = getgenv().SettingSave["Mastery"]["Z"], 
})
Toggles.SkillZ:OnChanged(function()
    if Toggles.SkillZ.Value == true then
        getgenv().SettingSave["Mastery"]["Z"] = true
    elseif Toggles.SkillZ.Value == false then
        getgenv().SettingSave["Mastery"]["Z"] = false
    end
    Save()
end)
Tab3:AddToggle('SkillX', {
    Text = 'X',
    Default = getgenv().SettingSave["Mastery"]["X"], 
})
Toggles.SkillX:OnChanged(function()
    if Toggles.SkillX.Value == true then
        getgenv().SettingSave["Mastery"]["X"] = true
    elseif Toggles.SkillX.Value == false then
        getgenv().SettingSave["Mastery"]["X"] = false
    end
    Save()
end)
Tab3:AddToggle('SkillC', {
    Text = 'C',
    Default = getgenv().SettingSave["Mastery"]["C"], 
})
Toggles.SkillC:OnChanged(function()
    if Toggles.SkillC.Value == true then
        getgenv().SettingSave["Mastery"]["C"] = true
    elseif Toggles.SkillC.Value == false then
        getgenv().SettingSave["Mastery"]["C"] = false
    end
    Save()
end)
Tab3:AddToggle('SkillV', {
    Text = 'V',
    Default = getgenv().SettingSave["Mastery"]["V"], 
})
Toggles.SkillV:OnChanged(function()
    if Toggles.SkillV.Value == true then
        getgenv().SettingSave["Mastery"]["V"] = true
    elseif Toggles.SkillV.Value == false then
        getgenv().SettingSave["Mastery"]["V"] = false
    end
    Save()
end)

function getplrlist()
    local plarlist = {}
    for i,v in pairs(game.Players:GetChildren()) do
        table.insert(plarlist,v.Name)
    end
    return plarlist
end
PlayersSection:AddDropdown('SelectedPlayerDropDown', {
    Values = getplrlist(),
    Default = 2,
    Multi = false,
    Text = 'Select Player',
})
Options.SelectedPlayerDropDown:OnChanged(function()
    local plarlist = getplrlist()
    Options.SelectedPlayerDropDown.Values = plarlist
    Options.SelectedPlayerDropDown:SetValues()
	_G.SelectedPlayer = Options.SelectedPlayerDropDown.Value
end)
PlayersSection:AddToggle('Teleportplayer', {
    Text = 'Teleport',
    Default = _G.TeleportPlayer, 
})
Toggles.Teleportplayer:OnChanged(function()
    if Toggles.Teleportplayer.Value == true then
        _G.TeleportPlayer = true
    elseif Toggles.Teleportplayer.Value == false then
        _G.TeleportPlayer = false
        wait()
        for i=1,5 do
            pcall(function()
                totarget(LocalPlayer.Character.HumanoidRootPart.Position) 
            end)
        end
    end
end)
PlayersSection:AddToggle('spectateplayer', {
    Text = 'Spectate',
    Default = _G.spectateplayer, 
})
Toggles.spectateplayer:OnChanged(function()
    if Toggles.spectateplayer.Value == true then
        _G.spectateplayer = true
    elseif Toggles.spectateplayer.Value == false then
        _G.spectateplayer = false
        game.Workspace.Camera.CameraSubject = LocalPlayer.Character.Humanoid
    end
    
end)
PlayersSection:AddToggle('KillPlayer', {
    Text = 'Kill Player',
    Default = _G.KillPlayer, 
})
Toggles.KillPlayer:OnChanged(function()
    if Toggles.KillPlayer.Value == true then
        _G.KillPlayer = true
    elseif Toggles.KillPlayer.Value == false then
        _G.KillPlayer = false
    end
end)
PlayersSection:AddToggle('AutoHuntQuest', {
    Text = 'Auto Hunt Quest',
    Default = _G.AutoHuntQuest, 
})
Toggles.AutoHuntQuest:OnChanged(function()
    if Toggles.AutoHuntQuest.Value == true then
        _G.AutoHuntQuest = true
    elseif Toggles.AutoHuntQuest.Value == false then
        _G.AutoHuntQuest = false
    end
end)
PlayersSection:AddButton("Copy pant and shirt",function()
    game.Players.LocalPlayer.Character.Shirt.ShirtTemplate = game.Players:FindFirstChild(_G.SelectedPlayer).Character.Shirt.ShirtTemplate
    game.Players.LocalPlayer.Character.Pants.PantsTemplate = game.Players:FindFirstChild(_G.SelectedPlayer).Character.Pants.PantsTemplate
end)
PlayersSection:AddDropdown('SelectedKillType', {
    Values = {"Melee","Sword","Gun","Blox Fruit"},
    Default = getindex({"Melee","Sword","Gun","Blox Fruit"},getgenv().SettingSave["Player"]["SelectedKillType"]),
    Multi = false,
    Text = 'Select Weapon',
})
Options.SelectedKillType:OnChanged(function()
    getgenv().SettingSave["Player"]["SelectedKillType"] = Options.SelectedKillType.Value
    Save()
end)

local tragetnow = aimbotSection:AddLabel("        Traget : Undefind")
aimbotSection:AddToggle('aimbotskill', {
    Text = 'Aimbot Skill',
    Default = getgenv().SettingSave["Player"]["aimbotskill"], 
})
Toggles.aimbotskill:OnChanged(function()
    if Toggles.aimbotskill.Value == true then
        getgenv().SettingSave["Player"]["aimbotskill"] = true
        Save()
    elseif Toggles.aimbotskill.Value == false then
        getgenv().SettingSave["Player"]["aimbotskill"] = false
        Save()
    end
end)
aimbotSection:AddToggle('aimbotgun', {
    Text = 'Aimbot Gun',
    Default = getgenv().SettingSave["Player"]["aimbotgun"], 
})
Toggles.aimbotgun:OnChanged(function()
    if Toggles.aimbotgun.Value == true then
        getgenv().SettingSave["Player"]["aimbotgun"] = true
        Save()
    elseif Toggles.aimbotgun.Value == false then
        getgenv().SettingSave["Player"]["aimbotgun"] = false
        Save()
    end
end)
aimbotSection:AddDropdown('Ignoreaimbot', {
    Values = {"Team","Allies","Friend",},
    Default = 2,
    Multi = true,
    Text = 'Ignore',
})
Options.Ignoreaimbot:OnChanged(function()
    if loaddedlist_ignoreaimbot then
        if  Options.Ignoreaimbot.Value.Allies == true then
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Allies = true
        else
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Allies = false
        end
        if  Options.Ignoreaimbot.Value.Friend == true then
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Friend = true
        else
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Friend = false
        end
        if  Options.Ignoreaimbot.Value.Team == true then
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Team = true
        else
            getgenv().SettingSave["Player"]["Ignoreaimbot"].Team = false
        end
        Save()
    end
end)

loaddedlist_ignoreaimbot = true
local saveingirelist = {}
if getgenv().SettingSave["Player"]["Ignoreaimbot"].Team then
    saveingirelist.Team = true
end
if getgenv().SettingSave["Player"]["Ignoreaimbot"].Friend then
    saveingirelist.Friend = true
end
if getgenv().SettingSave["Player"]["Ignoreaimbot"].Allies then
    saveingirelist.Allies = true
end
Options.Ignoreaimbot:SetValue(saveingirelist)

local heefta = {
    "Aimbot + SelectPlayer",
    "Aimbot Random Player",
}

aimbotSection:AddDropdown('SelectedAimbotType', {
    Values = heefta,
    Default = getindex(heefta,getgenv().SettingSave["Player"]["SelectedAimbotType"]),
    Multi = false,
    Text = 'Select Aimbot Mode',
})
Options.SelectedAimbotType:OnChanged(function()
    getgenv().SettingSave["Player"]["SelectedAimbotType"] = Options.SelectedAimbotType.Value
    Save()
end)
aimbotSection:AddSlider('MinDistanceLock', {
    Text = 'Distance Aimbot',

    Default = getgenv().SettingSave["Player"]["MinDistanceLock"],
    Min = 1,
    Max = 5000,
    Rounding = 0,

    Compact = false,
})
Options.MinDistanceLock:OnChanged(function()
    getgenv().SettingSave["Player"]["MinDistanceLock"] = Options.MinDistanceLock.Value
    Save()
end)

local Collection = game:GetService("CollectionService")
function AddTag(Obj,Tag)
    if not Collection:HasTag(Obj,Tag) then
        Collection:AddTag(Obj,Tag)
    end
end

UnLockAbi:AddButton("UnLock Buso",function()
    AddTag(game.Players.LocalPlayer.Character,"Buso")
end)
UnLockAbi:AddButton("UnLock Soru",function()
    AddTag(game.Players.LocalPlayer.Character,"Soru")
end)
UnLockAbi:AddButton("UnLock Geppo",function()
    AddTag(game.Players.LocalPlayer.Character,"Geppo")
end)
UnLockAbi:AddButton("UnLock Ken",function()
    AddTag(game.Players.LocalPlayer.Character,"Ken")
end)
UnLockAbi:AddButton("UnLock KenUpgrade",function()
    AddTag(game.Players.LocalPlayer.Character,"KenUpgrade")
end)

NocdAbi:AddButton("Remove Cooldown Soru",function()
    Modify({"Soru"})
end)
NocdAbi:AddButton("Remove Cooldown Geppo",function()
    Modify({"Geppo"})
end)
NocdAbi:AddButton("Remove Cooldown Dash",function()
    Modify({"Dodge"})
end)
teamsec:AddButton("Pirates",function()
    local args = {
        [1] = "SetTeam",
        [2] = "Pirates"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
teamsec:AddButton("Marines",function()
    local args = {
        [1] = "SetTeam",
        [2] = "Marines"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
KenTab:AddButton("Infinity Ken Distance",function()
    if Plr:FindFirstChild("VisionRadius") then
        Plr.VisionRadius.Value = 9999999999999
    end
end)
KenTab:AddToggle('InfinityStamina', {
    Text = 'Infinity Stamina',
    Default = _G.infinityStamina, 
})
Toggles.InfinityStamina:OnChanged(function()
    if Toggles.InfinityStamina.Value == true then
        _G.infinityStamina = true
    elseif Toggles.InfinityStamina.Value == false then
        _G.infinityStamina = false
    end
    if not game.Players.LocalPlayer.Character.Energy:FindFirstChild("Checked") then
        local CreateCheck = Instance.new("BoolValue",game.Players.LocalPlayer.Character.Energy)
        CreateCheck.Name = "Checked"
        game.Players.LocalPlayer.Character.Energy.Changed:Connect(function()
            if _G.infinityStamina then
                game.Players.LocalPlayer.Character.Energy.Value = sp(game.Players.LocalPlayer.PlayerGui.Main.Energy.TextLabel.Text)[2]:split("/")[2]
            end
        end)
    end
end)
RaceSex:AddToggle('infrace', {
    Text = 'Infinity Evo Race (Client)',
    Default = _G.infinityrace, 
})
Toggles.infrace:OnChanged(function()
    if Toggles.infrace.Value == true then
        _G.infinityrace = true
        Save()
    elseif Toggles.infrace.Value == false then
        _G.infinityrace = false
        if not _G.infinityrace and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("Agility") then
            game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("Agility"):Destroy()
        end
    end
end)
RaceSex:AddToggle('minkv4', {
    Text = 'Unlock Mink V4 (Client)',
    Default = _G.MinkV4, 
})
Toggles.minkv4:OnChanged(function()
    pcall(function()
        if Toggles.minkv4.Value == true then
            -- syn.set_thread_identity(5)
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Player = game:GetService("Players").LocalPlayer
            local ArgsTransform = {
                Character = game.Players.LocalPlayer.Character,
                CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame,
                Color1 = Color3.fromRGB(102, 255, 153),
                Color2 = Color3.fromRGB(102, 255, 153),
                Color3 = Color3.fromRGB(102, 255, 153),
            }
            Player.Character.Humanoid:LoadAnimation(ReplicatedStorage.Util.Anims.Storage["2"].RaceTransform):Play()
            delay(1, function()
                pcall(function() require(ReplicatedStorage.Effect.Container.RaceTransformation.Main)(ArgsTransform) end)
            end)
            local agility = game:GetService("ReplicatedStorage").FX.Agility:Clone()
            agility.Enabled = false
            agility.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
            _G.MinkV4 = true
        elseif Toggles.minkv4.Value == false then
            _G.MinkV4 = false
            if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("Agility") then
            game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("Agility"):Destroy()
        end
        end
    end)
end)
FakeTab:AddSlider('FlySpeed', {
    Text = 'FlySpeed',

    Default = 1,
    Min = 1,
    Max = 1000,
    Rounding = 0,

    Compact = false,
})
FakeTab:AddToggle('Fly', {
    Text = 'Fly',
    Default = false, 
})
Toggles.Fly:OnChanged(function()
    if Toggles.Fly.Value == true then
		game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
		local Head = game.Players.LocalPlayer.Character:WaitForChild("Head")
		Head.Anchored = true
		CFloop = RunService.Heartbeat:Connect(function(deltaTime)
			local moveDirection = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (Options.FlySpeed.Value * deltaTime)
			local headCFrame = Head.CFrame
			local cameraCFrame = workspace.CurrentCamera.CFrame
			local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
			cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
			local cameraPosition = cameraCFrame.Position
			local headPosition = headCFrame.Position

			local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
			Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
		end)
    elseif Toggles.Fly.Value == false then
		if CFloop then
			CFloop:Disconnect()
			game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			local Head = game.Players.LocalPlayer.Character:WaitForChild("Head")
			Head.Anchored = false
		end
    end
end)
FakeTab:AddSlider('WalkSpeedSelect', {
    Text = 'WalkSpeedSelect',

    Default = 16,
    Min = 1,
    Max = 1000,
    Rounding = 0,

    Compact = false,
})
FakeTab:AddToggle('WalkSpeedOpen', {
    Text = 'WalkSpeedOpen',
    Default = false, 
})
Toggles.WalkSpeedOpen:OnChanged(function()
    if Toggles.WalkSpeedOpen.Value then
        game.Players.LocalPlayer.Character["Movement + Swim"].Disabled = true
    else 
        game.Players.LocalPlayer.Character["Movement + Swim"].Disabled = false
    end
end)
spawn(function()
    while task.wait() do
        if Toggles.WalkSpeedOpen.Value then
            --pcall(function()
                LocalPlayer.Character.Humanoid.WalkSpeed = Options.WalkSpeedSelect.Value
            --end)
        end
    end
end)


Server:AddButton("Rejoin Server",function()
    game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer)
end)
Server:AddButton("Hop Server",Hop)
IslandTab:AddToggle('teleportisland', {
    Text = 'Teleport Island',
    Default = _G.teleportisland, 
})
Toggles.teleportisland:OnChanged(function()
    if Toggles.teleportisland.Value == true then
        _G.teleportisland = true
    elseif Toggles.teleportisland.Value == false then
        _G.teleportisland = false
        wait()
        for i=1,5 do
            pcall(function()
                totarget(LocalPlayer.Character.HumanoidRootPart.CFrame) 
            end)
        end
    end
end)
local rushteleport = IslandTab:AddButton('Teleport Island', function()
    game.Players.LocalPlayer.Character.Humanoid.Health = 0
    local timenow = os.time() + 7
    repeat
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[_G.SelectedIsland].Part.CFrame
        task.wait()
    until (game:GetService("Workspace").NPCs:FindFirstChild("Set Home Point") and game:GetService("Workspace").NPCs["Set Home Point"]:FindFirstChild("HumanoidRootPart") and getdistance2(game:GetService("Workspace").NPCs["Set Home Point"].HumanoidRootPart.Position,game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[_G.SelectedIsland].Part.Position) < 1500) or os.time() >= timenow
    repeat
        if (game:GetService("Workspace").NPCs:FindFirstChild("Set Home Point") and game:GetService("Workspace").NPCs["Set Home Point"]:FindFirstChild("HumanoidRootPart") and getdistance2(game:GetService("Workspace").NPCs["Set Home Point"].HumanoidRootPart.Position,game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[_G.SelectedIsland].Part.Position) < 1500) then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").NPCs["Set Home Point"]:FindFirstChild("HumanoidRootPart").CFrame
        else
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[_G.SelectedIsland].Part.CFrame
        end
        task.wait()
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetLastSpawnPoint",_G.SelectedIsland)
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetSpawnPoint")
    until (game:GetService("Players").LocalPlayer.Data.SpawnPoint.Value == _G.SelectedIsland and game:GetService("Players").LocalPlayer.Data.LastSpawnPoint.Value == _G.SelectedIsland) or os.time() >= timenow
    if (game:GetService("Players").LocalPlayer.Data.SpawnPoint.Value == _G.SelectedIsland and game:GetService("Players").LocalPlayer.Data.LastSpawnPoint.Value == _G.SelectedIsland) then
        if getgenv().SettingSave["FastLoadCharacter"] then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam","Pirates","Deity")
        end
        wait(5)
    else
        return
    end
end)
rushteleport:AddTooltip("This function will set spawnpoint at seleted location \nand reset character (require PVE)")

local IslandTable = {}
for i,v in pairs(game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates:GetChildren()) do
    table.insert(IslandTable,v.Name)
end
IslandTab:AddDropdown('SelectedIsland', {
    Values = IslandTable,
    Default = 1,
    Multi = false,
    Text = 'Select Island',
})
Options.SelectedIsland:OnChanged(function()
    _G.SelectedIsland = Options.SelectedIsland.Value
end)


NpcTab:AddToggle('teleportNpc', {
    Text = 'Teleport Npc',
    Default = _G.teleportNpc, 
})
Toggles.teleportNpc:OnChanged(function()
    if Toggles.teleportNpc.Value == true then
        _G.teleportNpc = true
    elseif Toggles.teleportNpc.Value == false then
        _G.teleportNpc = false
        wait()
        for i=1,5 do
            pcall(function()
                totarget(LocalPlayer.Character.HumanoidRootPart.CFrame) 
            end)
        end
    end
end)

rushteleport:AddTooltip("This function will set spawnpoint at seleted location \nand reset character (require PVE)")


NpcTab:AddDropdown('SelectNpc', {
    Values = quest_fordropdown,
    Default = 1,
    Multi = false,
    Text = 'Select Npc',
})
Options.SelectNpc:OnChanged(function()
    _G.SelectedNpc = Options.SelectNpc.Value
end)


ClickTab:AddToggle('clicktp', {
    Text = 'Ctrl + CLick = Teleport',
    Default = getgenv().clicktp, 
})
Toggles.clicktp:OnChanged(function()
    if Toggles.clicktp.Value == true then
        getgenv().clicktp = true
    elseif Toggles.clicktp.Value == false then
        getgenv().clicktp = false
    end
end)
ClickTab:AddToggle('clicktween', {
    Text = 'Ctrl + CLick = Tween',
    Default = getgenv().clicktween, 
})
Toggles.clicktween:OnChanged(function()
    if Toggles.clicktween.Value == true then
        getgenv().clicktween = true
    elseif Toggles.clicktween.Value == false then
        getgenv().clicktween = false
    end
end)
WorldTab:AddLabel('TelePort World')
WorldTab:AddButton("Travel Main", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelMain")
end)
WorldTab:AddButton("Travel Dressrosa", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelDressrosa")
end)
WorldTab:AddButton("Travel Zou", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
end)



local Raids = require(game:GetService("ReplicatedStorage").Raids)
local RaidTable = {}
local DungeonShipData = {
    ["Flame"] = {"RaidsNpc","Select","Flame"},
    ['Ice'] = {"RaidsNpc","Select","Ice"},
    ['Quake'] = {"RaidsNpc","Select","Quake"},
    ['Light'] = {"RaidsNpc","Select","Light"},
    ['Dark'] = {"RaidsNpc","Select","Dark"},
    ['String'] = {"RaidsNpc","Select","String"},
    ['Rumble'] = {"RaidsNpc","Select","Rumble"},
    ['Magma'] = {"RaidsNpc","Select","Magma"},
    ['Buddha'] = {"RaidsNpc","Select","Human: Buddha"},
    ['Sand'] = {"RaidsNpc","Select", "Sand"},
	['Phoenix'] = {"RaidsNpc","Select", "Bird: Phoenix"},
	['Dough'] = {"RaidsNpc","Select", "Dough"},
}

for i,v in pairs(Raids) do
    for i,v in pairs(v) do
        table.insert(RaidTable,v)
    end
end
function GetIslandRaid(Index)
    local island = {}
    for i,v in pairs(game:GetService("Workspace")["_WorldOrigin"].Locations:GetChildren()) do
        if string.find(v.Name,tostring(Index)) then
            table.insert(island,v)
        end
    end
    for i,v in pairs(island) do
        if (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 3500 then
            return v
        end
    end
end

RaidTab:AddToggle('autokillaura', {
    Text = 'Kill Aura',
    Default = getgenv().SettingSave["Raid"]["KillAura"], 
})
Toggles.autokillaura:OnChanged(function()
    if Toggles.autokillaura.Value == true then
        getgenv().SettingSave["Raid"]["KillAura"] = Toggles.autokillaura.Value
        Save()
    elseif Toggles.autokillaura.Value == false then
        getgenv().SettingSave["Raid"]["KillAura"] = Toggles.autokillaura.Value
        Save()
    end
end)
RaidTab:AddToggle('autonextisland', {
    Text = 'AutoNextIsland',
    Default = getgenv().SettingSave["Raid"]["AutoNextIsland"], 
})
Toggles.autonextisland:OnChanged(function()
    if Toggles.autonextisland.Value == true then
        getgenv().SettingSave["Raid"]["AutoNextIsland"] = Toggles.autonextisland.Value
        Save()
    elseif Toggles.autonextisland.Value == false then
        getgenv().SettingSave["Raid"]["AutoNextIsland"] = Toggles.autonextisland.Value
        Save()
    end
end)
RaidTab:AddToggle('AutoAwake', {
    Text = 'Auto Awake Skill',
    Default = getgenv().SettingSave["Raid"]["AutoAwake"], 
})
Toggles.AutoAwake:OnChanged(function()
    if Toggles.AutoAwake.Value == true then
        getgenv().SettingSave["Raid"]["AutoAwake"] = Toggles.AutoAwake.Value
        Save()
    elseif Toggles.AutoAwake.Value == false then
        getgenv().SettingSave["Raid"]["AutoAwake"] = Toggles.AutoAwake.Value
        Save()
    end
end)

Chips:AddToggle('Autobuychip', {
    Text = 'Auto Buy Chip',
    Default = getgenv().SettingSave["Raid"]["AutobuyChips"], 
})
Toggles.Autobuychip:OnChanged(function()
    if Toggles.Autobuychip.Value == true then
        getgenv().SettingSave["Raid"]["AutobuyChips"] = Toggles.Autobuychip.Value
        Save()
    elseif Toggles.Autobuychip.Value == false then
        getgenv().SettingSave["Raid"]["AutobuyChips"] = Toggles.Autobuychip.Value
        Save()
    end
end)
Chips:AddDropdown('selecteddungeontype', {
        Values = RaidTable,
        Default = getindex(RaidTable,getgenv().SettingSave["Raid"]["SelectedChips"]),
        Multi = false,
        Text = 'Select Chips',
    })
Options.selecteddungeontype:OnChanged(function()
	getgenv().SettingSave["Raid"]["SelectedChips"] = Options.selecteddungeontype.Value
	Save()
end)

Chips:AddButton('Buy Chip', function() 
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(DungeonShipData[getgenv().SettingSave["Raid"]["SelectedChips"]]))
end)

SetRaid:AddToggle('AutoStartRaid', {
    Text = 'Auto Start Raid',
    Default = getgenv().SettingSave["Raid"]["AutoStartRaid"], 
})
Toggles.AutoStartRaid:OnChanged(function()
    if Toggles.AutoStartRaid.Value == true then
        getgenv().SettingSave["Raid"]["AutoStartRaid"] = Toggles.AutoStartRaid.Value
        Save()
    elseif Toggles.AutoStartRaid.Value == false then
        getgenv().SettingSave["Raid"]["AutoStartRaid"] = Toggles.AutoStartRaid.Value
        Save()
    end
end)
SetRaid:AddButton('Start Raid', function() 
    if ThirdSea then
        fireclickdetector(game:GetService("Workspace").Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
    end
    if SecondSea then
        fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon2.Button.Main.ClickDetector)
    end
end)
SetRaid:AddLabel('UnLock')
SetRaid:AddToggle('UnlockKen', {
    Text = 'UnlockKen',
    Default = getgenv().SettingSave["Raid"]["UnlockKen"], 
})
Toggles.UnlockKen:OnChanged(function()
    if Toggles.AutoStartRaid.Value == true then
        getgenv().SettingSave["Raid"]["UnlockKen"] = Toggles.UnlockKen.Value
        Save()
    elseif Toggles.UnlockKen.Value == false then
        getgenv().SettingSave["Raid"]["UnlockKen"] = Toggles.UnlockKen.Value
        Save()
    end
end)
SetRaid:AddToggle('UnLockGeppo', {
    Text = 'UnLockGeppo',
    Default = getgenv().SettingSave["Raid"]["UnLockGeppo"], 
})
Toggles.UnLockGeppo:OnChanged(function()
    if Toggles.AutoStartRaid.Value == true then
        getgenv().SettingSave["Raid"]["UnLockGeppo"] = Toggles.UnLockGeppo.Value
        Save()
    elseif Toggles.UnLockGeppo.Value == false then
        getgenv().SettingSave["Raid"]["UnLockGeppo"] = Toggles.UnLockGeppo.Value
        Save()
    end
end)

Fpstab:AddSlider('SelectFps', {
    Text = 'SelectFps',

    Default = getgenv().SettingSave["Fps"]["SelectFps"],
    Min = 1,
    Max = 500,
    Rounding = 0,

    Compact = false,
})
Options.SelectFps:OnChanged(function()
    getgenv().SettingSave["Fps"]["SelectFps"] = Options.SelectFps.Value
    Save()
end)
Fpstab:AddToggle('FpsLock', {
    Text = 'FpsLock',
    Default = getgenv().SettingSave["Fps"]["LockFps"], 
    Save()
})
Toggles.FpsLock:OnChanged(function()
    if Toggles.FpsLock.Value == true then
        getgenv().SettingSave["Fps"]["FpsLock"] = true
        Save()
    elseif Toggles.FpsLock.Value == false then
        getgenv().SettingSave["Fps"]["FpsLock"] = false
        Save()
    end
    if Toggles.FpsLock.Value == true then
		setfpscap(getgenv().SettingSave["Fps"]["SelectFps"])
	else
		setfpscap(120)
	end
end)
Fpstab:AddToggle('WhiteScreen', {
    Text = 'WhiteScreen',
    Default = getgenv().SettingSave["Fps"]["WhiteScreen"], 
    Save()
})
Toggles.WhiteScreen:OnChanged(function()
    if Toggles.WhiteScreen.Value == true then
        getgenv().SettingSave["Fps"]["WhiteScreen"] = true
        Save()
    elseif Toggles.WhiteScreen.Value == false then
        getgenv().SettingSave["Fps"]["WhiteScreen"] = false
        Save()
    end
end)


local ScreenGui = Instance.new("ScreenGui")
local TextLabel = Instance.new("TextLabel")
local UIGradient = Instance.new("UIGradient")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

TextLabel.Parent = ScreenGui
TextLabel.Active = true
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.Position = UDim2.new(0.424812019, 0, 0, 0)
TextLabel.Size = UDim2.new(0, 200, 0, 50)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = "Server Time"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 25.000
TextLabel.TextTransparency = 1
TextLabel.TextStrokeTransparency = 300.000

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(255, 72, 72)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))}
UIGradient.Parent = TextLabel

local function UpdateTime()
    local GameTime = math.floor(workspace.DistributedGameTime+0.5)
    local Hour = math.floor(GameTime/(60^2))%24
    local Minute = math.floor(GameTime/(60^1))%60
    local Second = math.floor(GameTime/(60^0))%60
    TextLabel.Text = ("Hour : "..Hour.." Minute : "..Minute.." Second : "..Second)
end

spawn(function()
    while true do
        UpdateTime()
        game:GetService("RunService").RenderStepped:Wait()
    end
end)
Servertime:AddToggle('Servertime', {
    Text = 'Servertime',
    Default = false, 
})
Toggles.Servertime:OnChanged(function()
    if Toggles.Servertime.Value == true then
        TextLabel.TextTransparency = 0
    elseif Toggles.Servertime.Value == false then
        TextLabel.TextTransparency = 1
    end
end)

CombatSection:AddButton("Black Leg", function()
    local args = {
        [1] = "BuyBlackLeg"
    }

    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Electro", function()
    local args = {
        [1] = "BuyElectro"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Fishman Karate", function()
    local args = {
        [1] = "BuyFishmanKarate"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Dragon Claw", function()
    local args = {
        [1] = "BlackbeardReward",
        [2] = "DragonClaw",
        [3] = "1"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    local args = {
        [1] = "BlackbeardReward",
        [2] = "DragonClaw",
        [3] = "2"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Super Human", function()
    local args = {
        [1] = "BuySuperhuman"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Death Step", function()
    local args = {
        [1] = "BuyDeathStep"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Sharkman Karate", function()
    local args = {
        [1] = "BuySharkmanKarate",
        [2] = true
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))

    local args = {
        [1] = "BuySharkmanKarate"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Electric Claw", function()
    local args = {
        [1] = "BuyElectricClaw",
        [2] = true
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    local args = {
        [1] = "BuyElectricClaw"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("Dragon Talon", function()
    local args = {
        [1] = "BuyDragonTalon"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
CombatSection:AddButton("God Human", function()
    local args = {
        [1] = "BuyGodhuman"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Kabucha",function()
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Slingshot",
        [3] = "1"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Slingshot",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Slingshot"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Musket",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Musket"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Flintlock",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Flintlock"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Refined Slingshot",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Refined Slingshot"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Refined Slingshot",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Refined Slingshot"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Refined Flintlock",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Refined Flintlock"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Cannon",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Cannon"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
GunSection:AddButton("Bizarre Rifle",function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Ectoplasm","Buy",1,1)
end)



SwordSection:AddButton("Katana",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Katana"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Cutlass",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Cutlass"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Dual Katana",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Dual Katana"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Iron Mace",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Iron Mace"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Soul Cane",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Soul Cane"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Dual-Deaded Blade",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Dual-Deaded Blade"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Bisento",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Bisento"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Triple Katana",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Triple Katana"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
SwordSection:AddButton("Pipe",function()
    local args = {
        [1] = "BuyItem",
        [2] = "Pipe"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
AbilitySex:AddButton("Haki",function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki","Buso")
end)
AbilitySex:AddButton("Geppo",function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki","Geppo")
end)
AbilitySex:AddButton("Soru",function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki","Soru")
end)
AbilitySex:AddButton("KenHaki",function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("KenTalk","Buy")
end)

AccessorySex:AddButton("Black Cape",function()
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem","Black Cape")
end)
AccessorySex:AddButton("Toemo Ring",function()
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem","Tomoe Ring")
end)
AccessorySex:AddButton("Swordsman Hat",function()
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem","Swordsman Hat")
end)
FragmentSection:AddButton("Micro Ship (1000 Fragments)", function()
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Microchip",
        [3] = "1"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Microchip",
        [3] = "2"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
FragmentSection:AddButton("Reset Stats (2500 Fragments)", function()
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Refund",
        [3] = "1"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Refund",
        [3] = "2"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)
FragmentSection:AddButton("Random Race (3000 Fragments)", function()
    local args = {
        [1] = "BlackbeardReward",
        [2] = "Reroll",
        [3] = math.random(1,4)
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end)

StealBoatSection:AddDropdown('SelectedBoat', {
    Values = Refresh("Boat"),
    Default = 1,
    Multi = false,
    Text = 'SelectedBoat',
})

Options.SelectedBoat:OnChanged(function()
    local bosslist = Refresh("Boat")
    Options.SelectedBoat.Values = bosslist
    Options.SelectedBoat:SetValues()
	_G.BoatSelected = Options.SelectedBoat.Value
end)
StealBoatSection:AddButton("Steel",function()
    LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Boats[_G.BoatSelected].VehicleSeat.CFrame
end)

FruitTab:AddToggle('DevilFruitRandom', {
    Text = 'Auto Random Fruit',
    Default = getgenv().SettingSave["Fruit"]["DevilFruitRandom"], 
})
Toggles.DevilFruitRandom:OnChanged(function()
    if Toggles.DevilFruitRandom.Value == true then
        getgenv().SettingSave["Fruit"]["DevilFruitRandom"] = true
        Save()
    elseif Toggles.DevilFruitRandom.Value == false then
        getgenv().SettingSave["Fruit"]["DevilFruitRandom"] = false
        Save()
    end
end)
FruitTab:AddToggle('DevilFruitStore', {
    Text = 'Auto Store Fruit',
    Default = getgenv().SettingSave["Fruit"]["DevilFruitStore"], 
})
Toggles.DevilFruitStore:OnChanged(function()
    if Toggles.DevilFruitStore.Value == true then
        getgenv().SettingSave["Fruit"]["DevilFruitStore"] = true
        Save()
    elseif Toggles.DevilFruitStore.Value == false then
        getgenv().SettingSave["Fruit"]["DevilFruitStore"] = false
        Save()
    end
end)

FruitTab:AddDropdown('SelectFruitSniper', {
    Values = FruitAll,
    Default = getgenv().SettingSave["Fruit"]["SelectFruitSniper"], 
    Multi = false,
    Text = 'Selected Fruit',
    Tooltip = 'This is a tooltip', 
})
Options.SelectFruitSniper:OnChanged(function()
    getgenv().SettingSave["Fruit"]["SelectFruitSniper"] = Options.SelectFruitSniper.Value
    Save()
end)
FruitTab:AddToggle('SniperFruit', {
    Text = 'Auto Sniper Fruit',
    Default = getgenv().SettingSave["Fruit"]["AutoSniperFruit"], 
})
Toggles.SniperFruit:OnChanged(function()
    if Toggles.SniperFruit.Value == true then
        getgenv().SettingSave["Fruit"]["AutoSniperFruit"] = true
        Save()
    elseif Toggles.SniperFruit.Value == false then
        getgenv().SettingSave["Fruit"]["AutoSniperFruit"] = false
        Save()
    end
end)

Opentab:AddButton("Open Awakening", function()
	local args = {
		[1] = "AwakeningChanger",
		[2] = "Check"
	}

	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
	LocalPlayer.PlayerGui.Main.AwakeningToggler.Visible = true
end)
Opentab:AddButton("Open Inventory", function()
	local args = {
		[1] = "getInventoryWeapons"
	}
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
	LocalPlayer.PlayerGui.Main.Inventory.Visible = true
end)

Opentab:AddButton("Open Fruit Inventory", function()
	game.Players.localPlayer.PlayerGui.Main.FruitInventory.Visible = true
end)
Opentab:AddButton("Open Devil Shop", function()
	local args = {
		[1] = "GetFruits"
	}
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
	LocalPlayer.PlayerGui.Main.FruitShop.Visible = true
end)
Opentab:AddButton("Open Color Haki", function()
	LocalPlayer.PlayerGui.Main.Colors.Visible = true
end)
Opentab:AddButton("Open Title Name", function()
	local args = {
		[1] = "getTitles"
	}
	game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
	LocalPlayer.PlayerGui.Main.Titles.Visible = true
end)

getgenv().UseFarm = true


function tpremote(pos)
    local args = {
        [1] = "requestEntrance",
        [2] = pos
    }
    
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end
function check(mag,noy,noyinmag,maginnoy)
    if type(mag) == "number" and type(noy) == "number" and type(noyinmag) == "number" and type(maginnoy) == "number" then
        if mag >= noy and noyinmag <= maginnoy then
            return true
        end
        return false
    end
    return false
end

function checkintp(table)
    local Level = LocalPlayer.Data.Level.Value
    if type(table) == "table" then
        if table[1] == "Mon" then
            if (check(Level,375,Level,450) or check(Level,450,Level,451)) and Distance(table[2]) > 50000 and Distance(Vector3.new(61163.8515625, 11.6796875, 1819.7841796875)) > 50000 then
                tpremote(Vector3.new(61163.8515625, 11.6796875, 1819.7841796875))
                wait(1)
            elseif check(Level,450,Level,475) and Distance(table[2]) > 4000 and Distance(game:GetService("Workspace").Map.SkyArea1.PathwayTemple.ExitPoint.Position) > 4000 then
                tpremote(game:GetService("Workspace").Map.SkyArea1.PathwayTemple.ExitPoint.Position)
                SetSpawn()
                wait(1)
            -- elseif check(Level,475,Level,525) and Distance(table[2]) > 3000 then
            --     tpremote(Vector3.new(-4627.81, 848.035, -1706.74))
            --     wait(1)
            elseif check(Level,1250,Level,1349) and Distance(table[2]) > 50000 then
                tpremote(game:GetService("Workspace").Map.GhostShip.Teleport.Position)
                wait(.5)
                SetSpawn()
                wait(1)
            elseif Level >= 1350 and Distance(Vector3.new(920.4775390625, 154.9010009765625, 32838.96484375)) <= 1000 then
                tpremote(Vector3.new(-6508.55810546875, 89.03499603271484, -132.83953857421875))
                wait(1)
            end
        elseif table[1] == "Quest" then
            if check(Level,375,Level,450) and Distance(table[2]) > 50000 and Distance(Vector3.new(61163.8515625, 11.6796875, 1819.7841796875)) > 50000 then
                tpremote(Vector3.new(61163.8515625, 11.6796875, 1819.7841796875))
                wait(1)
            elseif check(Level,450,Level,475) and Distance(table[2]) > 4000 and Distance(game:GetService("Workspace").Map.SkyArea1.PathwayTemple.ExitPoint.Position) > 4000 then
                tpremote(game:GetService("Workspace").Map.SkyArea1.PathwayTemple.ExitPoint.Position)
                SetSpawn()
                wait(1)
            -- elseif check(Level,475,Level,525) and Distance(table[2]) > 4000 then
            --     tpremote(Vector3.new(-4627.81, 848.035, -1706.74))

            --     wait(1)
            elseif check(Level,1250,Level,1349) and Distance(table[2]) > 50000 then
                tpremote(game:GetService("Workspace").Map.GhostShip.Teleport.Position)
                wait(.5)
                SetSpawn()
                wait(1)
            elseif Level >= 1350 and Distance(Vector3.new(920.4775390625, 154.9010009765625, 32838.96484375)) <= 1000 then
                tpremote(Vector3.new(-6508.55810546875, 89.03499603271484, -132.83953857421875))
                wait(1)
            end
        end
    end
end

function checknpclv(toh)
    if type(toh) ~= "table" then
        return "not table"
    end
    
    getgenv().npc = toh[1]
    getgenv().lv = toh[2]

    if FirstSea and lv >= 700 then
        lv = 699
    elseif SecondSea and lv >= 1525 then
        lv = 1524
    elseif ThirdSea and lv >= 2400 then
        lv = 2399
    end
    
    for i,v in pairs(GuideModule.Data.NPCList) do
        if v.NPCName:lower() == npc then
            if lv >= v.Levels[2] then
                return "truef"
            else
                return "trues"
            end
        end
    end
end

function PastQuest(quest)

    if type(quest) ~= "table" then
        return nil
    end

    local Mob = quest[1]
    local Npc = quest[2]

    local lv = LocalPlayer.Data.Level.Value
    for i,v in pairs(GuideModule.Data.NPCList) do
        if v.NPCName:lower() == Npc then
            if lv >= v.Levels[2] then
                return v.Levels[1]
            end
        end
    end

end

function IsThereMob(Mob)

    local Mon = {}
	for i,v in pairs(GetAllMob()) do
		if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
			if Mob and v.Name:lower():sub(1,#Mob) == Mob:lower() then
				table.insert(Mon,v)
			end
		end
	end
	if #Mon < 1 then
        return false
    else
        return true
	end
end



function KillMob(method)

    local Mob = method[1]
    local spa = method[2]

    local Persen = getgenv().SettingSave["Mastery"]["Healthpercen"]
    local MastLock = getgenv().SettingSave["Mastery"]["lockmastery"]
    
    if method[3] == "AutoFarmLevel" then
        for i,v in pairs(GetAllMob()) do
            if Mob and v.Name:lower():sub(1,#Mob) == Mob:lower() and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                repeat wait()

                    if setspawnat(spa) == false then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                        setspawnat(spa)
                    end

                    checkintp({"Mon",v.HumanoidRootPart.Position})

                    getgenv().Use = true
                    BringMob(v)
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.Humanoid:ChangeState(11)
                    v.Humanoid:ChangeState(14)
                    if getgenv().SettingSave["SettingsFarm"]["Weapon"] ~= nil then
                        EquipWeapon(tostring(getgenv().SettingSave["SettingsFarm"]["Weapon"]))
                    else
                        EquipWeapon("Melee")
                    end
                    totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,30,0))
                    pcall(function()
                        Rigc.activeController:attack()
                    end)
                    v.HumanoidRootPart.CanCollide = false
                    v.HumanoidRootPart.Size = Vector3.new(70, 70, 70)
                    if sethiddenproperty then
                        sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
                    end
                until 
                not getgenv().SettingSave["Main"]["AutoFarmLevel"] or
                v.Humanoid.Health <= 0 or 
                not v.Parent or 
                not getgenv().UseFarm
            end
        end
    elseif method[3] == "AutoFarmFruitMastery" then
        for i,v in pairs(GetAllMob()) do
            if Mob and v.Name:lower():sub(1,#Mob) == Mob:lower() and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                
                repeat wait()

                    local HealthMin = v.Humanoid.MaxHealth * Persen / 100

                    if setspawnat(spa) == false then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                        setspawnat(spa)
                    end

                    checkintp({"Mon",v.HumanoidRootPart.Position})

                    if v.Humanoid.Health >= HealthMin then
                        getgenv().UseFast = true
                        getgenv().UseSkillMasteryDevilFruit = false

                        if getgenv().SettingSave["SettingsFarm"]["Weapon"] ~= nil then
                            EquipWeapon(tostring(getgenv().SettingSave["SettingsFarm"]["Weapon"]))
                        else
                            EquipWeapon("Melee")
                        end
                        pcall(function()
                            Rigc.activeController:attack()
                        end)
                    else
                        getgenv().UseFast = false
                        getgenv().UseSkillMasteryDevilFruit = true
                        EquipWeapon("Blox Fruit")
                        getgenv().PositionSkillMasteryDevilFruit = v.HumanoidRootPart.Position

                        if checkcoldown(Plr.Data.DevilFruit.Value,"Z") and getgenv().SettingSave["Mastery"]["Z"] then
                            if game.Players.LocalPlayer.Data.DevilFruit.Value == "Venom-Venom" then
                                useskill("Z",4)
                            else
                                useskill("Z",0)
                            end
                            LocalPlayer.Character[LocalPlayer.Data.DevilFruit.Value].RemoteEvent:FireServer(v.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid:FindFirstChild(""):InvokeServer("Z",v.HumanoidRootPart.Position)
                        end
                        if checkcoldown(Plr.Data.DevilFruit.Value,"X") and getgenv().SettingSave["Mastery"]["X"] then
                            useskill("X",0)
                            LocalPlayer.Character[LocalPlayer.Data.DevilFruit.Value].RemoteEvent:FireServer(v.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid:FindFirstChild(""):InvokeServer("X",v.HumanoidRootPart.Position)
                        end
                        if checkcoldown(game.Players.LocalPlayer.Data.DevilFruit.Value,"C") and getgenv().SettingSave["Mastery"]["C"] then
                            if game.Players.LocalPlayer.Data.DevilFruit.Value == "Dragon-Dragon" then
                                useskill("C",4)
                            else
                                useskill("C",0)
                            end
                            LocalPlayer.Character[LocalPlayer.Data.DevilFruit.Value].RemoteEvent:FireServer(v.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid:FindFirstChild(""):InvokeServer("V",v.HumanoidRootPart.Position)
                        end
                        if checkcoldown(Plr.Data.DevilFruit.Value,"V") and getgenv().SettingSave["Mastery"]["V"] then
                            useskill("V",0)
                            LocalPlayer.Character[LocalPlayer.Data.DevilFruit.Value].RemoteEvent:FireServer(v.HumanoidRootPart.Position)
                            LocalPlayer.Character.Humanoid:FindFirstChild(""):InvokeServer("Z",v.HumanoidRootPart.Position)
                        end

                        

                    end

                    totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,30,0))

                    getgenv().Use = true
                    BringMob(v)
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.Humanoid:ChangeState(11)
                    v.Humanoid:ChangeState(14)
                    v.HumanoidRootPart.CanCollide = false
                    v.HumanoidRootPart.Size = Vector3.new(70, 70, 70)
                    if sethiddenproperty then
                        sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
                    end
                until 
                not getgenv().SettingSave["Mastery"]["FruitMastery"] or
                v.Humanoid.Health <= 0 or 
                not v.Parent or 
                not getgenv().UseFarm
            end
        end
    elseif method[3] == "AutoFarmGunMastery" then
        for i,v in pairs(GetAllMob()) do
            if Mob and v.Name:lower():sub(1,#Mob) == Mob:lower() and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then

                repeat wait()

                    local HealthMin = v.Humanoid.MaxHealth * Persen / 100

                    _G.AimBotPosition = v.HumanoidRootPart.Position
                    _G.AimBotRootPart = v.HumanoidRootPart

                    if setspawnat(spa) == false then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                        setspawnat(spa)
                    end

                    checkintp({"Mon",v.HumanoidRootPart.Position})

                    if v.Humanoid.Health >= HealthMin then
                        getgenv().UseFast = true

                        totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,30,0))

                        if getgenv().SettingSave["SettingsFarm"]["Weapon"] ~= nil then
                            EquipWeapon(tostring(getgenv().SettingSave["SettingsFarm"]["Weapon"]))
                        else
                            EquipWeapon("Melee")
                        end
                        pcall(function()
                            Rigc.activeController:attack()
                        end)
                    else
                        getgenv().UseFast = false
                        EquipWeapon("Gun")
                        game:GetService'VirtualUser':CaptureController()
                        game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                        if checkcoldown(GetToolFromTip("Gun",true),"Z") and getgenv().SettingSave["Mastery"]["Z"] then
                            useskill("Z",0)
                        end
                        if checkcoldown(GetToolFromTip("Gun",true),"X") and getgenv().SettingSave["Mastery"]["X"] then
                            useskill("X",0)
                        end
                        if checkcoldown(GetToolFromTip("Gun",true),"C") and getgenv().SettingSave["Mastery"]["C"] then
                            useskill("C",0)
                        end
                        if checkcoldown(GetToolFromTip("Gun",true),"V") and getgenv().SettingSave["Mastery"]["V"] then
                            useskill("V",0)
                        end

                        totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,30,0))

                    end

                    getgenv().Use = true
                    BringMob(v)
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.Humanoid:ChangeState(11)
                    v.Humanoid:ChangeState(14)
                    v.HumanoidRootPart.CanCollide = false
                    v.HumanoidRootPart.Size = Vector3.new(70, 70, 70)
                    if sethiddenproperty then
                        sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
                    end
                until 
                not getgenv().SettingSave["Mastery"]["GunMastery"] or
                v.Humanoid.Health <= 0 or 
                not v.Parent or 
                not getgenv().UseFarm
            end
        end
    end
end
function findmob(Name,quest,requirelevel)
    if game:GetService("Workspace").Enemies:FindFirstChild(Name) and game:GetService("Workspace").Enemies[Name]:FindFirstChild("Humanoid") then
        for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
            if v.Name == Name and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                return v 
            end
        end
        -- return game:GetService("Workspace").Enemies:FindFirstChild(Name)
    end
    if game:GetService("ReplicatedStorage"):FindFirstChild(Name) and game:GetService("ReplicatedStorage")[Name]:FindFirstChild("Humanoid") and game:GetService("ReplicatedStorage")[Name].Humanoid.Health > 0 then
        return game:GetService("ReplicatedStorage"):FindFirstChild(Name)
    end
    return "Undefind"
end

function checkalivequest()
    return game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible 
end
function checkQuest(Name)
    if MobData[Name].QuestName ~= "NoQuest" and MobData[Name].QuestIndex ~= "NoQuest" and MobData[Name].QuestPosition ~= "NoQuest" then
        if checkalivequest() then
            if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestReward.Title.Text == MobData[Name].Reward then
                return true
            else
                cancelquest()
                return false
            end
        else

            if setspawnat(MobData[Name].SpawnPoint) == false then
                setspawnat(MobData[Name].SpawnPoint)
            end

            repeat task.wait()
                totarget(CFrame.new(MobData[Name].QuestPosition))
            until Distance(CFrame.new(MobData[Name].QuestPosition).Position) <= 120
            wait(1)
            if Distance(CFrame.new(MobData[Name].QuestPosition).Position) <= 50 then
                RunremoteQuest(MobData[Name].QuestName,MobData[Name].QuestIndex)
                repeat wait() until LocalPlayer.PlayerGui.Main.Quest.Visible
            end
        end
        repeat task.wait() until checkalivequest()
    else
        return false
    end
end

function IsQuest(bool)
    return game.Players.LocalPlayer.PlayerGui.Main.Quest.Visible == (bool or true)
end

getgenv().FarmingType = false
getgenv().UseFast = false
getgenv().CFrameQuest = nil

spawn(function()
	while wait() do
		if getgenv().SettingSave["Main"]["AutoFarmLevel"] and Toggles.Farm1.Value then
			pcall(function()

                local NowQuest = IsQuest(true)
                local Q = Checklevel()

                if not NowQuest and Q.Index > 1 and FarmingType then
                    Q = Checklevel(PastQuest({Q.Mob,GuideModule.Data.NPCList}))
                end
                if LocalPlayer.Data.Level.Value >= 475 and LocalPlayer.Data.Level.Value <= 525 then
                    Q = Checklevel(PastQuest({Q.Mob,GuideModule.Data.NPCList}))
                end

                if not NowQuest and Toggles.Farm1.Value then
                    getgenv().Use = false
                    
                    for i,v in pairs(GuideModule.Data.NPCList) do
                        if v.NPCName == GuideModule.Data.LastClosestNPC then
                            if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then

                                getgenv().CFrameQuest = CFrame.new(v.Position)

                                if v.NPCName == "Mole" and #GuideModule.Data.LastClosestNPC > 1 then
                                    if LocalPlayer.Data.Level.Value >= 450 and LocalPlayer.Data.Level.Value <= 474 then
                                        getgenv().CFrameQuest = CFrame.new(-4722, 845, -1954)
                                    elseif LocalPlayer.Data.Level.Value >= 475 and LocalPlayer.Data.Level.Value <= 524 then
                                        getgenv().CFrameQuest = CFrame.new(-7862, 5546, -380)
                                    end
                                end
                                
                                if setspawnat(Q.Spawn) == false then
                                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                                    setspawnat(Q.Spawn)
                                end
    
                                checkintp({"Quest",CFrameQuest.Position})
                                repeat task.wait()
                                    totarget(CFrameQuest)
                                until Distance(CFrameQuest.Position) <= 120
                                wait(1)
                                if Distance(CFrameQuest.Position) <= 50 then
                                    RunremoteQuest(Q.Name,Q.Value)
                                    repeat wait() until LocalPlayer.PlayerGui.Main.Quest.Visible
                                end
                                
                            end
                        end
                    end

                    if getgenv().SettingSave["Main"]["DoubleQuest"] then
                        getgenv().FarmingType = not getgenv().FarmingType
                    end
				end

                if LocalPlayer.PlayerGui.Main.Quest.Visible and Toggles.Farm1.Value then
					Q.Mob = GetMobName()
					
					
                    if not IsThereMob(Q.Mob) then
                        getgenv().UseFast = false
                        if checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "truef" then
                            totarget(Q.MonSecondPos)
                        elseif checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "trues" then
                            totarget(Q.MonFirstPos)
                        end
                    end

                    getgenv().UseFast = true

                    KillMob({Q.Mob,Q.Spawn,"AutoFarmLevel"})

				end
            
			end)
		end
	end
end)

spawn(function()
    while task.wait() do
        if getgenv().SettingSave["Mastery"]["FruitMastery"] then


            local NowQuest = IsQuest(true)
            getgenv().Q = Checklevel()

            if not NowQuest then
                getgenv().Use = false

                for i,v in pairs(GuideModule.Data.NPCList) do
                    if v.NPCName == GuideModule.Data.LastClosestNPC then
                        if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            getgenv().CFrameQuest = CFrame.new(v.Position)
                            
                            if setspawnat(Q.Spawn) == false then
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                                setspawnat(Q.Spawn)
                            end

                            checkintp({"Quest",CFrameQuest.Position})

							repeat task.wait()
								totarget(CFrameQuest)
							until Distance(CFrameQuest.Position) <= 120
                            wait(1)
							if Distance(CFrameQuest.Position) <= 50 then
								RunremoteQuest(Q.Name,Q.Value)
								repeat wait() until LocalPlayer.PlayerGui.Main.Quest.Visible
							end
                        end
                    end
                end
            end

            if LocalPlayer.PlayerGui.Main.Quest.Visible then
                Q.Mob = GetMobName()

                if not IsThereMob(Q.Mob) then
                    getgenv().UseFast = false
                    if checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "truef" then
                        totarget(Q.MonSecondPos)
                    elseif checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "trues" then
                        totarget(Q.MonFirstPos)
                    end
                end

                getgenv().UseFast = true

                KillMob({Q.Mob,Q.Spawn,"AutoFarmFruitMastery"})
            end


        end
    end
end)
spawn(function()
    while task.wait() do
        if getgenv().SettingSave["Mastery"]["GunMastery"] then


            local NowQuest = IsQuest(true)
            getgenv().Q = Checklevel()

            
            if not NowQuest then
                getgenv().Use = false

                for i,v in pairs(GuideModule.Data.NPCList) do
                    if v.NPCName == GuideModule.Data.LastClosestNPC then
                        if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            getgenv().CFrameQuest = CFrame.new(v.Position)
                            
                            if setspawnat(Q.Spawn) == false then
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                                setspawnat(Q.Spawn)
                            end

                            checkintp({"Quest",CFrameQuest.Position})

							repeat task.wait()
								totarget(CFrameQuest)
							until Distance(CFrameQuest.Position) <= 120
                            wait(1)
							if Distance(CFrameQuest.Position) <= 50 then
								RunremoteQuest(Q.Name,Q.Value)
								repeat wait() until LocalPlayer.PlayerGui.Main.Quest.Visible
							end
                        end
                    end
                end
            end

            if LocalPlayer.PlayerGui.Main.Quest.Visible then
                Q.Mob = GetMobName()

                if not IsThereMob(Q.Mob) then
                    getgenv().UseFast = false
                    if checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "truef" then
                        totarget(Q.MonSecondPos)
                    elseif checknpclv({GuideModule.Data.NPCList,Q.Lv}) == "trues" then
                        totarget(Q.MonFirstPos)
                    end
                end

                getgenv().UseFast = true

                KillMob({Q.Mob,Q.Spawn,"AutoFarmGunMastery"})
            end

        end
    end
end)

function findmobs(MobName)
    for i,v in pairs(GetAllMob()) do
        if v.Name == MobName then
            return true
        end
    end
    return false
end
spawn(function()
    while task.wait() do
        if getgenv().SettingSave["Boss"]["AutoKillBoss"] then
            pcall(function()
                
                if Options.SelectedBoss.Value == "Thunder God [Lv. 575] [Boss]" or Options.SelectedBoss.Value == "Wysper [Lv. 500] [Boss]" then
                    if Distance(Vector3.new(-7862, 5545, -381)) > 3000 then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(-7862, 5545, -381))
                        wait(2)
                    end
                elseif Options.SelectedBoss.Value == "Fishman Lord [Lv. 425] [Boss]" then
                    if Distance(Vector3.new(61188, 18, 1576)) > 30000 then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(61163.8515625, 11.6796875, 1819.7841796875))
                        wait(2)
                    end
                elseif Options.SelectedBoss.Value == "Beautiful Pirate [Lv. 1950] [Boss]" then
                    if Distance(Vector3.new(5314, 23, -85)) > 1000 then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656))
                        wait(2)
                    end
                elseif Options.SelectedBoss.Value == "Warden [Lv. 220] [Boss]" or  Options.SelectedBoss.Value == "Chief Warden [Lv. 230] [Boss]" or  Options.SelectedBoss.Value == "Swan [Lv. 240] [Boss]" then
                    if Distance(Vector3.new(5587, 65, 1023)) > 5000 then 
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(3864.6884765625, 6.736950397491455, -1926.214111328125))
                        wait(2)
                    end
                end
    
                if getgenv().SettingSave["Boss"]['AutoBossQuest'] then
                    if not checkQuest(Options.SelectedBoss.Value) then
                        checkQuest(Options.SelectedBoss.Value)
                    end
                end
    
                if findmobs(Options.SelectedBoss.Value) then

                    for i,v in pairs(GetAllMob()) do
                        if v.Name == Options.SelectedBoss.Value and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                            repeat wait()

                                if MobData[Options.SelectedBoss.Value].SpawnPoint ~= "NoQuest" then
                                    if setspawnat(MobData[Options.SelectedBoss.Value].SpawnPoint) == false then
                                        setspawnat(MobData[Options.SelectedBoss.Value].SpawnPoint)
                                    end
                                end
    
                                getgenv().UseFast = true
    
    
                                pcall(function()
                                    Rigc.activeController:attack()
                                end)
                                if LocalPlayer.Character then
                                    EquipWeapon(getgenv().SettingSave["SettingsFarm"]["Weapon"])
                                end
                                v.HumanoidRootPart.Size = Vector3.new(70,70,70)
                                v.HumanoidRootPart.CanCollide = false
    
                                totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,15,0))
                            until not getgenv().SettingSave["Boss"]["AutoKillBoss"] or v.Humanoid.Health < 1
                        end
                    end
                else
                    getgenv().UseFast = false
                    totarget(CFrame.new(MobData[Options.SelectedBoss.Value].MonsterPosition))
                    task.wait(0.8)
                    if not findmobs(Options.SelectedBoss.Value) and getgenv().SettingSave["Boss"]["HopServer"] then
                        Hop()
                    end
                end
            end)
        end
    end
end)
local NextedBoss = 1
spawn(function()
    while task.wait() do
        if getgenv().SettingSave["Boss"]["AutoKillAllBoss"] then
            local GetBoss = Refresh("AllBoss")
            local NameAllBoss = GetBoss[NextedBoss]
            if NameAllBoss == nil then
                getgenv().notboss = true
            end
            if NameAllBoss == "Don Swan [Lv. 1000] [Boss]" and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","1") then
                NameAllBoss = GetBoss[NextedBoss+1]
            end
            if NameAllBoss == "Thunder God [Lv. 575] [Boss]" or NameAllBoss == "Wysper [Lv. 500] [Boss]" then
                if Distance(Vector3.new(-7862, 5545, -381)) > 3000 then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(-7862, 5545, -381))
                    wait(2)
                end
            elseif NameAllBoss == "Fishman Lord [Lv. 425] [Boss]" then
                if Distance(Vector3.new(61188, 18, 1576)) > 30000 then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(61163.8515625, 11.6796875, 1819.7841796875))
                    wait(2)
                end
            elseif NameAllBoss == "Beautiful Pirate [Lv. 1950] [Boss]" then
                if Distance(Vector3.new(5314, 23, -85)) > 1000 then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656))
                    wait(2)
                end
            elseif NameAllBoss == "Warden [Lv. 220] [Boss]" or  NameAllBoss == "Chief Warden [Lv. 230] [Boss]" or  NameAllBoss == "Swan [Lv. 240] [Boss]" then
                if Distance(Vector3.new(5587, 65, 1023)) > 5000 then 
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(3864.6884765625, 6.736950397491455, -1926.214111328125))
                    wait(2)
                end
            end
            pcall(function()
                if getgenv().SettingSave["Boss"]['AutoBossQuest'] then
                    if not getgenv().notboss then
                        if not checkQuest(NameAllBoss) then
                            checkQuest(NameAllBoss)
                            print("r")
                        end
                    end
                end
                if not getgenv().notboss then
                    if findmobs(NameAllBoss) then
                        if MobData[NameAllBoss].SpawnPoint ~= "NoQuest" then
                            if setspawnat(MobData[NameAllBoss].SpawnPoint) == false then
                                setspawnat(MobData[NameAllBoss].SpawnPoint)
                            end
                        end

                        for i,v in pairs(GetAllMob()) do
                            if v.Name == NameAllBoss and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                repeat task.wait()
                                    getgenv().UseFast = true
            
            
                                    pcall(function()
                                        Rigc.activeController:attack()
                                    end)
                                    if LocalPlayer.Character then
                                        EquipWeapon(getgenv().SettingSave["SettingsFarm"]["Weapon"])
                                    end
                                    v.HumanoidRootPart.Size = Vector3.new(70,70,70)
                                    v.HumanoidRootPart.CanCollide = false
            
                                    totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,15,0))
                                until not getgenv().SettingSave["Boss"]["AutoKillAllBoss"] or v.Humanoid.Health < 1 or findmob(NameAllBoss) == "Undefind" 
                            end
                        end
                    else
                        getgenv().UseFast = false
                        totarget(CFrame.new(MobData[NameAllBoss].MonsterPosition))

                        if not findmobs(NameAllBoss) and getgenv().SettingSave["Boss"]["HopServer"] then
                            task.wait(0.8)
                            Hop()
                        end
                    end
                else
                    if getgenv().SettingSave["Boss"]["HopServer"] then
                        task.wait(0.8)
                        Hop()
                    end
                end
           end)
        end
    end
end)


spawn(function()
    while task.wait() do
        if getgenv().SettingSave["NextSea"]["AutoSecondSea"] then
            pcall(function()
                if LocalPlayer.Data.Level.Value >= 700 then

                    Toggles.Farm1.Value = false
                   
                    if checktonew() == "cango" then
                        Toggles.Farm1.Value = true
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelDressrosa")
                    elseif checktonew() == "TalkedDetective" then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack({[1] = "DressrosaQuestProgress",[2] = "Detective"}))
                    elseif checktonew() == "UsedKey" then
                        if LocalPlayer.Backpack:FindFirstChild("Key") then
                            LocalPlayer.Character.Humanoid:EquipTool(LocalPlayer.Backpack:FindFirstChild("Key"))
                        elseif LocalPlayer.Character:FindFirstChild("Key") then
                            totarget(game:GetService("Workspace").Map.Ice.Door.CFrame)
                        else
                            local args = {
                                [1] = "DressrosaQuestProgress",
                                [2] = "Detective"
                            }
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                        end
                    elseif checktonew() == "KilledIceBoss" then
                        if setspawnat("Ice") then
                            getgenv().UseFast = true
                            for i,v in pairs(GetAllMob()) do
                                if v.Name == "Ice Admiral [Lv. 700] [Boss]" and v:FindFirstChild("HumanoidRootPart") then
                                    repeat task.wait()
                                        EquipWeapon(tostring(getgenv().SettingSave["SettingsFarm"]["Weapon"]))
                                        totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,50,0))
                                        pcall(function()
                                            Rigc.activeController:attack()
                                        end)
                                        v.HumanoidRootPart.CanCollide = false
                                        v.HumanoidRootPart.Size = Vector3.new(70, 70, 70)
                                    until not getgenv().SettingSave["NextSea"]["AutoSecondSea"] or checktonew() == "cango"
                                end
                            end
                        else
                            setspawnat("Ice")
                        end
                    end
                end
            end)
        end
    end
end)

function CheckBackpack(Name)
    if LocalPlayer.Backpack:FindFirstChild(Name) then
        return true
    end
    if LocalPlayer.Character:FindFirstChild(Name) then
        return true
    end
    return false
end

local TabelDevilFruitStore = {}
local TabelDevilFruitOpen = {}


for i,v in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventoryFruits")) do
    for i1,v1 in pairs(v) do
        if i1 == "Name" then 
            table.insert(TabelDevilFruitStore,v1)
        end
    end
end

for i,v in next,game.ReplicatedStorage:WaitForChild("Remotes").CommF_:InvokeServer("GetFruits") do
    if v.Price >= 1000000 then  
        table.insert(TabelDevilFruitOpen,v.Name)
    end
end

spawn(function()
    while wait() do
		if getgenv().SettingSave["NextSea"]["AutoThirdSea"] then
			if game:GetService("Players").LocalPlayer.Data.Level.Value >= 1500 and SecondSea then
				UseFarm = false
				if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ZQuestProgress").KilledIndraBoss == false then
					if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BartiloQuestProgress","Bartilo") == 3 then
						if not setspawnat("Bar") then
							setspawnat("Bar")
						end

                        if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("GetUnlockables").FlamingoAccess ~= nil then
                            if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ZQuestProgress","Check") == 0 then
                                if (CFrame.new(-1926.3221435547, 12.819851875305, 1738.3092041016).Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 10 then
                                    wait(1.1)
                                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ZQuestProgress","Begin")
                                else
                                    totarget(CFrame.new(-1926.3221435547, 12.819851875305, 1738.3092041016))
                                end
                                UseFastAttack = false
                                if game:GetService("Workspace").Enemies:FindFirstChild("rip_indra [Lv. 1500] [Boss]") then
                                    UseFastAttack = true
                                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                        if v.Name == "rip_indra [Lv. 1500] [Boss]" then
                                            repeat wait()
                                                pcall(function()
                                                    EquipWeapon("Melee")
                                                    totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,25,25))
                                                    Rigc.activeController:attack()
                                                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
                                                    sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                                                end)
                                            until getgenv().SettingSave["NextSea"]["AutoThirdSea"] == false or v.Humanoid.Health <= 0 or not v.Parent
                                        end
                                    end
                                elseif not game:GetService("Workspace").Enemies:FindFirstChild("rip_indra [Lv. 1500] [Boss]") and (CFrame.new(-26880.93359375, 22.848554611206, 473.18951416016).Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 1000 then
                                    UseFastAttack = false
                                    totarget(CFrame.new(-26880.93359375, 22.848554611206, 473.18951416016))
                                end
                            elseif game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ZQuestProgress","Check") ~= 0 then
                                if game:GetService("Workspace").Enemies:FindFirstChild("Don Swan [Lv. 1000] [Boss]") or game:GetService("ReplicatedStorage"):FindFirstChild("Don Swan [Lv. 1000] [Boss]") then
                                    if game:GetService("Workspace").Enemies:FindFirstChild("Don Swan [Lv. 1000] [Boss]") then
                                        UseFastAttack = true
                                        for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                            if v.Name == "Don Swan [Lv. 1000] [Boss]" then
                                                repeat wait()
                                                    pcall(function()
                                                        EquipWeapon("Melee")
                                                        totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,25,25))
                                                        Rigc.activeController:attack()
                                                        sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                                                    end)
                                                until getgenv().SettingSave["NextSea"]["AutoThirdSea"] == false or v.Humanoid.Health <= 0 or not v.Parent
                                            end
                                        end
                                    else
                                        UseFastAttack = false
                                        if (CFrame.new(2284.912109375, 15.537666320801, 905.48291015625).Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(2284.912109375, 15.537666320801, 905.48291015625))
                                            wait()
                                        end
                                        totarget(CFrame.new(2284.912109375, 15.537666320801, 905.48291015625))
                                    end
                                elseif getgenv().SettingSave["NextSea"]["AutoThirdSea"] and not game:GetService("Workspace").Enemies:FindFirstChild("Don Swan [Lv. 1000] [Boss]") and not game:GetService("ReplicatedStorage"):FindFirstChild("Don Swan [Lv. 1000] [Boss]") then
                                    Hop()
                                    UseFastAttack = false
                                elseif not getgenv().SettingSave["NextSea"]["AutoThirdSea"] and not game:GetService("Workspace").Enemies:FindFirstChild("Don Swan [Lv. 1000] [Boss]") and not game:GetService("ReplicatedStorage"):FindFirstChild("Don Swan [Lv. 1000] [Boss]") then
                                    if (CFrame.new(2284.912109375, 15.537666320801, 905.48291015625).Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(2284.912109375, 15.537666320801, 905.48291015625))
                                        wait()
                                    end
                                    totarget(CFrame.new(2284.912109375, 15.537666320801, 905.48291015625))
                                    UseFastAttack = false
                                end
                            end
                        end


					else
						UseFastAttack = true
						if LocalPlayer.Data.Level.Value >= 800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BartiloQuestProgress","Bartilo") == 0 then
							if string.find(LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Swan Pirates") and string.find(LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "50") and LocalPlayer.PlayerGui.Main.Quest.Visible == true then 
								if game.Workspace.Enemies:FindFirstChild("Swan Pirate [Lv. 775]") then
									for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
										if v.Name == "Swan Pirate [Lv. 775]" and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
											pcall(function()
												repeat wait()
                                                    EquipWeapon("Melee")
													v.HumanoidRootPart.CanCollide = false
													v.HumanoidRootPart.Size = Vector3.new(50, 50, 50)
													totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,15,0))
													BringMob(v)
													Rigc.activeController:attack()
													UseFastAttack = true
													if sethiddenproperty then
														sethiddenproperty(LocalPlayer, "SimulationRadius",999999999999999999999999999999)
													end
												until not v.Parent or v.Humanoid.Health <= 0 or getgenv().SettingSave["NextSea"]["AutoThirdSea"] == false or LocalPlayer.PlayerGui.Main.Quest.Visible == false
												UseFastAttack = false
											end)
										end
									end
								else
									repeat wait()
										totarget(CFrame.new(1057.92761, 137.614319, 1242.08069))
									until (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - CFrame.new(1057.92761, 137.614319, 1242.08069).Position).Magnitude <= .1
									-- totarget(CFrame.new(1057.92761, 137.614319, 1242.08069))
								end
							else
								repeat wait()
									totarget(CFrame.new(-456.28952, 73.0200958, 299.895966))
								until (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - CFrame.new(-456.28952, 73.0200958, 299.895966).Position).Magnitude <= .1
								-- totarget(CFrame.new(-456.28952, 73.0200958, 299.895966))
								wait(1.1)
								local args = {
									[1] = "StartQuest",
									[2] = "BartiloQuest",
									[3] = 1
								}
								game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
								repeat wait() until LocalPlayer.PlayerGui.Main.Quest.Visible
							end 
						elseif LocalPlayer.Data.Level.Value >= 800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BartiloQuestProgress","Bartilo") == 1 then
							if game.Workspace.Enemies:FindFirstChild("Jeremy [Lv. 850] [Boss]") then
								for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
									if v.Name == "Jeremy [Lv. 850] [Boss]" then
										repeat wait()
                                            EquipWeapon("Melee")
											if sethiddenproperty then
												sethiddenproperty(LocalPlayer, "SimulationRadius", 999999999999999999999999999999)
											end
											v.HumanoidRootPart.CanCollide = false
											v.HumanoidRootPart.Size = Vector3.new(50, 50, 50)
											totarget(v.HumanoidRootPart.CFrame * CFrame.new(0,15,0))
											Rigc.activeController:attack()
										until not v.Parent or v.Humanoid.Health <= 0 or getgenv().SettingSave["NextSea"]["AutoThirdSea"] == false
										UseFastAttack = false
									end
								end
							elseif game.ReplicatedStorage:FindFirstChild("Jeremy [Lv. 850] [Boss]") then
								repeat wait()
									totarget(CFrame.new(-456.28952, 73.0200958, 299.895966))
								until (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - CFrame.new(-456.28952, 73.0200958, 299.895966).Position).Magnitude <= .1
								-- totarget(CFrame.new(-456.28952, 73.0200958, 299.895966))
								wait(1.1)
								local args = {
									[1] = "BartiloQuestProgress",
									[2] = "Bartilo"
								}
								game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
								wait(1)
								repeat wait()
									totarget(CFrame.new(2099.88159, 448.931, 648.997375))
								until (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - CFrame.new(2099.88159, 448.931, 648.997375).Position).Magnitude <= .1
								-- totarget(CFrame.new(2099.88159, 448.931, 648.997375))
								wait(2)
							else
								totarget(CFrame.new(2099.88159, 448.931, 648.997375))
							end
						elseif game.Players.LocalPlayer.Data.Level.Value >= 800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BartiloQuestProgress","Bartilo") == 2 then
							repeat wait()
								totarget(CFrame.new(-1850.49329, 13.1789551, 1750.89685))
							until Distance(Vector3.new(-1850.49329, 13.1789551, 1750.89685)) <= 60
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate1,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1858.87305, 19.3777466, 1712.01807)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate2,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1803.94324, 16.5789185, 1750.89685)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate3,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1858.55835, 16.8604317, 1724.79541)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate4,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1869.54224, 15.987854, 1681.00659)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate5,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1800.0979, 16.4978027, 1684.52368)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate6,0)
							wait(1)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1819.26343, 14.795166, 1717.90625)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate7,0)
							wait(1)
                            firetouchinterest(LocalPlayer.Character.HumanoidRootPart,game:GetService("Workspace").Map.Dressrosa.BartiloPlates.Plate7,0)
							LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1813.51843, 14.8604736, 1724.79541)
						end
					end
				else
					game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
				end
			end
		end
    end
end)

spawn(function()
    while task.wait() do
        if getgenv().SettingSave["NextSea"]["AutoThirdSea"] then
            if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("GetUnlockables").FlamingoAccess == nil then
                if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","1") ~= 0 then
                    getgenv().FindFruit = true
                    for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
                        if string.find(v.Name, "Fruit") then
                            if v:IsA("Tool") then
                                v.Handle.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 50, 0)
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart,v.Handle,0)
                            end
                        end
                    end
        
                    for i,DevilFruitOpenDoor in pairs(TabelDevilFruitOpen) do
                        for i1,DevilFruitStore in pairs(TabelDevilFruitStore) do
                            if DevilFruitOpenDoor == DevilFruitStore and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("GetUnlockables").FlamingoAccess == nil then    
                                if not CheckBackpack(DevilFruitStore) then   
                                    Com("F_","LoadFruit",DevilFruitStore)
                                else
                                    Com("F_","TalkTrevor","1")
                                    Com("F_","TalkTrevor","2")
                                    Com("F_","TalkTrevor","3")
                                end
                            end
                        end
                    end
        
                    if CheckBackpack("Quake Fruit") or CheckBackpack("Human: Buddha Fruit") or CheckBackpack("String Fruit") or CheckBackpack("Bird: Phoenix Fruit") or CheckBackpack("Rumble Fruit") or CheckBackpack("Paw Fruit") or CheckBackpack("Gravity Fruit") or CheckBackpack("Dough Fruit") or CheckBackpack("Shadow Fruit") or CheckBackpack("Venom Fruit") or CheckBackpack("Control Fruit") or CheckBackpack("Dragon Fruit") or CheckBackpack("Quake Fruit") or CheckBackpack("Human: Buddha Fruit") or CheckBackpack("String Fruit") or CheckBackpack("Bird: Phoenix Fruit") or CheckBackpack("Rumble Fruit") or CheckBackpack("Paw Fruit") or CheckBackpack("Gravity Fruit") or CheckBackpack("Dough Fruit") or CheckBackpack("Shadow Fruit") or CheckBackpack("Venom Fruit") or CheckBackpack("Control Fruit") or CheckBackpack("Dragon Fruit") then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","1")
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","2")
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","3")
                        UseFastAttack = false
                    else
                        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                            if v:IsA("Tool") and string.find(v.Name," Fruit") and v:FindFirstChild("EatRemote") and not v:FindFirstChild("Backlist") then
                                LocalPlayer.Character.Humanoid:EquipTool(v)
                                wait()
                                local args = {
                                    [1] = "StoreFruit",
                                    [2] = getnamefruit(v.Name),
                                    [3] = game:GetService("Players").LocalPlayer.Character:FindFirstChild(v.Name)
                                }
                                if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)) == false then
                                    local blacklist = Instance.new("IntValue",v)
                                    blacklist.Name = "Backlist"
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)
spawn(function()
	while wait() do
		if getgenv().SettingSave["NextSea"]["AutoThirdSea"] and SecondSea and game:GetService("Players").LocalPlayer.Data.Level.Value >= 1500 then
			if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BartiloQuestProgress","Bartilo") == 3 then
                if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TalkTrevor","1") ~= 0 and getgenv().FindFruit then
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("GetUnlockables").FlamingoAccess == nil then
                        if not CheckBackpack("Quake Fruit") and not CheckBackpack("Human: Buddha Fruit") and not CheckBackpack("String Fruit") and not CheckBackpack("Bird: Phoenix Fruit") and not CheckBackpack("Rumble Fruit") and not CheckBackpack("Paw Fruit") and not CheckBackpack("Gravity Fruit") and not CheckBackpack("Dough Fruit") and not CheckBackpack("Shadow Fruit") and not CheckBackpack("Venom Fruit") and not CheckBackpack("Control Fruit") and not CheckBackpack("Dragon Fruit") and not CheckBackpack("Quake Fruit") and not CheckBackpack("Human: Buddha Fruit") and not CheckBackpack("String Fruit") and not CheckBackpack("Bird: Phoenix Fruit") and not CheckBackpack("Rumble Fruit") and not CheckBackpack("Paw Fruit") and not CheckBackpack("Gravity Fruit") and not CheckBackpack("Dough Fruit") and not CheckBackpack("Shadow Fruit") and not CheckBackpack("Venom Fruit") and not CheckBackpack("Control Fruit") and not CheckBackpack("Dragon Fruit") then
                            Hop()
                        else
                            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                if v:IsA("Tool") and string.find(v.Name," Fruit") and v:FindFirstChild("EatRemote") and not v:FindFirstChild("Backlist") then
                                    LocalPlayer.Character.Humanoid:EquipTool(v)
                                    wait()
                                    local args = {
                                        [1] = "StoreFruit",
                                        [2] = getnamefruit(v.Name),
                                        [3] = game:GetService("Players").LocalPlayer.Character:FindFirstChild(v.Name)
                                    }
                                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)) == false then
                                        local blacklist = Instance.new("IntValue",v)
                                        blacklist.Name = "Backlist"
                                    end
                                end
                            end
                        end
                    end
                end
			end
		end
	end
end)

function StatsUp(met,poi)
    local args = {
        [1] = "AddPoint",
        [2] = met,
        [3] = poi
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end

spawn(function()
    while task.wait() do
        pcall(function()
            if getgenv().SettingSave["Stats"]["Melee"] then
                StatsUp("Melee",getgenv().SettingSave["Stats"]["Points"])
            end 
            if getgenv().SettingSave["Stats"]["Defense"] then
                StatsUp("Defense",getgenv().SettingSave["Stats"]["Points"])
            end 
            if getgenv().SettingSave["Stats"]["Sword"] then
                StatsUp("Sword",getgenv().SettingSave["Stats"]["Points"])
            end 
            if getgenv().SettingSave["Stats"]["Gun"] then
                StatsUp("Gun",getgenv().SettingSave["Stats"]["Points"])
            end 
            if getgenv().SettingSave["Stats"]["Devil Fruit"] then
                StatsUp("Demon Fruit",getgenv().SettingSave["Stats"]["Points"])
            end
        end)
    end
end)


spawn(function()
    while wait() do
        if _G.TeleportPlayer then
            pcall(function()
                totarget(game.Players[_G.SelectedPlayer].Character.HumanoidRootPart.CFrame)
            end)
        end
        if _G.spectateplayer and game.Players:FindFirstChild(_G.SelectedPlayer) then
            pcall(function()
                game.Workspace.Camera.CameraSubject = game.Players:FindFirstChild(_G.SelectedPlayer).Character.Humanoid
            end)
        end
    end
end)

function retCFm()
    local a = math.random(0,50)
    local b = math.random(0,50)
    local c = math.random(0,50)
    return CFrame.new(a,b,c)
end

spawn(function()
    while wait() do
        if _G.AutoHuntQuest then
            pcall(function()
                if Plr.PlayerGui.Main.Quest.Visible then
                    if checkquestkillplr() then
                        if Distance(game.Players[checkquestkillplr()].Character.HumanoidRootPart.Position) < 100 then
                            EquipWeapon(getgenv().SettingSave["Player"]["SelectedKillType"])
                            _G.AimBotPosition = game.Players[checkquestkillplr()].Character.HumanoidRootPart.Position
                            _G.AimBotRootPart = game.Players[checkquestkillplr()].Character.HumanoidRootPart
                            if getgenv().SettingSave["Player"]["SelectedKillType"] == "Sword" or getgenv().SettingSave["Player"]["SelectedKillType"] == "Melee" then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[checkquestkillplr()].Character.HumanoidRootPart.CFrame * retCFm()
                                if checkcoldown(Plr.Data.DevilFruit.Value,"Z") and getgenv().SettingSave["Player"]["Z"] then
                                    useskill("Z",0)
                                end
                                if checkcoldown(Plr.Data.DevilFruit.Value,"X") and getgenv().SettingSave["Player"]["X"] then
                                    useskill("X",0)
                                end
                                if checkcoldown(game.Players.LocalPlayer.Data.DevilFruit.Value,"C") and getgenv().SettingSave["Player"]["C"] then
                                    useskill("C",0)
                                end
                                if checkcoldown(Plr.Data.DevilFruit.Value,"V") and getgenv().SettingSave["Player"]["V"] then
                                    useskill("V",0)
                                end
                                Rigc.activeController:attack()
                                Rigc.activeController.hitboxMagnitude = 100
                            elseif getgenv().SettingSave["Player"]["SelectedKillType"] == "Blox Fruit" then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[checkquestkillplr()].Character.HumanoidRootPart.CFrame * retCFm()
                                if checkcoldown(Plr.Data.DevilFruit.Value,"Z") and getgenv().SettingSave["Player"]["Z"] then
                                    useskill("Z",0)
                                end
                                if checkcoldown(Plr.Data.DevilFruit.Value,"X") and getgenv().SettingSave["Player"]["X"] then
                                    useskill("X",0)
                                end
                                if checkcoldown(game.Players.LocalPlayer.Data.DevilFruit.Value,"C") and getgenv().SettingSave["Player"]["C"] then
                                    if game.Players.LocalPlayer.Data.DevilFruit.Value == "Dragon-Dragon" then
                                        useskill("C",4)
                                    else
                                        useskill("C",0)
                                    end
                                end
                                if checkcoldown(Plr.Data.DevilFruit.Value,"V") and getgenv().SettingSave["Player"]["V"] then
                                    useskill("V",0)
                                end
                            elseif getgenv().SettingSave["Player"]["SelectedKillType"] == "Gun" then
                                LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[checkquestkillplr()].Character.HumanoidRootPart.CFrame * retCFm()
                                if checkcoldown(GetToolFromTip("Gun",true),"Z") and getgenv().SettingSave["Player"]["Z"] then
                                    useskill("Z",0)
                                end
                                if checkcoldown(GetToolFromTip("Gun",true),"X") and getgenv().SettingSave["Player"]["X"] then
                                    useskill("X",0)
                                end
                                if checkcoldown(GetToolFromTip("Gun",true),"C") and getgenv().SettingSave["Player"]["C"] then
                                    useskill("C",0)
                                end
                                if checkcoldown(GetToolFromTip("Gun",true),"V") and getgenv().SettingSave["Player"]["V"] then
                                    useskill("V",0)
                                end
                                game:GetService'VirtualUser':CaptureController()
                                game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                            end
                        else
                            totarget(game.Players[checkquestkillplr()].Character.HumanoidRootPart.CFrame)
                        end
                    else
                        cancelquest()
                    end
                else
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("PlayerHunter")
                end
            end)
        end
        if _G.KillPlayer then
            NameTraget = _G.SelectedPlayer
            if Distance(game.Players[NameTraget].Character.HumanoidRootPart.Position) < 100 then
                EquipWeapon(getgenv().SettingSave["Player"]["SelectedKillType"])
                if getgenv().SettingSave["Player"]["SelectedKillType"] == "Sword" or getgenv().SettingSave["Player"]["SelectedKillType"] == "Melee" then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[NameTraget].Character.HumanoidRootPart.CFrame * retCFm()
                    if checkcoldown(Plr.Data.DevilFruit.Value,"Z") and getgenv().SettingSave["Player"]["Z"] then
                        useskill("Z",0)
                    end
                    if checkcoldown(Plr.Data.DevilFruit.Value,"X") and getgenv().SettingSave["Player"]["X"] then
                        useskill("X",0)
                    end
                    if checkcoldown(game.Players.LocalPlayer.Data.DevilFruit.Value,"C") and getgenv().SettingSave["Player"]["C"] then
                        useskill("C",0)
                    end
                    if checkcoldown(Plr.Data.DevilFruit.Value,"V") and getgenv().SettingSave["Player"]["V"] then
                        useskill("V",0)
                    end
                    Attack()
                elseif getgenv().SettingSave["Player"]["SelectedKillType"] == "Blox Fruit" then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[NameTraget].Character.HumanoidRootPart.CFrame * retCFm()
                    if checkcoldown(Plr.Data.DevilFruit.Value,"Z") and getgenv().SettingSave["Player"]["Z"] then
                        useskill("Z",0)
                    end
                    if checkcoldown(Plr.Data.DevilFruit.Value,"X") and getgenv().SettingSave["Player"]["X"] then
                        useskill("X",0)
                    end
                    if checkcoldown(game.Players.LocalPlayer.Data.DevilFruit.Value,"C") and getgenv().SettingSave["Player"]["C"] then
                        if game.Players.LocalPlayer.Data.DevilFruit.Value == "Dragon-Dragon" then
                            useskill("C",4)
                        else
                            useskill("C",0)
                        end
                    end
                    if checkcoldown(Plr.Data.DevilFruit.Value,"V") and getgenv().SettingSave["Player"]["V"] then
                        useskill("V",0)
                    end
                elseif getgenv().SettingSave["Player"]["SelectedKillType"] == "Gun" then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[NameTraget].Character.HumanoidRootPart.CFrame * retCFm()
                    if checkcoldown(GetToolFromTip("Gun",true),"Z") and getgenv().SettingSave["Player"]["Z"] then
                        useskill("Z",0)
                    end
                    if checkcoldown(GetToolFromTip("Gun",true),"X") and getgenv().SettingSave["Player"]["X"] then
                        useskill("X",0)
                    end
                    if checkcoldown(GetToolFromTip("Gun",true),"C") and getgenv().SettingSave["Player"]["C"] then
                        useskill("C",0)
                    end
                    if checkcoldown(GetToolFromTip("Gun",true),"V") and getgenv().SettingSave["Player"]["V"] then
                        useskill("V",0)
                    end
                    game:GetService'VirtualUser':CaptureController()
                    game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                end
            else
                totarget(game.Players[NameTraget].Character.HumanoidRootPart.CFrame)
            end
        end
    end
end)
spawn(function()
    while game:GetService("RunService").RenderStepped:Wait() do
        pcall(function()
            _G.PlayerNearest = getnear(tonumber(getgenv().SettingSave["Player"]["MinDistanceLock"]))
            if game.Players:FindFirstChild(tostring(_G.PlayerNearest)) and getgenv().SettingSave["Player"]["SelectedAimbotType"] == "Aimbot Random Player" then
                _G.AimBotPosition = game.Players:FindFirstChild(tostring(_G.PlayerNearest)).Character.HumanoidRootPart.Position
                _G.AimBotRootPart = game.Players:FindFirstChild(tostring(_G.PlayerNearest)).Character.HumanoidRootPart
                tragetnow:SetText("        Traget : "..tostring(_G.PlayerNearest))
            elseif game.Players:FindFirstChild(tostring(_G.SelectedPlayer)) and getgenv().SettingSave["Player"]["SelectedAimbotType"]  == "Aimbot + SelectPlayer"  then
                _G.AimBotPosition = game.Players:FindFirstChild(tostring(_G.SelectedPlayer)).Character.HumanoidRootPart.Position
                _G.AimBotRootPart = game.Players:FindFirstChild(tostring(_G.SelectedPlayer)).Character.HumanoidRootPart
                tragetnow:SetText("        Traget : "..tostring(_G.SelectedPlayer))
            else
                _G.AimBotPosition = nil
                _G.AimBotRootPart = nil
                tragetnow:SetText("        Traget : Undefind")
            end
        end)
    end
end)


spawn(function()
    while wait() do
        pcall(function()
            if getgenv().SettingSave["Raid"]["AutoStartRaid"] then
                if Plr.Backpack:FindFirstChild("Special Microchip") or LocalPlayer.Character:FindFirstChild("Special Microchip") then
                    if ThirdSea then
                        fireclickdetector(game:GetService("Workspace").Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
                        game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible = true
                    end
                    if SecondSea then
                        fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon2.Button.Main.ClickDetector)
                        game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible = true
                    end
                    if game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible then
                        repeat
                            task.wait()
                        until not game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible
                        wait(15)
                    end
                end
            end
        end)   
    end
end)
spawn(function()
    while wait() do
        pcall(function()
            if getgenv().SettingSave["Raid"]["KillAura"] then
                for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if v:FindFirstChild("Humanoid") then
                        v.Humanoid.Health = 0
                        if sethiddenproperty then
                            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                end
            end
            if getgenv().SettingSave["Raid"]["AutoAwake"] then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener","Awaken")
            end
            if getgenv().SettingSave["Raid"]["AutobuyChips"] and not game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible then
                if not Plr.Backpack:FindFirstChild("Special Microchip") and not Char:FindFirstChild("Special Microchip") then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(DungeonShipData[getgenv().SettingSave["Raid"]["SelectedChips"]]))
                end
            end
            if getgenv().SettingSave["Raid"]["AutoNextIsland"] then
                if game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
					if game.Players.LocalPlayer.PlayerGui.Main.Timer.Visible == false then
					    
					elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") then
						game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5").CFrame = CFrame.new(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5").CFrame.x,60,game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5").CFrame.z)
						totarget(GetIslandRaid(5))
					elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") then
						game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4").CFrame = CFrame.new(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4").CFrame.x,60,game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4").CFrame.z)
						totarget(GetIslandRaid(4))
					elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") then
						game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3").CFrame = CFrame.new(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3").CFrame.x,60,game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3").CFrame.z)
						totarget(GetIslandRaid(3))
					elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") then
						game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2").CFrame = CFrame.new(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2").CFrame.x,60,game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2").CFrame.z)
						totarget(GetIslandRaid(2))
					elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
						game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1").CFrame = CFrame.new(game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1").CFrame.x,60,game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1").CFrame.z)
						totarget(GetIslandRaid(1))
					end
				end
            end
        end)   
    end
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if getgenv().SettingSave["Raid"]["UnlockKen"] then
                if game.Players.LocalPlayer.Character:FindFirstChild("KenDisabled") then
                    game.Players.LocalPlayer.Character:FindFirstChild("KenDisabled"):Destroy()
                end
            end
            if getgenv().SettingSave["Raid"]["UnLockGeppo"] then
                if game.Players.LocalPlayer.Character:FindFirstChild("GeppoCount") then
                    game.Players.LocalPlayer.Character:FindFirstChild("GeppoCount"):Destroy()
                end
            end
        end)
    end
end)


spawn(function()
    while wait() do
        pcall(function()
            if _G.teleportisland then
                totarget(game:GetService("Workspace")["_WorldOrigin"].PlayerSpawns.Pirates[_G.SelectedIsland].Part.CFrame)
            end
            if _G.teleportNpc then
                totarget(computed_quest[_G.SelectedNpc])
            end
            if _G.infinityrace and not game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("Agility") then
                local agility = game:GetService("ReplicatedStorage").FX.Agility:Clone()
                agility.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
            end
        end)
    end
end)

spawn(function()
	while task.wait() do
		if getgenv().SettingSave["SettingsFarm"]["FastAttack"] and getgenv().UseFast then
			pcall(function()
				Rigc.activeController.timeToNextAttack = 0
				Rigc.activeController.hitboxMagnitude = getgenv().SettingSave["SettingsFarm"]["hitbox"]
				Rigc.activeController.focusStart = 0
				Rigc.activeController.blocking = false
				Rigc.activeController.attacking = false
				Rigc.activeController.humanoid.AutoRotate = true
                if getgenv().SettingSave["SettingsFarm"]["AlwaysCritical"] then
				    Rigc.activeController.increment = Maxincrement()
                end
				if Rigc.activeController.data then
					Rigc.activeController.data.attackStartCallback = function()end
				end
				Attack()
			end)
		end
	end
end)
spawn(function()
	while task.wait() do
		if getgenv().SettingSave["SettingsFarm"]["FastAttack"] and getgenv().UseFast then
			pcall(function()
				Attack()
			end)
		end
	end
end)

spawn(function()
    while wait() do
        if getgenv().SettingSave["SettingsFarm"]["AutoHaki"] then
            pcall(function()
                if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
                    local args = {
                        [1] = "Buso"
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                end
            end)
        end
    end
end)

spawn(function()
    while wait() do
        pcall(function()
			if sethiddenproperty then
				sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
			end
		end)
    end
end)

spawn(function()
    while wait() do
		pcall(function()
            if getgenv().SettingSave["Fruit"]["DevilFruitRandom"] then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Cousin","Buy")
            end
		end)
    end
end)
spawn(function()
    while wait() do
		pcall(function()
            if getgenv().SettingSave["Fruit"]["DevilFruitStore"] then
                for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if v:IsA("Tool") and string.find(v.Name," Fruit") and v:FindFirstChild("EatRemote") and not v:FindFirstChild("Backlist") then
                        Hum:EquipTool(v)
                        wait()
                        local args = {
                            [1] = "StoreFruit",
                            [2] = getnamefruit(v.Name),
                            [3] = game:GetService("Players").LocalPlayer.Character:FindFirstChild(v.Name)
                        }
                        if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args)) == false then
                            local blacklist = Instance.new("IntValue",v)
                            blacklist.Name = "Backlist"
                        end
                    end
                end
            end
		end)
    end
end)
spawn(function()
    while task.wait() do
        if getgenv().SettingSave["Fruit"]["AutoSniperFruit"] then
            pcall(function()
                local args = {
                    [1] = "PurchaseRawFruit",
                    [2] = tostring(getgenv().SettingSave["Fruit"]["SelectFruitSniper"]),
                    [3] = false
                }
                
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                local args = {
                    [1] = "GetFruits",
                    [2] = false
                }
                
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            end)
        end
    end
end)

game:GetService("UserInputService").WindowFocused:connect(function()
    if getgenv().SettingSave["Fps"]["WhiteScreen"] then
        game.RunService:Set3dRenderingEnabled(true)
    end
end)
game:GetService("UserInputService").WindowFocusReleased:connect(function()
    if getgenv().SettingSave["Fps"]["WhiteScreen"] then
        game.RunService:Set3dRenderingEnabled(false)
    end
end)

function To(position)
    local Chr = game.Players.LocalPlayer.Character
    if Chr ~= nil then
        local ts = game:GetService("TweenService")
        local char = game.Players.LocalPlayer.Character
        local hm = char.HumanoidRootPart
        local dist = (hm.Position - game.Players.LocalPlayer:GetMouse().Hit.p).magnitude
        local tweenspeed = dist/tonumber(400)
        local ti = TweenInfo.new(tonumber(tweenspeed), Enum.EasingStyle.Linear)
        local tp = {CFrame = CFrame.new(position)}
        ts:Create(hm, ti, tp):Play()
        if true then
            local bv = Instance.new("BodyVelocity")
            bv.Parent = hm
            bv.MaxForce = Vector3.new(100000,100000,100000)
            bv.Velocity = Vector3.new(0,0,0)
            wait(tonumber(tweenspeed))
            bv:Destroy()
        end
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
        if not getgenv().clicktween then return end
        To(game.Players.LocalPlayer:GetMouse().Hit.p)
    end
 end)

local Mouse = Plr:GetMouse()
Mouse.Button1Down:connect(function()
    if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then return end
    if not Mouse.Target then return end
    if not getgenv().clicktp then return end
    Plr.Character:MoveTo(Mouse.Hit.p)
end)


spawn(function()
	local gg = getrawmetatable(game)
	local old = gg.__namecall
	setreadonly(gg,false)
	gg.__namecall = newcclosure(function(...)
		local method = getnamecallmethod()
		local args = {...}
		if tostring(method) == "FireServer" then
			if tostring(args[1]) == "RemoteEvent" then
				if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
					if UseSkillMasteryDevilFruit and getgenv().SettingSave["Mastery"]["FruitMastery"] then
						if type(args[2]) == "vector" then 
							args[2] = PositionSkillMasteryDevilFruit
						else
							args[2] = CFrame.new(PositionSkillMasteryDevilFruit)
						end
						return old(unpack(args))
					end
				end
			end
		end
		return old(...)
	end)
end)

spawn(function()
	local gg = getrawmetatable(game)
	local old = gg.__namecall
	setreadonly(gg,false)
	gg.__namecall = newcclosure(function(...)
		local method = getnamecallmethod()
		local args = {...}
		if tostring(method) == "FireServer" and _G.AimBotPosition ~= nil then
			if tostring(args[1]) == "RemoteEvent" then
				if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
					if _G.AutoHuntQuest or _G.KillPlayer or getgenv().SettingSave["Player"]["aimbotskill"] or getgenv().SettingSave["Mastery"]["GunMastery"] then
						args[2] = _G.AimBotPosition
						return old(unpack(args))
					end
				end
			end
		end
		return old(...)
	end)
end)




local game_metatable = getrawmetatable(game)
local namecall_original = game_metatable.__namecall
local remote_function = Instance.new("RemoteFunction")

local invokeserver_original
setreadonly(game_metatable, false) 
game_metatable.__namecall = newcclosure(function(self, ...) 
   local method = getnamecallmethod()
   local script = getcallingscript()
   return namecall_original(self, ...)
end)
invokeserver_original = hookfunction(remote_function.InvokeServer, newcclosure(function(self, method, Dafaq,...)
    local script = getcallingscript()
        if _G.AutoHuntQuest or _G.KillPlayer or getgenv().SettingSave["Player"]["aimbotgun"] or getgenv().SettingSave["Mastery"]["GunMastery"] then
            if tostring(self) == "RemoteFunctionShoot" then
                if _G.AimBotPosition ~= nil and _G.AimBotRootPart ~= nil then
                    method = _G.AimBotPosition
                    Dafaq = _G.AimBotRootPart
                    return invokeserver_original(self, method, Dafaq,...)
                end
            end
        end
    return invokeserver_original(self, method, Dafaq,...)
end))

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game:GetService("Players").LocalPlayer
local ArgsDash = {
	Character = Player.Character,
	Duration = .25,
	CFrame = Player.Character.HumanoidRootPart.CFrame,
}

local old; old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
	if self.Name == "CommE" and _G.MinkV4 then
		local args = {...}

		if args[1] == "Dodge" then
			coroutine.wrap(function() require(ReplicatedStorage.Effect.Container.Shared.LightningTP)(ArgsDash) end)()
		end
	end
	return old(self, ...)
end))

_G.truesf = true


local afdsd = 0

spawn(function()
    while task.wait() do
        if afdsd < 10 then
            afdsd = afdsd + 1
            local bosslist = Refresh("Boss")
            Options.SelectedBoss.Values = bosslist
            Options.SelectedBoss:SetValues()
        elseif afdsd > math.random(10,100) then
            afdsd = afdsd - 1
        end
    end
end)

spawn(function()
	while task.wait() do
		--pcall(function()
			if tonumber(LocalPlayer.Data.Level.Value) >= tonumber(getgenv().SettingSave["SettingsFarm"]["RedeemCode"]) then
                if _G.open == false then
                    for i,v in pairs({
                        "Enyo_is_Pro",
                        "Magicbus",
                        "JCWK",
                        "Starcodeheo",
                        "Bluxxy",
                        "fudd10_v2",
                        "3BVISITS",
                        "UPD16",
                        "FUDD10",
                        "BIGNEWS",
                        "Sub2OfficialNoobie",
                        "SUB2GAMERROBOT_EXP1",
                        "StrawHatMaine",
                        "SUB2NOOBMASTER123",
                        "Sub2Daigrock",
                        "Axiore",
                        "TantaiGaming",
                        "STRAWHATMAINE",
                        "kittgaming",
                        "Magicbus",
                        "JCWK",
                        "Starcodeheo",
                        "Bluxxy",
                        "fudd10_v2",
                        "Enyu_is_Pro",
                        "Sub2Fer999",
                        "THEGREATACE",
                        "SUB2GAMERROBOT_EXP1",
                        "Sub2OfficialNoobie",
                        "StrawHatMaine",
                        "SUB2NOOBMASTER123",
                        "Sub2Daigrock",
                        "Axiore",
                        "TantaiGaming",
                        "STRAWHATMAINE",
                        "JCWK",
                        "Sub2Fer999",
                        "Magicbus",
                        "Starcodeheo",
                        "Bluxxy",
                        "Sub2Fer999",
                    	"GAMERROBOT_YT"
                    }) do
					game:GetService("ReplicatedStorage").Remotes.Redeem:InvokeServer(v)
				    end
                    _G.open = true
                end
			end
		--end)
	end
end)

task.spawn(function()
	game:GetService("RunService").Stepped:Connect(function()
		pcall(function()
			--[World 1]
			if 

            getgenv().SettingSave["Main"]["AutoFarmLevel"] or getgenv().SettingSave["Boss"]["AutoKillAllBoss"] or getgenv().SettingSave["Boss"]["AutoKillBoss"] or
            getgenv().SettingSave["NextSea"]["AutoSecondSea"] or getgenv().SettingSave["NextSea"]["AutoThirdSea"] or getgenv().SettingSave["Mastery"]["GunMastery"] or
            getgenv().SettingSave["Raid"]["AutoNextIsland"] or
            _G.teleportNpc or getgenv().SettingSave["Mastery"]["FruitMastery"] or 
            _G.teleportisland or _G.TeleportPlayer or _G.AutoHuntQuest or _G.KillPlayer
            then

				if syn then
					setfflag("HumanoidParallelRemoveNoPhysics", "False")
					setfflag("HumanoidParallelRemoveNoPhysicsNoSimulate2", "False")
					game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
					if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit == true then
						game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit = false
					end
				else
					if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
						if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1") then
							if game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit == true then
								game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit = false
							end
							local BodyVelocity = Instance.new("BodyVelocity")
							BodyVelocity.Name = "BodyVelocity1"
							BodyVelocity.Parent =  game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
							BodyVelocity.MaxForce = Vector3.new(10000, 10000, 10000)
							BodyVelocity.Velocity = Vector3.new(0, 0, 0)
						end
					end
					for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
						if v:IsA("BasePart") then
							v.CanCollide = false    
						end
					end
				end
			else
				if game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1") then
					game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyVelocity1"):Destroy();
				end
			end
		end)
	end)
end)

return Library
